#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ workspace
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ node_modules, dist, .next –ø–∞–ø–∫–∏
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

function removeDirectory(dirPath) {
  if (!fs.existsSync(dirPath)) {
    return false;
  }
  
  try {
    console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ${dirPath}`);
    
    if (os.platform() === 'win32') {
      execSync(`rmdir /s /q "${dirPath}"`, { stdio: 'pipe' });
    } else {
      execSync(`rm -rf "${dirPath}"`, { stdio: 'pipe' });
    }
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${dirPath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${dirPath}:`, error.message);
    return false;
  }
}

function findDirectories(rootPath, dirName) {
  const dirs = [];
  
  function scanDirectory(currentPath) {
    if (!fs.existsSync(currentPath)) return;
    
    const items = fs.readdirSync(currentPath);
    
    for (const item of items) {
      const itemPath = path.join(currentPath, item);
      const stat = fs.statSync(itemPath);
      
      if (stat.isDirectory()) {
        if (item === dirName) {
          dirs.push(itemPath);
        } else if (item !== 'node_modules' && item !== '.git') {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º, –Ω–æ –Ω–µ —É–≥–ª—É–±–ª—è–µ–º—Å—è –≤ node_modules
          scanDirectory(itemPath);
        }
      }
    }
  }
  
  scanDirectory(rootPath);
  return dirs;
}

function main() {
  console.log('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ workspace...\n');
  
  const rootPath = path.resolve(__dirname, '..');
  let totalRemoved = 0;
  
  // –£–¥–∞–ª—è–µ–º node_modules
  console.log('üì¶ –£–¥–∞–ª—è–µ–º node_modules...');
  const nodeModulesDirs = findDirectories(rootPath, 'node_modules');
  nodeModulesDirs.forEach(dir => {
    if (removeDirectory(dir)) totalRemoved++;
  });
  
  // –£–¥–∞–ª—è–µ–º dist –ø–∞–ø–∫–∏
  console.log('\nüì¶ –£–¥–∞–ª—è–µ–º dist –ø–∞–ø–∫–∏...');
  const distDirs = findDirectories(rootPath, 'dist');
  distDirs.forEach(dir => {
    if (removeDirectory(dir)) totalRemoved++;
  });
  
  // –£–¥–∞–ª—è–µ–º .next –ø–∞–ø–∫–∏
  console.log('\nüì¶ –£–¥–∞–ª—è–µ–º .next –ø–∞–ø–∫–∏...');
  const nextDirs = findDirectories(rootPath, '.next');
  nextDirs.forEach(dir => {
    if (removeDirectory(dir)) totalRemoved++;
  });
  
  // –£–¥–∞–ª—è–µ–º .turbo –ø–∞–ø–∫–∏
  console.log('\nüì¶ –£–¥–∞–ª—è–µ–º .turbo –ø–∞–ø–∫–∏...');
  const turboDirs = findDirectories(rootPath, '.turbo');
  turboDirs.forEach(dir => {
    if (removeDirectory(dir)) totalRemoved++;
  });
  
  console.log(`\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ ${totalRemoved} –ø–∞–ø–æ–∫.`);
}

main();

