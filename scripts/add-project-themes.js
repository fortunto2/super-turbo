#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const FILES_TO_UPDATE = [
  {
    file: 'apps/super-landing/src/app/globals.css',
    theme: 'landing'
  },
  {
    file: 'apps/super-chatbot/src/app/globals.css', 
    theme: 'chatbot'
  }
];

// –ò–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const PROJECT_CSS_IMPORT = '@import "@turbo-super/ui/src/project-themes.css";\n\n';

function addProjectThemes(filePath, themeName) {
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }

    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ç–µ–º
    if (content.includes('@turbo-super/ui/src/project-themes.css')) {
      console.log(`‚úÖ CSS –∏–º–ø–æ—Ä—Ç —Ç–µ–º —É–∂–µ –µ—Å—Ç—å –≤: ${filePath}`);
      return false;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    let newContent = PROJECT_CSS_IMPORT + content;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–º—ã –∫ body, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    const bodyClassRegex = /body\s*{([^}]*)}/;
    const themeClass = `theme-${themeName}`;
    
    if (bodyClassRegex.test(newContent)) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è body, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å
      if (!newContent.includes(themeClass)) {
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä body –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å
        const firstBodyMatch = newContent?.match(/(\s*)body\s*{/);
        if (firstBodyMatch) {
          const indent = firstBodyMatch[1];
          const bodyComment = `${indent}/* –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–æ–µ–∫—Ç–∞ */\n${indent}body {\n${indent}  @apply ${themeClass};\n${indent}}\n\n`;
          
          // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
          const lastImportMatch = newContent.match(/@import[^;]*;(\s*)/g);
          if (lastImportMatch) {
            const lastImport = lastImportMatch[lastImportMatch.length - 1];
            const insertPos = newContent.indexOf(lastImport) + lastImport.length;
            newContent = newContent.slice(0, insertPos) + bodyComment + newContent.slice(insertPos);
          }
        }
      }
    }
    
    fs.writeFileSync(filePath, newContent);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ç–µ–º –≤: ${filePath}`);
    console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: ${themeClass}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  console.log('üé® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ç–µ–º...\n');
  
  let updatedCount = 0;
  
  for (const { file, theme } of FILES_TO_UPDATE) {
    if (addProjectThemes(file, theme)) {
      updatedCount++;
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ñ–∞–π–ª–æ–≤`);
  
  if (updatedCount > 0) {
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º');
    console.log('üéØ –ö–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ç–µ–º—É!');
  }
}

main();