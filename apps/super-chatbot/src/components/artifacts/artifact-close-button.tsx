import { memo } from 'react';
import { CrossIcon } from '../';
import { initialArtifactData, useArtifactLegacy } from '@/hooks/use-artifact';
import { useArtifactContext } from '@/contexts/artifact-context';
import {
  saveArtifactToStorage,
  clearArtifactFromStorage,
} from '@/lib/utils/artifact-persistence';

import { Button } from '@turbo-super/ui';
function PureArtifactCloseButton() {
  // –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–∞ —Ö—É–∫–∞
  const legacy = useArtifactLegacy();

  // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  let setArtifact: any;
  let chatId: string | undefined;

  try {
    const context = useArtifactContext();
    setArtifact = context.setArtifact;
    chatId = context.chatId;
  } catch {
    // Fallback –Ω–∞ legacy —Ö—É–∫
    console.log('üîç ArtifactCloseButton: Context not available, using legacy');
    setArtifact = legacy.setArtifact;
  }

  return (
    <Button
      data-testid="artifact-close-button"
      variant="outline"
      className="h-fit p-2 dark:hover:bg-zinc-700"
      onClick={() => {
        setArtifact((currentArtifact: any) => {
          if (currentArtifact.status === 'streaming') {
            // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Å–∫—Ä—ã–≤–∞–µ–º –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            return {
              ...currentArtifact,
              isVisible: false,
            };
          } else {
            // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            return { ...initialArtifactData, status: 'idle' };
          }
        });

        // –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
        if (chatId && typeof window !== 'undefined') {
          const currentArtifact = (window as any).artifactInstance?.artifact;
          if (currentArtifact && currentArtifact.status === 'streaming') {
            // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const hiddenArtifact = {
              ...currentArtifact,
              isVisible: false, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–π
            };
            saveArtifactToStorage(chatId, hiddenArtifact);
          } else {
            // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º
            clearArtifactFromStorage(chatId);
          }
        }
      }}
    >
      <CrossIcon size={18} />
    </Button>
  );
}

export const ArtifactCloseButton = memo(PureArtifactCloseButton, () => true);
