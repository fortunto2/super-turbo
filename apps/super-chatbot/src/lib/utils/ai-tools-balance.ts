import type { Session } from 'next-auth';
import { validateOperationBalance } from './tools-balance';

export interface BalanceCheckResult {
  valid: boolean;
  error?: string;
  cost?: number;
  userMessage?: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
 */
export async function checkBalanceBeforeArtifact(
  session: Session | null,
  operation: 'image-generation' | 'video-generation' | 'script-generation',
  operationType: string,
  multipliers: string[],
  operationDisplayName: string,
): Promise<BalanceCheckResult> {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
  // (–º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞)
  if (!session?.user?.id) {
    return { valid: true };
  }

  console.log(
    `üí≥ Checking balance for ${operationType} before creating artifact...`,
  );

  try {
    const balanceValidation = await validateOperationBalance(
      session.user.id,
      operation,
      operationType,
      multipliers,
    );

    if (!balanceValidation.valid) {
      console.error(`üí≥ Insufficient balance for ${operationType}`);

      const userMessage = formatBalanceErrorForUser(
        balanceValidation,
        operationDisplayName,
      );

      return {
        valid: false,
        ...(balanceValidation.error && { error: balanceValidation.error }),
        ...(balanceValidation.cost !== undefined && {
          cost: balanceValidation.cost,
        }),
        userMessage,
      };
    }

    console.log(
      `üí≥ Balance validated: ${balanceValidation.cost} credits required for ${operationType}`,
    );

    return {
      valid: true,
      ...(balanceValidation.cost !== undefined && {
        cost: balanceValidation.cost,
      }),
    };
  } catch (error) {
    console.error(`üí≥ Error checking balance for ${operationType}:`, error);
    return {
      valid: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
      userMessage: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è ${operationDisplayName}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
function formatBalanceErrorForUser(
  balanceValidation: { error?: string; cost?: number },
  operationDisplayName: string,
): string {
  if (balanceValidation.cost) {
    return `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${operationDisplayName}. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${balanceValidation.cost} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`;
  }

  return `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${operationDisplayName}. ${balanceValidation.error || '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.'}`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è AI tools
 */
export function getOperationDisplayName(operationType: string): string {
  const operationNames: Record<string, string> = {
    'text-to-image': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'image-to-image': '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'text-to-video': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    'image-to-video': '—Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'basic-script': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è',
    'image-generation': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'video-generation': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    'script-generation': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è',
  };

  return operationNames[operationType] || operationType;
}
