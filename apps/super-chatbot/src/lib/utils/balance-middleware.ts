import type { NextResponse } from 'next/server';
import {
  validateOperationBalance,
  deductOperationBalance,
} from './tools-balance';
import {
  handleBalanceError,
  createBalanceError,
  createBalanceErrorResponse,
} from './balance-error-handler';

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
 */
export async function checkBalanceForArtifact(
  userId: string,
  operation: 'image-generation' | 'video-generation' | 'script-generation',
  operationType: string,
  multipliers: string[],
): Promise<{ valid: boolean; errorContent?: string }> {
  const balanceValidation = await validateOperationBalance(
    userId,
    operation,
    operationType,
    multipliers,
  );

  if (!balanceValidation.valid) {
    const balanceError = createBalanceError(balanceValidation);
    const errorContent = handleBalanceError(balanceError, operationType);

    return { valid: false, errorContent };
  }

  return { valid: true };
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ API –º–∞—Ä—à—Ä—É—Ç–∞—Ö
 */
export async function checkBalanceForAPI(
  userId: string,
  operation: 'image-generation' | 'video-generation' | 'script-generation',
  operationType: string,
  multipliers: string[],
): Promise<{ valid: boolean; errorResponse?: NextResponse }> {
  const balanceValidation = await validateOperationBalance(
    userId,
    operation,
    operationType,
    multipliers,
  );

  if (!balanceValidation.valid) {
    const errorResponse = createBalanceErrorResponse(
      balanceValidation,
      operationType,
    );

    return {
      valid: false,
      errorResponse: Response.json(errorResponse, {
        status: 402,
      }) as NextResponse,
    };
  }

  return { valid: true };
}

/**
 * –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function deductBalanceAfterSuccess(
  userId: string,
  operation: 'image-generation' | 'video-generation' | 'script-generation',
  operationType: string,
  multipliers: string[],
  operationDetails: Record<string, any>,
): Promise<void> {
  try {
    await deductOperationBalance(
      userId,
      operation,
      operationType,
      multipliers,
      operationDetails,
    );
    console.log(
      `üí≥ Balance deducted for user ${userId} after ${operationType}`,
    );
  } catch (balanceError) {
    console.error(
      `‚ö†Ô∏è Failed to deduct balance after ${operationType}:`,
      balanceError,
    );
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  }
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 */
export async function withBalanceCheck<T>(
  userId: string,
  operation: 'image-generation' | 'video-generation' | 'script-generation',
  operationType: string,
  multipliers: string[],
  callback: () => Promise<T>,
  operationDetails?: Record<string, any>,
): Promise<T | string> {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  const { valid, errorContent } = await checkBalanceForArtifact(
    userId,
    operation,
    operationType,
    multipliers,
  );

  if (!valid) {
    return errorContent || 'Insufficient balance';
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const result = await callback();

  // –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  if (operationDetails) {
    await deductBalanceAfterSuccess(
      userId,
      operation,
      operationType,
      multipliers,
      operationDetails,
    );
  }

  return result;
}
