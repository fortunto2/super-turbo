import { addUserBalance } from './tools-balance';
import {
  deleteUserProject,
  updateProjectStatus,
} from '@/lib/db/project-queries';

export interface ProjectError {
  type: 'prefect_failure' | 'api_failure' | 'balance_error' | 'unknown';
  message: string;
  projectId: string;
  userId: string;
  creditsUsed: number;
  originalError?: any;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export async function handleProjectError(error: ProjectError): Promise<void> {
  console.error(`üö® Project error for ${error.projectId}:`, error);

  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ "failed"
    await updateProjectStatus(error.projectId, 'failed', error.message);

    // 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã
    if (error.creditsUsed > 0) {
      try {
        await addUserBalance(
          error.userId,
          error.creditsUsed,
          `Refund for failed project ${error.projectId}`,
          {
            projectId: error.projectId,
            errorType: error.type,
            originalError: error.originalError,
            timestamp: new Date().toISOString(),
          },
        );
        console.log(
          `üí∞ Refunded ${error.creditsUsed} credits to user ${error.userId} for failed project ${error.projectId}`,
        );
      } catch (refundError) {
        console.error(
          `‚ùå Failed to refund credits for project ${error.projectId}:`,
          refundError,
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
      }
    }

    // 3. –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.error(
      `üìä Project ${error.projectId} marked as failed: ${error.message}`,
    );
  } catch (handlerError) {
    console.error(
      `‚ùå Critical error in project error handler for ${error.projectId}:`,
      handlerError,
    );
    // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
    try {
      await deleteUserProject(error.projectId);
      console.log(`üóëÔ∏è Emergency cleanup: deleted project ${error.projectId}`);
    } catch (cleanupError) {
      console.error(
        `üí• Emergency cleanup failed for project ${error.projectId}:`,
        cleanupError,
      );
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export function createProjectError(
  type: ProjectError['type'],
  message: string,
  projectId: string,
  userId: string,
  creditsUsed = 0,
  originalError?: any,
): ProjectError {
  return {
    type,
    message,
    projectId,
    userId,
    creditsUsed,
    originalError,
  };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É Prefect –ø–∞–π–ø–ª–∞–π–Ω–∞
 */
export async function handlePrefectError(
  projectId: string,
  userId: string,
  creditsUsed: number,
  error: any,
): Promise<void> {
  const projectError = createProjectError(
    'prefect_failure',
    `Prefect pipeline failed: ${error.message || 'Unknown error'}`,
    projectId,
    userId,
    creditsUsed,
    error,
  );

  await handleProjectError(projectError);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É API
 */
export async function handleApiError(
  projectId: string,
  userId: string,
  creditsUsed: number,
  error: any,
): Promise<void> {
  const projectError = createProjectError(
    'api_failure',
    `API error: ${error.message || 'Unknown API error'}`,
    projectId,
    userId,
    creditsUsed,
    error,
  );

  await handleProjectError(projectError);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –±–∞–ª–∞–Ω—Å–∞
 */
export async function handleBalanceError(
  projectId: string,
  userId: string,
  creditsUsed: number,
  error: any,
): Promise<void> {
  const projectError = createProjectError(
    'balance_error',
    `Balance error: ${error.message || 'Unknown balance error'}`,
    projectId,
    userId,
    creditsUsed,
    error,
  );

  await handleProjectError(projectError);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞
 */
export function shouldRollbackProject(error: any): boolean {
  // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Prefect, API –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
  if (error?.message?.includes('AuthenticationError')) return true;
  if (error?.message?.includes('401')) return true;
  if (error?.message?.includes('prefect')) return true;
  if (error?.message?.includes('pipeline')) return true;

  return false;
}
