export interface BalanceError {
  type: 'insufficient_balance' | 'payment_required' | 'quota_exceeded';
  message: string;
  cost?: number;
  availableCredits?: number;
  requiredCredits?: number;
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–ª–∞–Ω—Å–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –æ—à–∏–±–∫–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
 */
export function handleBalanceError(
  error: BalanceError,
  operationType = 'operation',
): string {
  const errorMessage = formatBalanceErrorMessage(error, operationType);

  console.error(`üí≥ Balance error for ${operationType}:`, error);

  // AICODE-NOTE: AI SDK 5.0 - custom 'error' type removed
  // Errors are now thrown and handled by the framework
  // Balance errors should be returned in tool response, not streamed

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –æ—à–∏–±–∫–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
  return JSON.stringify({
    status: 'failed',
    error: errorMessage,
    errorType: error.type,
    timestamp: Date.now(),
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function formatBalanceErrorMessage(
  error: BalanceError,
  operationType: string,
): string {
  switch (error.type) {
    case 'insufficient_balance':
      if (error.requiredCredits && error.availableCredits !== undefined) {
        return `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${getOperationDisplayName(operationType)}. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${error.requiredCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω–æ: ${error.availableCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`;
      }
      return `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ${getOperationDisplayName(operationType)}. ${error.message}`;

    case 'payment_required':
      return `–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${getOperationDisplayName(operationType)} —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞. ${error.message}`;

    case 'quota_exceeded':
      return `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è ${getOperationDisplayName(operationType)}. ${error.message}`;

    default:
      return `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${getOperationDisplayName(operationType)}: ${error.message}`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function getOperationDisplayName(operationType: string): string {
  const operationNames: Record<string, string> = {
    'text-to-image': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'image-to-image': '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'text-to-video': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    'image-to-video': '—Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'image-generation': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'video-generation': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
    operation: '–æ–ø–µ—Ä–∞—Ü–∏–∏',
  };

  return operationNames[operationType] || operationType;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç BalanceError –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ validateOperationBalance
 */
export function createBalanceError(
  balanceValidation: { valid: boolean; error?: string; cost?: number },
  availableCredits?: number,
): BalanceError {
  return {
    type: 'insufficient_balance',
    message: balanceValidation.error || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
    ...(balanceValidation.cost !== undefined && {
      cost: balanceValidation.cost,
    }),
    ...(balanceValidation.cost !== undefined && {
      requiredCredits: balanceValidation.cost,
    }),
    ...(availableCredits !== undefined && { availableCredits }),
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export function createBalanceErrorResponse(
  balanceValidation: { valid: boolean; error?: string; cost?: number },
  operationType = 'operation',
) {
  const balanceError = createBalanceError(balanceValidation);
  const errorMessage = formatBalanceErrorMessage(balanceError, operationType);

  console.error(`üí≥ Balance error for ${operationType}:`, balanceError);

  return {
    success: false,
    error: 'Insufficient balance',
    message: errorMessage,
    details: balanceValidation.error,
    requiredCredits: balanceValidation.cost,
    errorType: balanceError.type,
  };
}
