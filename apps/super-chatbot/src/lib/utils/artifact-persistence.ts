/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */

export interface SavedArtifactData {
  documentId: string;
  status: 'streaming' | 'idle' | 'error' | 'completed' | 'pending';
  kind: string;
  title: string;
  content: string;
  isVisible: boolean;
  timestamp: number;
  version: string;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ localStorage
 */
export function saveArtifactToStorage(chatId: string, artifact: any): void {
  console.log('üîç saveArtifactToStorage called:', {
    chatId,
    artifact,
    hasWindow: typeof window !== 'undefined',
  });

  if (typeof window === 'undefined' || !chatId || !artifact) {
    console.log('‚ö†Ô∏è saveArtifactToStorage skipped:', {
      hasWindow: typeof window !== 'undefined',
      chatId: !!chatId,
      artifact: !!artifact,
    });
    return;
  }

  // Don't save artifacts with init documentId (temporary/placeholder artifacts)
  if (artifact.documentId === 'init') {
    console.log('‚ö†Ô∏è saveArtifactToStorage skipped: init documentId');
    return;
  }

  const artifactData: SavedArtifactData = {
    documentId: artifact.documentId,
    status: artifact.status,
    kind: artifact.kind,
    title: artifact.title || '',
    content: artifact.content || '',
    isVisible: artifact.isVisible,
    timestamp: Date.now(),
    version: '2.0',
  };

  try {
    const key = `artifact-${chatId}`;
    const value = JSON.stringify(artifactData);

    console.log('üîç Saving to localStorage:', { key, value: artifactData });
    localStorage.setItem(key, value);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const saved = localStorage.getItem(key);
    console.log(
      'üîç Verification - saved data:',
      saved ? '‚úÖ Success' : '‚ùå Failed',
    );

    console.log('üíæ Artifact saved to storage:', {
      chatId,
      documentId: artifactData.documentId,
      status: artifactData.status,
      isVisible: artifactData.isVisible,
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è Error saving artifact to storage:', error);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ localStorage
 */
export function loadArtifactFromStorage(
  chatId: string,
): SavedArtifactData | null {
  console.log('üîç loadArtifactFromStorage called:', {
    chatId,
    hasWindow: typeof window !== 'undefined',
  });

  if (typeof window === 'undefined' || !chatId) {
    console.log('‚ö†Ô∏è loadArtifactFromStorage skipped:', {
      hasWindow: typeof window !== 'undefined',
      chatId: !!chatId,
    });
    return null;
  }

  try {
    const key = `artifact-${chatId}`;
    const saved = localStorage.getItem(key);
    console.log('üîç Retrieved from localStorage:', {
      key,
      saved: saved ? 'Found' : 'Not found',
    });

    if (!saved) {
      console.log('üîç No data found for key:', key);
      return null;
    }

    const data = JSON.parse(saved) as SavedArtifactData;
    console.log('üîç Parsed data:', data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const age = Date.now() - data.timestamp;
    console.log('üîç Data age check:', { age, maxAge, isExpired: age > maxAge });

    if (age > maxAge) {
      console.log('üóëÔ∏è Artifact data expired, removing:', chatId);
      localStorage.removeItem(key);
      return null;
    }

    console.log('‚úÖ Data is valid and not expired');
    return data;
  } catch (error) {
    console.error('‚ùå Failed to load artifact from storage:', error);
    localStorage.removeItem(`artifact-${chatId}`);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ localStorage
 */
export function clearArtifactFromStorage(chatId: string): void {
  if (typeof window === 'undefined' || !chatId) return;

  localStorage.removeItem(`artifact-${chatId}`);
  console.log('üóëÔ∏è Artifact cleared from storage:', chatId);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞
 */
export function hasSavedArtifact(chatId: string): boolean {
  if (typeof window === 'undefined' || !chatId) return false;

  return localStorage.getItem(`artifact-${chatId}`) !== null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */
export function getAllSavedArtifacts(): Array<{
  chatId: string;
  data: SavedArtifactData;
}> {
  if (typeof window === 'undefined') return [];

  const artifacts: Array<{ chatId: string; data: SavedArtifactData }> = [];

  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key?.startsWith('artifact-')) {
      const chatId = key.replace('artifact-', '');
      const data = loadArtifactFromStorage(chatId);
      if (data) {
        artifacts.push({ chatId, data });
      }
    }
  }

  return artifacts;
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function restoreArtifactFromData(data: SavedArtifactData): any {
  return {
    documentId: data.documentId,
    kind: data.kind,
    status: data.status,
    isVisible: data.isVisible,
    title: data.title,
    content: data.content,
    boundingBox: {
      top: 0,
      left: 0,
      width: 0,
      height: 0,
    },
    timestamp: data.timestamp,
  };
}
