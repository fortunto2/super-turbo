import { tool } from "ai";
import { z } from 'zod/v3';
import { runBananaInference, getBananaModels } from "@/lib/ai/banana-api";

export const bananaInferenceTool = tool({
  description:
    "–ó–∞–ø—É—Å–∫–∞–µ—Ç inference –Ω–∞ Banana GPU –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
  inputSchema: z.object({
    modelId: z.string().describe("ID –º–æ–¥–µ–ª–∏ Banana –¥–ª—è inference"),
    inputs: z.record(z.any()).describe("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏"),
    config: z
      .object({
        maxOutputTokens: z
          .number()
          .optional()
          .describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
        temperature: z
          .number()
          .min(0)
          .max(2)
          .optional()
          .describe("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0-2)"),
        topP: z
          .number()
          .min(0)
          .max(1)
          .optional()
          .describe("Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä (0-1)"),
      })
      .optional()
      .describe("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è inference"),
  }),
  execute: async ({ modelId, inputs, config }) => {
    try {
      console.log("üçå Starting Banana inference:", { modelId, inputs, config });

      const result = await runBananaInference({
        modelId,
        inputs,
        ...(config && {
          config: {
            ...(config.maxOutputTokens !== undefined && {
              maxOutputTokens: config.maxOutputTokens,
            }),
            ...(config.temperature !== undefined && {
              temperature: config.temperature,
            }),
            ...(config.topP !== undefined && { topP: config.topP }),
          },
        }),
      });

      if (result.status === "error") {
        return {
          success: false,
          error: result.error,
          inferenceId: result.id,
        };
      }

      return {
        success: true,
        inferenceId: result.id,
        outputs: result.outputs,
        metrics: result.metrics,
        inferenceTime: result.metrics?.inferenceTime,
        gpuUtilization: result.metrics?.gpuUtilization,
        memoryUsed: result.metrics?.memoryUsed,
      };
    } catch (error) {
      console.error("üçå Banana inference error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  },
});

export const listBananaModelsTool = tool({
  description: "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Banana –¥–ª—è inference",
  inputSchema: z.object({
    framework: z
      .string()
      .optional()
      .describe("–§–∏–ª—å—Ç—Ä –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—É (PyTorch, TensorFlow, etc.)"),
    status: z
      .enum(["active", "inactive"])
      .optional()
      .describe("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –º–æ–¥–µ–ª–∏"),
  }),
  execute: async ({ framework, status }) => {
    try {
      console.log("üçå Fetching Banana models:", { framework, status });

      const models = await getBananaModels();

      let filteredModels = models;

      if (framework) {
        filteredModels = filteredModels.filter((model) =>
          model.framework.toLowerCase().includes(framework.toLowerCase())
        );
      }

      if (status) {
        filteredModels = filteredModels.filter(
          (model) => model.status === status
        );
      }

      return {
        success: true,
        models: filteredModels,
        totalCount: filteredModels.length,
        frameworks: [...new Set(models.map((m) => m.framework))],
      };
    } catch (error) {
      console.error("üçå Banana models error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  },
});
