import { tool } from "ai";
import { z } from 'zod/v3';
import { getImageGenerationConfig } from "@/lib/config/media-settings-factory";
import {
  checkBalanceBeforeArtifact,
  getOperationDisplayName,
} from "@/lib/utils/ai-tools-balance";
import type { Session } from "next-auth";
import { analyzeImageContext } from "@/lib/ai/context";

interface CreateImageDocumentParams {
  createDocument: any;
  session?: Session | null;
  defaultSourceImageUrl?: string;
  chatId?: string;
  userMessage?: string;
  currentAttachments?: any[];
}

// –¢–∏–ø—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Nano Banana
const NANO_BANANA_EDIT_TYPES = [
  {
    id: "background-replacement",
    label: "–ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞",
    description:
      "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–π",
    requiresSource: true,
  },
  {
    id: "object-addition",
    label: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤",
    description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–æ–π",
    requiresSource: true,
  },
  {
    id: "object-removal",
    label: "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤",
    description: "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ–æ–Ω–∞",
    requiresSource: true,
  },
  {
    id: "style-transfer",
    label: "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è",
    description: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    requiresSource: true,
  },
  {
    id: "color-correction",
    label: "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ü–≤–µ—Ç–∞",
    description: "–£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –∏ –æ—Å–≤–µ—â–µ–Ω–∏—è",
    requiresSource: true,
  },
  {
    id: "resolution-upscale",
    label: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
    description: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    requiresSource: true,
  },
  {
    id: "face-enhancement",
    label: "–£–ª—É—á—à–µ–Ω–∏–µ –ª–∏—Ü",
    description: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏ –ª–∏—Ü",
    requiresSource: true,
  },
  {
    id: "text-addition",
    label: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    description: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    requiresSource: true,
  },
  {
    id: "composition-improvement",
    label: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
    description: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
    requiresSource: true,
  },
  {
    id: "lighting-adjustment",
    label: "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è",
    description: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Ç–µ–Ω–µ–π",
    requiresSource: true,
  },
] as const;

// –£—Ä–æ–≤–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const NANO_BANANA_PRECISION_LEVELS = [
  {
    id: "automatic",
    label: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
    description: "Nano Banana –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π –ø–æ–¥—Ö–æ–¥",
    multiplier: 1.0,
  },
  {
    id: "precise",
    label: "–¢–æ—á–Ω—ã–π",
    description: "–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π",
    multiplier: 1.5,
  },
  {
    id: "surgical",
    label: "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–π",
    description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
    multiplier: 2.0,
  },
] as const;

// –†–µ–∂–∏–º—ã —Å–º–µ—à–∏–≤–∞–Ω–∏—è
const NANO_BANANA_BLEND_MODES = [
  {
    id: "natural",
    label: "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
    description: "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º",
  },
  {
    id: "seamless",
    label: "–ë–µ—Å—à–æ–≤–Ω—ã–π",
    description: "–ü–æ–ª–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
  },
  {
    id: "artistic",
    label: "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
    description: "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
  },
  {
    id: "realistic",
    label: "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
    description: "–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
  },
] as const;

export const nanoBananaImageEditing = (params?: CreateImageDocumentParams) =>
  tool({
    description:
      "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini-2.5-Flash-Image (Nano Banana). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
    inputSchema: z.object({
      editType: z
        .enum(NANO_BANANA_EDIT_TYPES.map((t) => t.id) as [string, ...string[]])
        .describe(
          "–¢–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Nano Banana –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."
        ),
      editPrompt: z
        .string()
        .describe(
          "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å."
        ),
      sourceImageUrl: z
        .string()
        .url()
        .describe(
          "URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        ),
      precisionLevel: z
        .enum(
          NANO_BANANA_PRECISION_LEVELS.map((p) => p.id) as [string, ...string[]]
        )
        .optional()
        .default("automatic")
        .describe(
          "–£—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        ),
      blendMode: z
        .enum(NANO_BANANA_BLEND_MODES.map((b) => b.id) as [string, ...string[]])
        .optional()
        .default("natural")
        .describe("–†–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."),
      preserveOriginalStyle: z
        .boolean()
        .optional()
        .default(true)
        .describe(
          "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."
        ),
      enhanceLighting: z
        .boolean()
        .optional()
        .default(true)
        .describe("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."),
      preserveShadows: z
        .boolean()
        .optional()
        .default(true)
        .describe("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–∏ –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è."),
      seed: z
        .number()
        .optional()
        .describe("Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
      batchSize: z
        .number()
        .min(1)
        .max(3)
        .optional()
        .default(1)
        .describe("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-3)."),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      objectToRemove: z
        .string()
        .optional()
        .describe("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è —Ç–∏–ø–∞ object-removal)."),
      newBackground: z
        .string()
        .optional()
        .describe("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞ (–¥–ª—è —Ç–∏–ø–∞ background-replacement)."),
      textToAdd: z
        .string()
        .optional()
        .describe(
          "–¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è —Ç–∏–ø–∞ text-addition)."
        ),
      textStyle: z
        .string()
        .optional()
        .describe(
          "–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: font, color, size, position (–¥–ª—è —Ç–∏–ø–∞ text-addition)."
        ),
      targetStyle: z
        .string()
        .optional()
        .describe("–¶–µ–ª–µ–≤–æ–π —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–¥–ª—è —Ç–∏–ø–∞ style-transfer)."),
    }),
    execute: async ({
      editType,
      editPrompt,
      sourceImageUrl,
      precisionLevel,
      blendMode,
      preserveOriginalStyle,
      enhanceLighting,
      preserveShadows,
      seed,
      batchSize,
      objectToRemove,
      newBackground,
      textToAdd,
      textStyle,
      targetStyle,
    }) => {
      console.log("üçå nanoBananaImageEditing called with:", {
        editType,
        editPrompt,
        precisionLevel,
        blendMode,
        preserveOriginalStyle,
        enhanceLighting,
        preserveShadows,
        batchSize,
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const config = await getImageGenerationConfig();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (!sourceImageUrl) {
        return {
          error: "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          editTypes: NANO_BANANA_EDIT_TYPES,
          precisionLevels: NANO_BANANA_PRECISION_LEVELS,
          blendModes: NANO_BANANA_BLEND_MODES,
        };
      }

      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const selectedEditType = NANO_BANANA_EDIT_TYPES.find(
        (t) => t.id === editType
      );
      if (!selectedEditType) {
        return {
          error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          availableTypes: NANO_BANANA_EDIT_TYPES,
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (selectedEditType.requiresSource && !sourceImageUrl) {
        return {
          error: `–¢–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "${selectedEditType.label}" —Ç—Ä–µ–±—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
          editType: selectedEditType,
        };
      }

      console.log(
        "üçå ‚úÖ EDIT PROMPT PROVIDED, CREATING NANO BANANA EDIT DOCUMENT:",
        editPrompt
      );

      if (!params?.createDocument) {
        console.log(
          "üçå ‚ùå createDocument not available, returning basic config"
        );
        return config;
      }

      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
        const selectedPrecision =
          NANO_BANANA_PRECISION_LEVELS.find((p) => p.id === precisionLevel) ||
          NANO_BANANA_PRECISION_LEVELS[0];
        const selectedBlendMode =
          NANO_BANANA_BLEND_MODES.find((b) => b.id === blendMode) ||
          NANO_BANANA_BLEND_MODES[0];

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let normalizedSourceUrl = sourceImageUrl;

        if (params?.chatId && params?.userMessage) {
          try {
            console.log(
              "üîç Analyzing image context for Nano Banana editing..."
            );
            const contextResult = await analyzeImageContext(
              params.userMessage,
              params.chatId,
              params.currentAttachments,
              params.session?.user?.id
            );

            if (contextResult.sourceUrl && contextResult.confidence !== "low") {
              console.log(
                "üîç Using sourceUrl from context analysis:",
                contextResult.sourceUrl
              );
              normalizedSourceUrl = contextResult.sourceUrl;
            }
          } catch (error) {
            console.warn("üîç Error in context analysis, falling back:", error);
          }
        }

        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let nanoBananaEditPrompt = `Edit the image: ${editPrompt}`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        switch (editType) {
          case "background-replacement":
            if (newBackground) {
              nanoBananaEditPrompt += `. Replace background with: ${newBackground}`;
            }
            nanoBananaEditPrompt += `. Maintain original lighting, shadows, and reflections. Context-aware background replacement.`;
            break;

          case "object-addition":
            nanoBananaEditPrompt += `. Add the object with proper perspective, lighting, and shadows. Seamless integration with existing scene.`;
            break;

          case "object-removal":
            if (objectToRemove) {
              nanoBananaEditPrompt += `. Remove: ${objectToRemove}`;
            }
            nanoBananaEditPrompt += `. Restore background naturally. Perfect inpainting.`;
            break;

          case "style-transfer":
            if (targetStyle) {
              nanoBananaEditPrompt += `. Apply style: ${targetStyle}`;
            }
            nanoBananaEditPrompt += `. Maintain composition and subject while changing artistic style.`;
            break;

          case "color-correction":
            nanoBananaEditPrompt += `. Improve colors, contrast, and lighting. Professional color grading.`;
            break;

          case "resolution-upscale":
            nanoBananaEditPrompt += `. Enhance resolution and details. AI upscaling with quality preservation.`;
            break;

          case "face-enhancement":
            nanoBananaEditPrompt += `. Enhance facial features, skin texture, and portrait quality. Professional retouching.`;
            break;

          case "text-addition":
            if (textToAdd) {
              nanoBananaEditPrompt += `. Add text: "${textToAdd}"`;
              if (textStyle) {
                nanoBananaEditPrompt += ` with style: ${textStyle}`;
              }
            }
            nanoBananaEditPrompt += `. Integrate text naturally into the image.`;
            break;

          case "composition-improvement":
            nanoBananaEditPrompt += `. Improve composition, framing, and visual balance. Professional photography principles.`;
            break;

          case "lighting-adjustment":
            nanoBananaEditPrompt += `. Adjust lighting, shadows, and highlights. Professional lighting correction.`;
            break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è Nano Banana
        nanoBananaEditPrompt += `. ${selectedPrecision.description.toLowerCase()}. ${selectedBlendMode.description.toLowerCase()}.`;

        if (preserveOriginalStyle) {
          nanoBananaEditPrompt += ` Preserve original artistic style.`;
        }

        if (enhanceLighting) {
          nanoBananaEditPrompt += ` Enhance lighting and atmosphere.`;
        }

        if (preserveShadows) {
          nanoBananaEditPrompt += ` Maintain realistic shadows and reflections.`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const multipliers: string[] = [];
        if (selectedPrecision.id === "precise")
          multipliers.push("high-precision");
        if (selectedPrecision.id === "surgical")
          multipliers.push("surgical-precision");
        if (batchSize && batchSize > 1) multipliers.push(`batch-${batchSize}`);

        const balanceCheck = await checkBalanceBeforeArtifact(
          params.session || null,
          "image-generation",
          "image-to-image",
          multipliers,
          getOperationDisplayName("image-to-image")
        );

        if (!balanceCheck.valid) {
          console.log("üçå ‚ùå INSUFFICIENT BALANCE, NOT CREATING ARTIFACT");
          return {
            error:
              balanceCheck.userMessage ||
              "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            balanceError: true,
            requiredCredits: balanceCheck.cost,
          };
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const editParams = {
          prompt: nanoBananaEditPrompt,
          model: "gemini-2.5-flash-image",
          editType: selectedEditType,
          precisionLevel: selectedPrecision,
          blendMode: selectedBlendMode,
          sourceImageUrl: normalizedSourceUrl,
          seed: seed || undefined,
          batchSize: batchSize || 1,
          preserveOriginalStyle,
          enhanceLighting,
          preserveShadows,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          ...(objectToRemove && { objectToRemove }),
          ...(newBackground && { newBackground }),
          ...(textToAdd && { textToAdd }),
          ...(textStyle && { textStyle }),
          ...(targetStyle && { targetStyle }),
        };

        console.log(
          "üçå ‚úÖ CREATING NANO BANANA EDIT DOCUMENT WITH PARAMS:",
          editParams
        );

        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Nano Banana Provider (Gemini + SuperDuperAI)
          console.log(
            "üçå üöÄ NANO BANANA: Using hybrid Gemini + SuperDuperAI approach for editing"
          );

          const { nanoBananaProvider } = await import(
            "../providers/nano-banana"
          );

          const nanoBananaParams = {
            editPrompt: nanoBananaEditPrompt,
            sourceImageUrl: normalizedSourceUrl,
            editType: selectedEditType.id,
            precisionLevel: selectedPrecision.id,
            blendMode: selectedBlendMode.id,
            preserveOriginalStyle,
            enhanceLighting,
            preserveShadows,
            nanoBananaEditFeatures: {
              enableContextAwareness: true,
              enableSurgicalPrecision: true,
              creativeMode: false,
              preserveOriginalStyle,
              enhanceLighting,
              preserveShadows,
            },
          };

          const result = await nanoBananaProvider.editImage(nanoBananaParams);

          console.log("üçå ‚úÖ NANO BANANA EDIT API RESULT:", result);

          return {
            ...result,
            message: `–†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Nano Banana (Gemini + SuperDuperAI): "${editPrompt}". –¢–∏–ø: ${selectedEditType.label}, –¢–æ—á–Ω–æ—Å—Ç—å: ${selectedPrecision.label}, –°–º–µ—à–∏–≤–∞–Ω–∏–µ: ${selectedBlendMode.label}. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`,
            nanoBananaEditInfo: {
              model: "gemini-2.5-flash-image",
              editType: selectedEditType,
              precisionLevel: selectedPrecision,
              blendMode: selectedBlendMode,
              capabilities: [
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è",
                "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ",
              ],
            },
          };
        } catch (error) {
          console.error("üçå ‚ùå NANO BANANA EDIT API ERROR:", error);

          // Fallback –Ω–∞ createDocument –µ—Å–ª–∏ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          console.log(
            "üçå üîÑ FALLBACK: Using createDocument as fallback for editing"
          );

          const fallbackResult = await params.createDocument({
            session: params.session,
            dataStream: {
              title: JSON.stringify({
                ...editParams,
                nanoBananaEditFeatures: {
                  enableContextAwareness: true,
                  enableSurgicalPrecision: true,
                  preserveOriginalStyle,
                  enhanceLighting,
                  preserveShadows,
                },
                enhancedEditPrompt: nanoBananaEditPrompt,
                model: "gemini-2.5-flash-image",
                apiProvider: "google-gemini",
                fallback: true,
                error: error instanceof Error ? error.message : "Unknown error",
              }),
              kind: "image",
            },
          });

          return {
            ...fallbackResult,
            message: `–†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Nano Banana (fallback mode): "${editPrompt}". –¢–∏–ø: ${selectedEditType.label}, –¢–æ—á–Ω–æ—Å—Ç—å: ${selectedPrecision.label}, –°–º–µ—à–∏–≤–∞–Ω–∏–µ: ${selectedBlendMode.label}. –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–æ–∑–¥–∞–Ω.`,
            nanoBananaEditInfo: {
              model: "gemini-2.5-flash-image",
              editType: selectedEditType,
              precisionLevel: selectedPrecision,
              blendMode: selectedBlendMode,
              capabilities: [
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è",
                "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ",
              ],
            },
            fallbackMode: true,
            note: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Gemini API",
          };
        }
      } catch (error: any) {
        console.error("üçå ‚ùå ERROR CREATING NANO BANANA EDIT DOCUMENT:", error);
        return {
          error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Nano Banana: ${error.message}`,
          fallbackConfig: config,
        };
      }
    },
  });
