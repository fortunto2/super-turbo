import { tool } from 'ai';
import { z } from 'zod';
import { contextManager } from '@/lib/ai/context';

export const listAvailableMedia = tool({
  description: `Get a summary of all media available in current chat.

Use this when:
- User asks "what images do we have?"
- You need to know what media is available before suggesting actions
- Starting a conversation about media

Returns grouped summary of available media.`,

  inputSchema: z.object({
    chatId: z.string().describe('Current chat ID'),
    groupBy: z
      .enum(['type', 'role', 'recent'])
      .default('type')
      .describe('How to group results: by type, by role, or show recent'),
  }),

  execute: async ({ chatId, groupBy }) => {
    try {
      console.log(`ðŸ“‹ [listAvailableMedia] Listing media in chat ${chatId}`, {
        groupBy,
      });

      const chatMedia = await contextManager.getChatMedia(chatId);

      if (chatMedia.length === 0) {
        return {
          success: true,
          summary: {
            total: 0,
            byType: { images: 0, videos: 0, audio: 0 },
            byRole: { uploaded: 0, generated: 0 },
            recent: [],
          },
          message: 'No media found in this chat',
        };
      }

      // Count by type
      const byType = {
        images: chatMedia.filter((m) => m.mediaType === 'image').length,
        videos: chatMedia.filter((m) => m.mediaType === 'video').length,
        audio: chatMedia.filter((m) => m.mediaType === 'audio').length,
      };

      // Count by role
      const byRole = {
        uploaded: chatMedia.filter((m) => m.role === 'user').length,
        generated: chatMedia.filter((m) => m.role === 'assistant').length,
      };

      // Get recent items (last 5)
      const recentItems = chatMedia
        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
        .slice(0, 5)
        .map((m) => ({
          id: m.id || 'unknown',
          type: m.mediaType,
          role: m.role,
          prompt:
            (m.prompt || 'No prompt').substring(0, 50) +
            (m.prompt && m.prompt.length > 50 ? '...' : ''),
          timestamp: m.timestamp.toISOString(),
          url: m.url,
        }));

      // Format message based on groupBy preference
      let message = '';
      if (groupBy === 'type') {
        message = `Chat has ${chatMedia.length} media files: ${byType.images} images, ${byType.videos} videos, ${byType.audio} audio`;
      } else if (groupBy === 'role') {
        message = `Chat has ${chatMedia.length} media files: ${byRole.uploaded} uploaded by user, ${byRole.generated} generated by assistant`;
      } else {
        message = `Chat has ${chatMedia.length} media files. Most recent: ${recentItems.map((r) => r.type).join(', ')}`;
      }

      const summary = {
        total: chatMedia.length,
        byType,
        byRole,
        recent: recentItems,
      };

      console.log(
        `âœ… [listAvailableMedia] Found ${chatMedia.length} media files`,
      );

      return {
        success: true,
        summary,
        message,
        suggestion:
          chatMedia.length > 0
            ? 'You can use findMediaInChat to search for specific media, or reference these media IDs/URLs directly in generation tools.'
            : 'No media available yet. Generate or ask user to upload media first.',
      };
    } catch (error: any) {
      console.error('[listAvailableMedia] Error:', error);
      return {
        success: false,
        summary: {
          total: 0,
          byType: { images: 0, videos: 0, audio: 0 },
          byRole: { uploaded: 0, generated: 0 },
          recent: [],
        },
        error: error.message || 'Failed to list media',
      };
    }
  },
});
