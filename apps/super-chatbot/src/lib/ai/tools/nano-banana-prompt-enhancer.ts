import { tool, generateText } from "ai";
import { z } from 'zod/v3';
import { myProvider } from "../providers";

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Nano Banana —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞
const NANO_BANANA_TECHNIQUES = [
  {
    id: "context-awareness",
    label: "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å",
    description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π",
    keywords: ["context-aware", "intelligent", "understanding", "relationship"],
  },
  {
    id: "surgical-precision",
    label: "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
    description: "–¢–æ—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    keywords: ["precise", "exact", "surgical", "detailed", "specific"],
  },
  {
    id: "physical-logic",
    label: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞",
    description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –ª–æ–≥–∏–∫–∏ —Å—Ü–µ–Ω—ã",
    keywords: ["physics", "realistic", "logical", "natural", "believable"],
  },
  {
    id: "lighting-mastery",
    label: "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ—Å–≤–µ—â–µ–Ω–∏—è",
    description: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Ç–µ–Ω–µ–π",
    keywords: [
      "lighting",
      "shadows",
      "reflections",
      "illumination",
      "atmosphere",
    ],
  },
  {
    id: "composition-expertise",
    label: "–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
    description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
    keywords: [
      "composition",
      "framing",
      "rule of thirds",
      "balance",
      "harmony",
    ],
  },
  {
    id: "creative-partnership",
    label: "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
    description: "–ü–æ–æ—â—Ä–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
    keywords: ["creative", "artistic", "unique", "inspired", "visionary"],
  },
] as const;

// –°—Ç–∏–ª–∏ Nano Banana
const NANO_BANANA_STYLES = [
  {
    id: "realistic",
    label: "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
    prompt: "photorealistic, high resolution, detailed, sharp focus",
  },
  {
    id: "cinematic",
    label: "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π",
    prompt:
      "cinematic, dramatic lighting, professional cinematography, movie quality",
  },
  {
    id: "artistic",
    label: "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
    prompt: "artistic, creative interpretation, unique perspective, inspired",
  },
  {
    id: "minimalist",
    label: "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
    prompt: "minimalist, clean, simple, elegant, uncluttered",
  },
  {
    id: "dramatic",
    label: "–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π",
    prompt: "dramatic, intense, powerful, striking, bold",
  },
  {
    id: "soft",
    label: "–ú—è–≥–∫–∏–π",
    prompt: "soft, gentle, delicate, subtle, tender",
  },
  {
    id: "vibrant",
    label: "–Ø—Ä–∫–∏–π",
    prompt: "vibrant, colorful, energetic, lively, dynamic",
  },
  {
    id: "moody",
    label: "–ù–∞—Å—Ç—Ä–æ–µ–Ω—á–µ—Å–∫–∏–π",
    prompt: "moody, atmospheric, emotional, evocative, contemplative",
  },
] as const;

// –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è Nano Banana
const NANO_BANANA_QUALITY_DESCRIPTORS = [
  "masterpiece quality",
  "award-winning",
  "professional photography",
  "high resolution",
  "sharp focus",
  "excellent composition",
  "perfect lighting",
  "stunning detail",
  "breathtaking",
  "exceptional",
  "outstanding",
  "remarkable",
  "extraordinary",
  "magnificent",
  "spectacular",
] as const;

// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è Nano Banana
const NANO_BANANA_TECHNICAL_TERMS = [
  "context-aware editing",
  "surgical precision",
  "intelligent lighting",
  "physical accuracy",
  "seamless integration",
  "natural shadows",
  "realistic reflections",
  "perfect occlusion",
  "intelligent composition",
  "creative interpretation",
] as const;

export const nanoBananaPromptEnhancer = tool({
  description:
    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–ª—É—á—à–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è Gemini-2.5-Flash-Image (Nano Banana). –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Nano Banana: –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏.",
  inputSchema: z.object({
    originalPrompt: z
      .string()
      .describe(
        "–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–º."
      ),
    enhancementTechnique: z
      .enum(NANO_BANANA_TECHNIQUES.map((t) => t.id) as [string, ...string[]])
      .optional()
      .describe(
        "–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è Nano Banana. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫."
      ),
    targetStyle: z
      .enum(NANO_BANANA_STYLES.map((s) => s.id) as [string, ...string[]])
      .optional()
      .describe("–¶–µ–ª–µ–≤–æ–π —Å—Ç–∏–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞."),
    includeTechnicalTerms: z
      .boolean()
      .optional()
      .default(true)
      .describe(
        "–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã Nano Banana –≤ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç."
      ),
    includeQualityDescriptors: z
      .boolean()
      .optional()
      .default(true)
      .describe("–í–∫–ª—é—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."),
    enhanceForEditing: z
      .boolean()
      .optional()
      .default(false)
      .describe(
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
      ),
    creativeMode: z
      .boolean()
      .optional()
      .default(false)
      .describe("–í–∫–ª—é—á–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."),
    preserveOriginalIntent: z
      .boolean()
      .optional()
      .default(true)
      .describe("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–º—ã—Å–µ–ª –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞."),
    customInstructions: z
      .string()
      .optional()
      .describe("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."),
  }),
  execute: async ({
    originalPrompt,
    enhancementTechnique,
    targetStyle,
    includeTechnicalTerms,
    includeQualityDescriptors,
    enhanceForEditing,
    creativeMode,
    preserveOriginalIntent,
    customInstructions,
  }) => {
    console.log("üçå nanoBananaPromptEnhancer called with:", {
      originalPrompt,
      enhancementTechnique,
      targetStyle,
      includeTechnicalTerms,
      includeQualityDescriptors,
      enhanceForEditing,
      creativeMode,
    });

    try {
      // –°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Nano Banana
      const systemPrompt = buildNanoBananaSystemPrompt(
        enhancementTechnique,
        targetStyle,
        includeTechnicalTerms,
        includeQualityDescriptors,
        enhanceForEditing,
        creativeMode,
        customInstructions
      );

      // –°—Ç—Ä–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
      const userPrompt = buildNanoBananaUserPrompt(
        originalPrompt,
        enhancementTechnique,
        targetStyle,
        enhanceForEditing,
        creativeMode,
        customInstructions
      );

      console.log("üîÑ Calling LLM for Nano Banana prompt enhancement...");

      const result = await generateText({
        model: myProvider.languageModel("artifact-model"),
        system: systemPrompt,
        prompt: userPrompt,
        temperature: creativeMode ? 0.8 : 0.7,
        maxOutputTokens: 1200,
      });

      console.log("‚úÖ LLM response received:", result.text);

      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è
      const parsedResult = parseNanoBananaEnhancementResult(
        result.text,
        originalPrompt
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö
      const appliedTechniques = getAppliedTechniques(
        enhancementTechnique,
        targetStyle,
        includeTechnicalTerms,
        includeQualityDescriptors,
        enhanceForEditing,
        creativeMode
      );

      return {
        originalPrompt,
        enhancedPrompt: parsedResult.enhancedPrompt,
        negativePrompt: parsedResult.negativePrompt,
        appliedTechniques,
        nanoBananaOptimizations: parsedResult.nanoBananaOptimizations,
        style: targetStyle
          ? NANO_BANANA_STYLES.find((s) => s.id === targetStyle)
          : null,
        enhancementLevel: parsedResult.enhancementLevel,
        reasoningText: parsedResult.reasoningText,
        usage: {
          copyPrompt:
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Nano Banana",
          negativePrompt: parsedResult.negativePrompt
            ? "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            : undefined,
          techniques: appliedTechniques.map((t) => t.description),
        },
        metadata: {
          model: "gemini-2.5-flash-image",
          capabilities: [
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏",
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
            "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
          ],
          techniques: NANO_BANANA_TECHNIQUES,
          styles: NANO_BANANA_STYLES,
        },
      };
    } catch (error) {
      console.error("‚ùå Error in Nano Banana prompt enhancement:", error);
      return {
        error: `–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ Nano Banana: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
        originalPrompt,
        enhancedPrompt: originalPrompt, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ fallback
        fallback: true,
        appliedTechniques: [],
      };
    }
  },
});

// –°—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Nano Banana
function buildNanoBananaSystemPrompt(
  enhancementTechnique?: string,
  targetStyle?: string,
  includeTechnicalTerms?: boolean,
  includeQualityDescriptors?: boolean,
  enhanceForEditing?: boolean,
  creativeMode?: boolean,
  customInstructions?: string
): string {
  const basePrompt = `You are a specialized prompt engineering expert for Gemini-2.5-Flash-Image (Nano Banana), Google's revolutionary AI image generation and editing model.

NANO BANANA UNIQUE CAPABILITIES:
- Context-Aware Editing: Understands relationships between people and environments
- Surgical Precision: Adds or replaces items with extreme precision
- Physical Logic Understanding: Comprehends lighting, physics, and scene logic
- Intelligent Lighting: Automatically adjusts lighting and reflections
- Creative Partnership: Goes beyond passive execution to creative collaboration

CORE RESPONSIBILITIES:
1. Translate non-English text to English while preserving meaning
2. Apply Nano Banana-specific prompt engineering techniques
3. Optimize for context-aware editing and surgical precision
4. Structure prompts for maximum effectiveness with Nano Banana
5. Leverage Nano Banana's unique understanding of physical logic

ENHANCEMENT PRINCIPLES:
- Preserve original creative intent and core elements
- Add context-aware descriptions that Nano Banana can understand
- Include physical logic and lighting details
- Use surgical precision terminology for editing tasks
- Encourage creative interpretation when appropriate
- Maintain realistic and believable scenarios`;

  let techniqueGuidance = "";
  if (enhancementTechnique) {
    const technique = NANO_BANANA_TECHNIQUES.find(
      (t) => t.id === enhancementTechnique
    );
    if (technique) {
      techniqueGuidance = `
SPECIFIC TECHNIQUE: ${technique.label}
${technique.description}
Keywords to emphasize: ${technique.keywords.join(", ")}`;
    }
  } else {
    techniqueGuidance = `
APPLY MULTIPLE TECHNIQUES:
- Context-Aware Editing: Use relationship and environment descriptions
- Surgical Precision: Be specific and detailed about changes
- Physical Logic: Include realistic physics and lighting
- Lighting Mastery: Describe lighting, shadows, and reflections
- Composition Expertise: Apply professional composition principles
- Creative Partnership: Encourage artistic interpretation`;
  }

  let styleGuidance = "";
  if (targetStyle) {
    const style = NANO_BANANA_STYLES.find((s) => s.id === targetStyle);
    if (style) {
      styleGuidance = `
TARGET STYLE: ${style.label}
Apply these style descriptors: ${style.prompt}`;
    }
  }

  let technicalGuidance = "";
  if (includeTechnicalTerms) {
    technicalGuidance = `
INCLUDE NANO BANANA TECHNICAL TERMS:
${NANO_BANANA_TECHNICAL_TERMS.join(", ")}`;
  }

  let qualityGuidance = "";
  if (includeQualityDescriptors) {
    qualityGuidance = `
INCLUDE QUALITY DESCRIPTORS:
${NANO_BANANA_QUALITY_DESCRIPTORS.join(", ")}`;
  }

  let editingGuidance = "";
  if (enhanceForEditing) {
    editingGuidance = `
EDITING OPTIMIZATION:
- Focus on specific changes and modifications
- Use surgical precision terminology
- Include context-aware editing descriptions
- Emphasize seamless integration
- Describe physical accuracy requirements`;
  }

  let creativeGuidance = "";
  if (creativeMode) {
    creativeGuidance = `
CREATIVE MODE:
- Encourage artistic interpretation
- Use inspiring and visionary language
- Allow for unique perspectives
- Emphasize creative partnership with AI`;
  }

  let customGuidance = "";
  if (customInstructions) {
    customGuidance = `
CUSTOM INSTRUCTIONS:
${customInstructions}`;
  }

  return `${basePrompt}

${techniqueGuidance}
${styleGuidance}
${technicalGuidance}
${qualityGuidance}
${editingGuidance}
${creativeGuidance}
${customGuidance}

OUTPUT FORMAT:
Provide your response as a JSON object with these fields:
{
  "enhancedPrompt": "the improved prompt optimized for Nano Banana",
  "negativePrompt": "what to avoid (if applicable)",
  "nanoBananaOptimizations": ["list of Nano Banana-specific optimizations applied"],
  "enhancementLevel": "basic|detailed|creative",
  "reasoning": "brief explanation of enhancement strategy for Nano Banana"
}`;
}

// –°—Ç—Ä–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
function buildNanoBananaUserPrompt(
  originalPrompt: string,
  enhancementTechnique?: string,
  targetStyle?: string,
  enhanceForEditing?: boolean,
  creativeMode?: boolean,
  customInstructions?: string
): string {
  let prompt = `Please enhance this prompt for Nano Banana (Gemini-2.5-Flash-Image):

ORIGINAL PROMPT: "${originalPrompt}"

REQUIREMENTS:
- Optimize for Nano Banana's unique capabilities
- Preserve original creative intent`;

  if (enhancementTechnique) {
    const technique = NANO_BANANA_TECHNIQUES.find(
      (t) => t.id === enhancementTechnique
    );
    if (technique) {
      prompt += `\n- Apply ${technique.label} technique: ${technique.description}`;
    }
  }

  if (targetStyle) {
    const style = NANO_BANANA_STYLES.find((s) => s.id === targetStyle);
    if (style) {
      prompt += `\n- Target style: ${style.label}`;
    }
  }

  if (enhanceForEditing) {
    prompt += `\n- Optimize for image editing tasks`;
  }

  if (creativeMode) {
    prompt += `\n- Enable creative mode for artistic interpretation`;
  }

  if (customInstructions) {
    prompt += `\n- Custom instructions: ${customInstructions}`;
  }

  prompt += `\n\nPlease enhance this prompt following Nano Banana's unique capabilities and prompt engineering best practices.`;

  return prompt;
}

// –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è
function parseNanoBananaEnhancementResult(
  llmResponse: string,
  originalPrompt: string
) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    const jsonMatch = llmResponse.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const parsed = JSON.parse(jsonMatch[0]);
      return {
        enhancedPrompt: parsed.enhancedPrompt || originalPrompt,
        negativePrompt: parsed.negativePrompt || undefined,
        nanoBananaOptimizations: parsed.nanoBananaOptimizations || [
          "Nano Banana optimization applied",
        ],
        enhancementLevel: parsed.enhancementLevel || "detailed",
        reasoningText:
          parsed.reasoningText || "Enhanced using Nano Banana-specific techniques",
      };
    }

    // Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const lines = llmResponse.split("\n").filter((line) => line.trim());
    let enhancedPrompt = originalPrompt;

    // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    for (const line of lines) {
      if (
        line.toLowerCase().includes("enhanced") ||
        line.toLowerCase().includes("improved") ||
        line.toLowerCase().includes("prompt:")
      ) {
        const promptText = line.replace(/^[^:]*:?\s*/, "").trim();
        if (promptText.length > 10) {
          enhancedPrompt = promptText;
          break;
        }
      }
    }

    return {
      enhancedPrompt,
      negativePrompt: undefined,
      nanoBananaOptimizations: ["Nano Banana optimization applied"],
      enhancementLevel: "detailed",
      reasoningText: "Enhanced using Nano Banana-specific techniques",
    };
  } catch (error) {
    console.error("Failed to parse LLM response:", error);
    return {
      enhancedPrompt: originalPrompt,
      negativePrompt: undefined,
      nanoBananaOptimizations: ["Enhancement failed, returned original"],
      enhancementLevel: "basic",
      reasoningText: "Error in processing enhancement",
    };
  }
}

// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
function getAppliedTechniques(
  enhancementTechnique?: string,
  targetStyle?: string,
  includeTechnicalTerms?: boolean,
  includeQualityDescriptors?: boolean,
  enhanceForEditing?: boolean,
  creativeMode?: boolean
) {
  const techniques = [];

  if (enhancementTechnique) {
    const technique = NANO_BANANA_TECHNIQUES.find(
      (t) => t.id === enhancementTechnique
    );
    if (technique) {
      techniques.push(technique);
    }
  } else {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    techniques.push(
      NANO_BANANA_TECHNIQUES[0], // context-awareness
      NANO_BANANA_TECHNIQUES[1], // surgical-precision
      NANO_BANANA_TECHNIQUES[2] // physical-logic
    );
  }

  if (targetStyle) {
    const style = NANO_BANANA_STYLES.find((s) => s.id === targetStyle);
    if (style) {
      techniques.push({
        id: "style-optimization",
        label: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è",
        description: `–ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å: ${style.label}`,
        keywords: style.prompt.split(", "),
      });
    }
  }

  if (includeTechnicalTerms) {
    techniques.push({
      id: "technical-terms",
      label: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã",
      description: "–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã Nano Banana",
      keywords: NANO_BANANA_TECHNICAL_TERMS,
    });
  }

  if (includeQualityDescriptors) {
    techniques.push({
      id: "quality-descriptors",
      label: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã",
      description: "–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã",
      keywords: NANO_BANANA_QUALITY_DESCRIPTORS,
    });
  }

  if (enhanceForEditing) {
    techniques.push({
      id: "editing-optimization",
      label: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
      description: "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
      keywords: [
        "editing",
        "modification",
        "surgical precision",
        "seamless integration",
      ],
    });
  }

  if (creativeMode) {
    techniques.push({
      id: "creative-mode",
      label: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
      description: "–í–∫–ª—é—á–µ–Ω —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
      keywords: ["creative", "artistic", "inspired", "visionary"],
    });
  }

  return techniques;
}
