import { tool } from "ai";
import { z } from 'zod/v3';
import {
  createVeo3Video,
  getVeo3VideoStatus,
  generateVeo3Ideas,
} from "@/lib/ai/veo3-api";

export const createVeo3VideoTool = tool({
  description: "–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é VEO3 (Google Video Generation)",
  inputSchema: z.object({
    prompt: z.string().describe("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"),
    duration: z
      .number()
      .min(1)
      .max(60)
      .optional()
      .describe("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1-60)"),
    style: z
      .enum(["realistic", "animated", "cinematic", "documentary"])
      .optional()
      .describe("–°—Ç–∏–ª—å –≤–∏–¥–µ–æ"),
    resolution: z
      .enum(["720p", "1080p", "4k"])
      .optional()
      .describe("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ"),
    aspectRatio: z
      .enum(["16:9", "9:16", "1:1"])
      .optional()
      .describe("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω"),
    seed: z
      .number()
      .optional()
      .describe("Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
  }),
  execute: async ({
    prompt,
    duration,
    style,
    resolution,
    aspectRatio,
    seed,
  }) => {
    try {
      console.log("üé¨ Creating VEO3 video:", {
        prompt,
        duration,
        style,
        resolution,
      });

      const result = await createVeo3Video({
        prompt,
        ...(duration !== undefined && { duration }),
        ...(style && { style }),
        ...(resolution && { resolution }),
        ...(aspectRatio && { aspectRatio }),
        ...(seed !== undefined && { seed }),
      });

      if (result.status === "failed") {
        return {
          success: false,
          error: result.error,
          videoId: result.id,
        };
      }

      return {
        success: true,
        videoId: result.id,
        status: result.status,
        prompt: result.prompt,
        duration: result.duration,
        resolution: result.resolution,
        createdAt: result.createdAt,
        message:
          result.status === "processing"
            ? "–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ checkVeo3VideoStatus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
            : "–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!",
      };
    } catch (error) {
      console.error("üé¨ VEO3 video creation error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  },
});

export const checkVeo3VideoStatusTool = tool({
  description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ VEO3",
  inputSchema: z.object({
    videoId: z.string().describe("ID –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"),
  }),
  execute: async ({ videoId }) => {
    try {
      console.log("üé¨ Checking VEO3 video status:", { videoId });

      const result = await getVeo3VideoStatus(videoId);

      return {
        success: true,
        videoId: result.id,
        status: result.status,
        prompt: result.prompt,
        duration: result.duration,
        resolution: result.resolution,
        videoUrl: result.videoUrl,
        thumbnailUrl: result.thumbnailUrl,
        createdAt: result.createdAt,
        completedAt: result.completedAt,
        error: result.error,
        isReady: result.status === "completed",
        isProcessing: result.status === "processing",
        isFailed: result.status === "failed",
      };
    } catch (error) {
      console.error("üé¨ VEO3 video status error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  },
});

export const generateVeo3IdeasTool = tool({
  description: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è –≤–∏–¥–µ–æ VEO3 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞",
  inputSchema: z.object({
    prompt: z.string().describe("–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –≤–∏–¥–µ–æ"),
  }),
  execute: async ({ prompt }) => {
    try {
      console.log("üé¨ Generating VEO3 video ideas:", { prompt });

      const ideas = generateVeo3Ideas(prompt);

      return {
        success: true,
        originalPrompt: prompt,
        ideas,
        totalIdeas: ideas.length,
        suggestions: [
          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏: realistic, animated, cinematic, documentary",
          "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: –æ—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥",
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: 720p, 1080p, 4k",
          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9, 9:16, 1:1",
        ],
      };
    } catch (error) {
      console.error("üé¨ VEO3 ideas generation error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  },
});
