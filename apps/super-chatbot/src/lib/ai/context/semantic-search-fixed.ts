/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */

import type { ChatMedia } from "./universal-context";
import { semanticIndex } from "./semantic-index";

interface SemanticMatch {
  media: ChatMedia;
  similarity: number;
  reasoningText: string;
  matchedKeywords: string[];
}

interface EmbeddingVector {
  values: number[];
  metadata: {
    mediaId: string;
    text: string;
    timestamp: number;
  };
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
 */
export class SemanticContextAnalyzer {
  private keywordEmbeddings = new Map<string, number[]>();
  private mediaEmbeddings = new Map<string, EmbeddingVector>();

  // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private readonly weights = {
    prompt: 1.0,
    fileName: 0.8,
    url: 0.3,
    role: 0.2,
  };

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
   */
  async findSimilarMedia(
    query: string,
    chatMedia: ChatMedia[],
    threshold = 0.6
  ): Promise<SemanticMatch[]> {
    console.log(
      `üîç SemanticSearch: Searching for "${query}" in ${chatMedia.length} media files`
    );

    const queryKeywords = this.extractKeywords(query);
    const matches: SemanticMatch[] = [];

    for (const media of chatMedia) {
      const similarity = await this.calculateSimilarity(queryKeywords, media);

      if (similarity >= threshold) {
        const matchedKeywords = this.findMatchedKeywords(queryKeywords, media);
        matches.push({
          media,
          similarity,
          reasoningText: `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: ${Math.round(similarity * 100)}% (${matchedKeywords.join(", ")})`,
          matchedKeywords,
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
    matches.sort((a, b) => b.similarity - a.similarity);

    console.log(
      `üéØ SemanticSearch: Found ${matches.length} similar media files`
    );
    return matches;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
   */
  private extractKeywords(text: string): string[] {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    // –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    return semanticIndex.extractKeywords(text);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–º
   */
  private async calculateSimilarity(
    queryKeywords: string[],
    media: ChatMedia
  ): Promise<number> {
    let totalScore = 0;
    let maxPossibleScore = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
    if (media.prompt) {
      const promptKeywords = this.extractKeywords(media.prompt);
      const promptScore = this.calculateKeywordOverlap(
        queryKeywords,
        promptKeywords
      );
      totalScore += promptScore * this.weights.prompt;
      maxPossibleScore += this.weights.prompt;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL)
    if (media.url) {
      const fileName = media.url.split("/").pop() || "";
      if (fileName) {
        const fileNameKeywords = this.extractKeywords(fileName);
        const fileNameScore = this.calculateKeywordOverlap(
          queryKeywords,
          fileNameKeywords
        );
        totalScore += fileNameScore * this.weights.fileName;
        maxPossibleScore += this.weights.fileName;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL (—á–∞—Å—Ç–∏—á–Ω–æ)
    if (media.url) {
      const urlKeywords = this.extractKeywords(media.url);
      const urlScore = this.calculateKeywordOverlap(queryKeywords, urlKeywords);
      totalScore += urlScore * this.weights.url;
      maxPossibleScore += this.weights.url;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª—å (user/assistant)
    if (media.role) {
      const roleScore = this.calculateRoleRelevance(queryKeywords, media.role);
      totalScore += roleScore * this.weights.role;
      maxPossibleScore += this.weights.role;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π score
    return maxPossibleScore > 0 ? totalScore / maxPossibleScore : 0;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private calculateKeywordOverlap(
    keywords1: string[],
    keywords2: string[]
  ): number {
    if (keywords1.length === 0 || keywords2.length === 0) return 0;

    const set1 = new Set(keywords1.map((k) => k.toLowerCase()));
    const set2 = new Set(keywords2.map((k) => k.toLowerCase()));

    const intersection = new Set([...set1].filter((x) => set2.has(x)));
    const union = new Set([...set1, ...set2]);

    // Jaccard similarity
    return intersection.size / union.size;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
   */
  private calculateRoleRelevance(keywords: string[], role: string): number {
    const roleKeywords = {
      user: ["–∑–∞–≥—Ä—É–∂–µ–Ω", "uploaded", "–º–æ–π", "my"],
      assistant: ["—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "generated", "—Å–æ–∑–¥–∞–Ω", "created"],
    };

    const relevantKeywords =
      roleKeywords[role as keyof typeof roleKeywords] || [];
    const hasRelevantKeyword = keywords.some((keyword) =>
      relevantKeywords.some((rk) => keyword.toLowerCase().includes(rk))
    );

    return hasRelevantKeyword ? 1.0 : 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π score –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
   */
  private findMatchedKeywords(
    queryKeywords: string[],
    media: ChatMedia
  ): string[] {
    const matched: string[] = [];

    if (media.prompt) {
      const promptKeywords = this.extractKeywords(media.prompt);
      const querySet = new Set(queryKeywords.map((k) => k.toLowerCase()));
      const promptSet = new Set(promptKeywords.map((k) => k.toLowerCase()));

      for (const keyword of promptKeywords) {
        if (querySet.has(keyword.toLowerCase())) {
          matched.push(keyword);
        }
      }
    }

    return [...new Set(matched)];
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  addMediaToIndex(media: ChatMedia): void {
    if (media.prompt) {
      const keywords = this.extractKeywords(media.prompt);
      const embedding = this.createSimpleEmbedding(keywords);

      this.mediaEmbeddings.set(media.id || media.url, {
        values: embedding,
        metadata: {
          mediaId: media.id || media.url,
          text: media.prompt,
          timestamp: media.timestamp.getTime(),
        },
      });

      console.log(
        `üìù SemanticSearch: Added media to index: ${media.id || media.url}`
      );
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   * –í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ embeddings
   */
  private createSimpleEmbedding(keywords: string[]): number[] {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —á–∏—Å–ª–∞
    return keywords.map((keyword) => {
      let hash = 0;
      for (let i = 0; i < keyword.length; i++) {
        const char = keyword.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32-bit integer
      }
      return Math.abs(hash) / 1000000; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    });
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å
   */
  clearIndex(): void {
    this.keywordEmbeddings.clear();
    this.mediaEmbeddings.clear();
    console.log("üßπ SemanticSearch: Index cleared");
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
   */
  getIndexStats(): {
    totalMedia: number;
    totalKeywords: number;
    averageKeywordsPerMedia: number;
  } {
    const totalMedia = this.mediaEmbeddings.size;
    const totalKeywords = this.keywordEmbeddings.size;
    const totalKeywordCount = Array.from(this.mediaEmbeddings.values()).reduce(
      (sum, embedding) => sum + embedding.values.length,
      0
    );

    return {
      totalMedia,
      totalKeywords,
      averageKeywordsPerMedia:
        totalMedia > 0 ? totalKeywordCount / totalMedia : 0,
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const semanticAnalyzer = new SemanticContextAnalyzer();
