/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import { ImageContextAnalyzer } from "./image-context-analyzer";
import type { ChatMedia } from "./universal-context";

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testChatMedia: ChatMedia[] = [
  {
    url: "https://example.com/image1.jpg",
    id: "img1",
    role: "assistant",
    timestamp: new Date("2024-01-01"),
    prompt: "Beautiful landscape with mountains and a lake under the moonlight",
    messageIndex: 0,
    mediaType: "image",
    metadata: {},
  },
  {
    url: "https://example.com/image2.jpg",
    id: "img2",
    role: "assistant",
    timestamp: new Date("2024-01-02"),
    prompt: "A girl with blue eyes and long hair standing in a forest",
    messageIndex: 1,
    mediaType: "image",
    metadata: {},
  },
  {
    url: "https://example.com/image3.jpg",
    id: "img3",
    role: "user",
    timestamp: new Date("2024-01-03"),
    prompt: "Red sports car parked in front of a modern house",
    messageIndex: 2,
    mediaType: "image",
    metadata: {},
  },
  {
    url: "https://example.com/image4.jpg",
    id: "img4",
    role: "assistant",
    timestamp: new Date("2024-01-04"),
    prompt: "Cute dog playing with a ball in the garden",
    messageIndex: 3,
    mediaType: "image",
    metadata: {},
  },
  {
    url: "https://example.com/image5.jpg",
    id: "img5",
    role: "assistant",
    timestamp: new Date("2024-01-05"),
    prompt: "Ocean waves crashing against the shore at sunset",
    messageIndex: 4,
    mediaType: "image",
    metadata: {},
  },
];

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  {
    message: "–≤–æ–∑—å–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ª—É–Ω–æ–π",
    expectedImageId: "img1",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª—É–Ω–æ–π (—Ä—É—Å—Å–∫–∏–π)",
  },
  {
    message: "image with moon",
    expectedImageId: "img1",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª—É–Ω–æ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)",
  },
  {
    message: "–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –¥–µ–≤–æ—á–∫–æ–π",
    expectedImageId: "img2",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–µ–≤–æ—á–∫–æ–π",
  },
  {
    message: "—Ñ–æ—Ç–æ —Å –º–∞—à–∏–Ω–æ–π",
    expectedImageId: "img3",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–∞—à–∏–Ω–æ–π",
  },
  {
    message: "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–±–∞–∫–æ–π",
    expectedImageId: "img4",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ–±–∞–∫–æ–π",
  },
  {
    message: "–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –º–æ—Ä–µ–º",
    expectedImageId: "img5",
    description: "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ—Ä–µ–º",
  },
  {
    message: "–∫–∞—Ä—Ç–∏–Ω–∫–∞ –≥–¥–µ –µ—Å—Ç—å –ª–µ—Å",
    expectedImageId: "img2",
    description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É",
  },
];

export async function testSemanticSearch() {
  console.log("üß™ Starting semantic search tests...");

  const analyzer = new ImageContextAnalyzer();
  let passedTests = 0;
  const totalTests = testCases.length;

  for (const testCase of testCases) {
    console.log(`\nüß™ Testing: ${testCase.description}`);
    console.log(`   Message: "${testCase.message}"`);

    try {
      const result = await analyzer.analyzeContext(
        testCase.message,
        testChatMedia,
        []
      );

      if (result.sourceId === testCase.expectedImageId) {
        console.log(`   ‚úÖ PASSED - Found image: ${result.sourceId}`);
        console.log(`   Reasoning: ${result.reasoningText}`);
        passedTests++;
      } else {
        console.log(
          `   ‚ùå FAILED - Expected: ${testCase.expectedImageId}, Got: ${result.sourceId}`
        );
        console.log(`   Reasoning: ${result.reasoningText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ERROR - ${error}`);
    }
  }

  console.log(`\nüß™ Test Results: ${passedTests}/${totalTests} tests passed`);

  if (passedTests === totalTests) {
    console.log("üéâ All tests passed! Semantic search is working correctly.");
  } else {
    console.log("‚ö†Ô∏è  Some tests failed. Check the implementation.");
  }

  return { passedTests, totalTests };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if (require.main === module) {
  testSemanticSearch().catch(console.error);
}
