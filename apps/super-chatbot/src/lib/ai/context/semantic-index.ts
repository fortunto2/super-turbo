/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
 */

import type { ChatImage } from "../chat/image-context";

export interface SemanticIndexEntry {
  imageId: string;
  extractedKeywords: string[];
}

export interface SearchResult {
  image: ChatImage;
  relevanceScore: number;
  matchedKeywords: string[];
  reasoningText: string;
}

export class SemanticIndex {
  private index: Map<string, SemanticIndexEntry> = new Map();
  private keywordIndex: Map<string, Set<string>> = new Map();
  private stopWords = new Set([
    // –†—É—Å—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    "–∏",
    "–≤",
    "–≤–æ",
    "–Ω–µ",
    "—á—Ç–æ",
    "–æ–Ω",
    "–Ω–∞",
    "—è",
    "—Å",
    "—Å–æ",
    "–∫–∞–∫",
    "–∞",
    "—Ç–æ",
    "–≤—Å–µ",
    "–æ–Ω–∞",
    "—Ç–∞–∫",
    "–µ–≥–æ",
    "–Ω–æ",
    "–¥–∞",
    "—Ç—ã",
    "–∫",
    "—É",
    "–∂–µ",
    "–≤—ã",
    "–∑–∞",
    "–±—ã",
    "–ø–æ",
    "—Ç–æ–ª—å–∫–æ",
    "–µ–µ",
    "–º–Ω–µ",
    "–±—ã–ª–æ",
    "–≤–æ—Ç",
    "–æ—Ç",
    "–º–µ–Ω—è",
    "–µ—â–µ",
    "–Ω–µ—Ç",
    "–æ",
    "–∏–∑",
    "–µ–º—É",
    "—Ç–µ–ø–µ—Ä—å",
    "–∫–æ–≥–¥–∞",
    "–¥–∞–∂–µ",
    "–Ω—É",
    "–≤–¥—Ä—É–≥",
    "–ª–∏",
    "–µ—Å–ª–∏",
    "—É–∂–µ",
    "–∏–ª–∏",
    "–Ω–∏",
    "–±—ã—Ç—å",
    "–±—ã–ª",
    "–Ω–µ–≥–æ",
    "–¥–æ",
    "–≤–∞—Å",
    "–Ω–∏–±—É–¥—å",
    "–æ–ø—è—Ç—å",
    "—É–∂",
    "–≤–∞–º",
    "–≤–µ–¥—å",
    "—Ç–∞–º",
    "–ø–æ—Ç–æ–º",
    "—Å–µ–±—è",
    "–Ω–∏—á–µ–≥–æ",
    "–µ–π",
    "–º–æ–∂–µ—Ç",
    "–æ–Ω–∏",
    "—Ç—É—Ç",
    "–≥–¥–µ",
    "–µ—Å—Ç—å",
    "–Ω–∞–¥–æ",
    "–Ω–µ–π",
    "–¥–ª—è",
    "–º—ã",
    "—Ç–µ–±—è",
    "–∏—Ö",
    "—á–µ–º",
    "–±—ã–ª–∞",
    "—Å–∞–º",
    "—á—Ç–æ–±",
    "–±–µ–∑",
    "–±—É–¥—Ç–æ",
    "—á–µ–≥–æ",
    "—Ä–∞–∑",
    "—Ç–æ–∂–µ",
    "—Å–µ–±–µ",
    "–ø–æ–¥",
    "–±—É–¥–µ—Ç",
    "–∂",
    "—Ç–æ–≥–¥–∞",
    "–∫—Ç–æ",
    "—ç—Ç–æ—Ç",
    "—Ç–æ–≥–æ",
    "–ø–æ—Ç–æ–º—É",
    "—ç—Ç–æ–≥–æ",
    "–∫–∞–∫–æ–π",
    "—Å–æ–≤—Å–µ–º",
    "–Ω–∏–º",
    "–∑–¥–µ—Å—å",
    "—ç—Ç–æ–º",
    "–æ–¥–∏–Ω",
    "–ø–æ—á—Ç–∏",
    "–º–æ–π",
    "—Ç–µ–º",
    "—á—Ç–æ–±—ã",
    "–Ω–µ–µ",
    "—Å–µ–π—á–∞—Å",
    "–±—ã–ª–∏",
    "–∫—É–¥–∞",
    "–∑–∞—á–µ–º",
    "–≤—Å–µ—Ö",
    "–Ω–∏–∫–æ–≥–¥–∞",
    "–º–æ–∂–Ω–æ",
    "–ø—Ä–∏",
    "–Ω–∞–∫–æ–Ω–µ—Ü",
    "–¥–≤–∞",
    "–æ–±",
    "–¥—Ä—É–≥–æ–π",
    "—Ö–æ—Ç—å",
    "–ø–æ—Å–ª–µ",
    "–Ω–∞–¥",
    "–±–æ–ª—å—à–µ",
    "—Ç–æ—Ç",
    "—á–µ—Ä–µ–∑",
    "—ç—Ç–∏",
    "–Ω–∞—Å",
    "–ø—Ä–æ",
    "–≤—Å–µ–≥–æ",
    "–Ω–∏—Ö",
    "–∫–∞–∫–∞—è",
    "–º–Ω–æ–≥–æ",
    "—Ä–∞–∑–≤–µ",
    "—Ç—Ä–∏",
    "—ç—Ç—É",
    "–º–æ—è",
    "–≤–ø—Ä–æ—á–µ–º",
    "—Ö–æ—Ä–æ—à–æ",
    "—Å–≤–æ—é",
    "—ç—Ç–æ–π",
    "–ø–µ—Ä–µ–¥",
    "–∏–Ω–æ–≥–¥–∞",
    "–ª—É—á—à–µ",
    "—á—É—Ç—å",
    "—Ç–æ–º",
    "–Ω–µ–ª—å–∑—è",
    "—Ç–∞–∫–æ–π",
    "–∏–º",
    "–±–æ–ª–µ–µ",
    "–≤—Å–µ–≥–¥–∞",
    "–∫–æ–Ω–µ—á–Ω–æ",
    "–≤—Å—é",
    "–º–µ–∂–¥—É",
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    "a",
    "an",
    "and",
    "are",
    "as",
    "at",
    "be",
    "by",
    "for",
    "from",
    "has",
    "he",
    "in",
    "is",
    "it",
    "its",
    "of",
    "on",
    "that",
    "the",
    "to",
    "was",
    "will",
    "with",
    "would",
    "could",
    "should",
    "may",
    "might",
    "can",
    "must",
    "shall",
    "this",
    "these",
    "those",
    "i",
    "you",
    "we",
    "they",
    "she",
    "him",
    "her",
    "us",
    "them",
    "my",
    "your",
    "his",
    "her",
    "its",
    "our",
    "their",
    "me",
    "him",
    "her",
    "us",
    "them",
  ]);

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
   */
  addImage(image: ChatImage): void {
    if (!image.prompt) return;

    const imageId = image.id || image.url;
    const keywords = this.extractKeywords(image.prompt);

    const entry: SemanticIndexEntry = {
      imageId,
      extractedKeywords: keywords,
    };

    this.index.set(imageId, entry);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    keywords.forEach((keyword) => {
      if (!this.keywordIndex.has(keyword)) {
        this.keywordIndex.set(keyword, new Set());
      }
      this.keywordIndex.get(keyword)?.add(imageId);
    });

    console.log("üîç SemanticIndex: Added image to index", {
      imageId,
      prompt: image.prompt,
      keywords: keywords,
    });
  }

  /**
   * –ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É
   */
  search(query: string, chatImages: ChatImage[]): SearchResult[] {
    const queryKeywords = this.extractKeywords(query);
    console.log("üîç SemanticIndex: Searching with keywords", {
      query,
      queryKeywords,
    });

    if (queryKeywords.length === 0) {
      return [];
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ O(1)
    const imageMap = new Map<string, ChatImage>();
    chatImages.forEach((image) => {
      imageMap.set(image.id || image.url, image);
    });

    const results: SearchResult[] = [];
    const imageScoreMap = new Map<
      string,
      { score: number; matchedKeywords: string[] }
    >();

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ keywordIndex
    queryKeywords.forEach((queryKeyword) => {
      const matchingImageIds = this.keywordIndex.get(queryKeyword);
      if (matchingImageIds) {
        matchingImageIds.forEach((imageId) => {
          const entry = this.index.get(imageId);
          const image = imageMap.get(imageId);
          if (!entry || !image) return;

          const { score, matchedKeywords } = this.calculateRelevance(
            [queryKeyword], // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            entry.extractedKeywords
          );

          if (score > 0) {
            const existing = imageScoreMap.get(imageId);
            if (existing) {
              // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
              existing.score += score;
              existing.matchedKeywords.push(...matchedKeywords);
              existing.matchedKeywords = [...new Set(existing.matchedKeywords)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            } else {
              imageScoreMap.set(imageId, { score, matchedKeywords });
            }
          }
        });
      }
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    if (imageScoreMap.size === 0) {
      queryKeywords.forEach((queryKeyword) => {
        chatImages.forEach((image) => {
          const imageId = image.id || image.url;
          const entry = this.index.get(imageId);
          if (!entry) return;

          const { score, matchedKeywords } = this.calculateRelevance(
            [queryKeyword],
            entry.extractedKeywords
          );

          if (score > 0) {
            const existing = imageScoreMap.get(imageId);
            if (existing) {
              existing.score += score;
              existing.matchedKeywords.push(...matchedKeywords);
              existing.matchedKeywords = [...new Set(existing.matchedKeywords)];
            } else {
              imageScoreMap.set(imageId, { score, matchedKeywords });
            }
          }
        });
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Array.from(imageScoreMap.entries())
      .sort(([, a], [, b]) => b.score - a.score)
      .forEach(([imageId, { score, matchedKeywords }]) => {
        const image = imageMap.get(imageId);
        if (image) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º score –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –≤ calculateRelevance
          const normalizedScore = score;
          results.push({
            image,
            relevanceScore: normalizedScore,
            matchedKeywords,
            reasoningText: `–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${matchedKeywords.join(", ")}`,
          });
        }
      });

    console.log("üîç SemanticIndex: Search results", {
      query,
      resultsCount: results.length,
      topResults: results.slice(0, 3).map((r) => ({
        url: r.image.url,
        score: r.relevanceScore,
        keywords: r.matchedKeywords,
      })),
    });

    return results;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  public extractKeywords(text: string): string[] {
    const words = text
      .toLowerCase()
      .replace(/[^\w\s\u0400-\u04FF]/g, " ") // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–≤–∫–ª—é—á–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
      .split(/\s+/)
      .filter((word) => word.length > 2 && !this.stopWords.has(word));

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    return [...new Set(words)];
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private calculateRelevance(
    queryKeywords: string[],
    imageKeywords: string[]
  ): {
    score: number;
    matchedKeywords: string[];
  } {
    const matchedKeywords: string[] = [];
    let score = 0;

    queryKeywords.forEach((queryKeyword) => {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (imageKeywords.includes(queryKeyword)) {
        matchedKeywords.push(queryKeyword);
        score += 1.0;
        return;
      }

      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –æ–±—â–∏–π –∫–æ—Ä–µ–Ω—å)
      const partialMatches = imageKeywords.filter((imgKeyword) => {
        const hasInclude =
          imgKeyword.includes(queryKeyword) ||
          queryKeyword.includes(imgKeyword);
        const hasRoot = this.hasCommonRoot(queryKeyword, imgKeyword);
        return hasInclude || hasRoot;
      });

      if (partialMatches.length > 0) {
        matchedKeywords.push(...partialMatches);
        score += 0.7;
        return;
      }

      // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–∏–Ω–æ–Ω–∏–º—ã)
      const synonyms = this.findSynonyms(queryKeyword);
      const synonymMatches = imageKeywords.filter((imgKeyword) =>
        synonyms.some(
          (synonym) =>
            imgKeyword.includes(synonym) || synonym.includes(imgKeyword)
        )
      );

      if (synonymMatches.length > 0) {
        matchedKeywords.push(...synonymMatches);
        score += 0.5;
      }
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º score –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0.3 –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const matchedCount = matchedKeywords.length;
    const normalizedScore =
      matchedCount > 0 ? Math.max(score / Math.max(matchedCount, 1), 0.3) : 0;

    return {
      score: normalizedScore,
      matchedKeywords: [...new Set(matchedKeywords)],
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ—é—Ç –ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞ –æ–±—â–∏–π –∫–æ—Ä–µ–Ω—å
   */
  private hasCommonRoot(word1: string, word2: string): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–æ—Ä–Ω–∏ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
    const commonRoots = [
      // –õ—É–Ω–∞/–ª—É–Ω–Ω—ã–π
      { root: "–ª—É–Ω", variants: ["–ª—É–Ω", "–ª—É–Ω–Ω", "–ª—É–Ω–Ω"] },
      // –°–æ–ª–Ω—Ü–µ/—Å–æ–ª–Ω–µ—á–Ω—ã–π
      { root: "—Å–æ–ª–Ω", variants: ["—Å–æ–ª–Ω", "—Å–æ–ª–Ω–µ—á"] },
      // –õ–µ—Å/–ª–µ—Å–Ω–æ–π
      { root: "–ª–µ—Å", variants: ["–ª–µ—Å", "–ª–µ—Å–Ω"] },
      // –î–µ—Ä–µ–≤–æ/–¥–µ—Ä–µ–≤—å—è
      { root: "–¥–µ—Ä–µ–≤", variants: ["–¥–µ—Ä–µ–≤", "–¥–µ—Ä–µ–≤—å"] },
      // –ö–æ—Ç/–∫–æ—Ç–∞
      { root: "–∫–æ—Ç", variants: ["–∫–æ—Ç", "–∫–æ—Ç"] },
      // –ù–µ–±–æ/–Ω–µ–±–µ—Å–Ω—ã–π
      { root: "–Ω–µ–±", variants: ["–Ω–µ–±", "–Ω–µ–±–µ—Å"] },
      // –ó–≤–µ–∑–¥–∞/–∑–≤–µ–∑–¥—ã
      { root: "–∑–≤–µ–∑–¥", variants: ["–∑–≤–µ–∑–¥", "–∑–≤–µ–∑–¥"] },
    ];

    const lowerWord1 = word1.toLowerCase();
    const lowerWord2 = word2.toLowerCase();

    for (const { root, variants } of commonRoots) {
      const hasVariant1 = variants.some((variant) =>
        lowerWord1.includes(variant)
      );
      const hasVariant2 = variants.some((variant) =>
        lowerWord2.includes(variant)
      );

      if (hasVariant1 && hasVariant2) {
        return true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–±—â–∏–µ –∫–æ—Ä–Ω–∏
    const englishRoots = [
      { root: "sun", variants: ["sun", "sunny", "solar"] },
      { root: "moon", variants: ["moon", "lunar", "lun"] },
      { root: "forest", variants: ["forest", "tree", "wood"] },
      { root: "cat", variants: ["cat", "feline"] },
      { root: "sky", variants: ["sky", "celestial"] },
      { root: "star", variants: ["star", "stellar"] },
    ];

    for (const { root, variants } of englishRoots) {
      const hasVariant1 = variants.some((variant) =>
        lowerWord1.includes(variant)
      );
      const hasVariant2 = variants.some((variant) =>
        lowerWord2.includes(variant)
      );

      if (hasVariant1 && hasVariant2) {
        return true;
      }
    }

    return false;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
   */
  public findSynonyms(word: string): string[] {
    const synonymMap: Record<string, string[]> = {
      // –ü—Ä–∏—Ä–æ–¥–∞
      —Å–æ–ª–Ω—Ü–µ: ["sun", "—Å–æ–ª–Ω–µ—á–Ω—ã–π", "sunny", "solar"],
      –ª—É–Ω–∞: ["moon", "–ª—É–Ω–Ω—ã–π", "lunar", "–Ω–æ—á–Ω–æ–π", "night"],
      –∑–≤–µ–∑–¥—ã: ["stars", "–∑–≤–µ–∑–¥–Ω—ã–π", "stellar"],
      –Ω–µ–±–æ: ["sky", "–Ω–µ–±–µ—Å–Ω—ã–π", "celestial"],
      –æ–±–ª–∞–∫–∞: ["clouds", "–æ–±–ª–∞—á–Ω—ã–π", "cloudy"],
      –º–æ—Ä–µ: ["sea", "–æ–∫–µ–∞–Ω", "ocean", "–≤–æ–¥–∞", "water"],
      –ª–µ—Å: ["forest", "–¥–µ—Ä–µ–≤—å—è", "trees", "–ø—Ä–∏—Ä–æ–¥–∞", "nature"],
      –≥–æ—Ä—ã: ["mountains", "–≥–æ—Ä–Ω—ã–π", "mountainous"],

      // –ñ–∏–≤–æ—Ç–Ω—ã–µ
      —Å–æ–±–∞–∫–∞: ["dog", "–ø–µ—Å", "–ø—ë—Å", "—Å–æ–±–∞—á–∫–∞"],
      –∫–æ—à–∫–∞: ["cat", "–∫–æ—Ç", "–∫–æ—Ç–∏–∫", "–∫–æ—Ç–µ–Ω–æ–∫"],
      –ø—Ç–∏—Ü–∞: ["bird", "–ø—Ç–∏—á–∏–π", "avian"],
      —Ä—ã–±–∞: ["fish", "—Ä—ã–±–Ω—ã–π", "piscine"],

      // –õ—é–¥–∏
      –¥–µ–≤–æ—á–∫–∞: ["girl", "–¥–µ–≤—É—à–∫–∞", "woman", "–∂–µ–Ω—â–∏–Ω–∞"],
      –º–∞–ª—å—á–∏–∫: ["boy", "–ø–∞—Ä–µ–Ω—å", "man", "–º—É–∂—á–∏–Ω–∞"],
      —Ä–µ–±–µ–Ω–æ–∫: ["child", "–¥–µ—Ç—Å–∫–∏–π", "childish"],

      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      –º–∞—à–∏–Ω–∞: ["car", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–∞–≤—Ç–æ", "vehicle"],
      —Å–∞–º–æ–ª–µ—Ç: ["airplane", "plane", "–∞–≤–∏–∞—Ü–∏—è", "aviation"],
      –ø–æ–µ–∑–¥: ["train", "–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", "railway"],
      —Ä–∞–∫–µ—Ç–∞: ["rocket", "—Ä–∞–∫–µ—Ç–Ω—ã–π", "launch", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π", "spacecraft"],

      // –ó–¥–∞–Ω–∏—è
      –¥–æ–º: ["house", "–∑–¥–∞–Ω–∏–µ", "building"],
      –∑–∞–º–æ–∫: ["castle", "–∑–∞–º–∫–æ–≤—ã–π", "castellated"],

      // –¶–≤–µ—Ç–∞
      –∫—Ä–∞—Å–Ω—ã–π: ["red", "–∫—Ä–∞—Å–Ω–æ—Ç–∞", "redness"],
      —Å–∏–Ω–∏–π: ["blue", "—Å–∏–Ω–µ–≤–∞", "blueness"],
      –∑–µ–ª–µ–Ω—ã–π: ["green", "–∑–µ–ª–µ–Ω—å", "greenness"],
      –∂–µ–ª—Ç—ã–π: ["yellow", "–∂–µ–ª—Ç–∏–∑–Ω–∞", "yellowness"],
      —á–µ—Ä–Ω—ã–π: ["black", "—á–µ—Ä–Ω–æ—Ç–∞", "blackness"],
      –±–µ–ª—ã–π: ["white", "–±–µ–ª–∏–∑–Ω–∞", "whitenes"],
    };

    return synonymMap[word] || [];
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  clearChat(chatId: string): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    // —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É
    // –ü–æ–∫–∞ —á—Ç–æ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    this.index.clear();
    this.keywordIndex.clear();
    console.log("üîç SemanticIndex: Cleared index for chat", chatId);
  }

  /**
   * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å
   */
  clear(): void {
    this.index.clear();
    this.keywordIndex.clear();
    console.log("üîç SemanticIndex: Index completely cleared");
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
   */
  getStats(): {
    totalImages: number;
    totalKeywords: number;
    averageKeywordsPerImage: number;
  } {
    const totalImages = this.index.size;
    const totalKeywords = this.keywordIndex.size;
    const totalKeywordCount = Array.from(this.index.values()).reduce(
      (sum, entry) => sum + entry.extractedKeywords.length,
      0
    );

    return {
      totalImages,
      totalKeywords,
      averageKeywordsPerImage:
        totalImages > 0 ? totalKeywordCount / totalImages : 0,
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
export const semanticIndex = new SemanticIndex();
