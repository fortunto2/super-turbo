/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
 */

import type { ChatMedia } from "./universal-context";

interface TemporalPattern {
  pattern: RegExp;
  weight: number;
  description: string;
  resolver: (
    message: string,
    media: ChatMedia[],
    context: TemporalContext
  ) => ChatMedia | null;
}

interface TemporalContext {
  currentTime: Date;
  chatStartTime?: Date;
  userTimezone?: string;
  language: "ru" | "en";
}

interface TemporalMatch {
  media: ChatMedia;
  confidence: number;
  reasoningText: string;
  temporalDistance: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 */
export class TemporalAnalyzer {
  private temporalPatterns: TemporalPattern[] = [];
  private context: TemporalContext;

  constructor(context?: Partial<TemporalContext>) {
    this.context = {
      currentTime: new Date(),
      language: "ru",
      ...context,
    };

    this.initializePatterns();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
   */
  private initializePatterns(): void {
    // –†—É—Å—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const russianPatterns: TemporalPattern[] = [
      // –¢–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      {
        pattern: /(—á–∞—Å\s+–Ω–∞–∑–∞–¥|hour\s+ago|1\s+—á–∞—Å\s+–Ω–∞–∑–∞–¥)/i,
        weight: 0.9,
        description: "–û–¥–∏–Ω —á–∞—Å –Ω–∞–∑–∞–¥",
        resolver: (message, media, context) =>
          this.findMediaByTimeOffset(media, 60, context),
      },
      {
        pattern: /(2\s+—á–∞—Å–∞\s+–Ω–∞–∑–∞–¥|2\s+hours\s+ago)/i,
        weight: 0.9,
        description: "–î–≤–∞ —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
        resolver: (message, media, context) =>
          this.findMediaByTimeOffset(media, 120, context),
      },
      {
        pattern: /(–ø–æ–ª—á–∞—Å–∞\s+–Ω–∞–∑–∞–¥|30\s+–º–∏–Ω—É—Ç\s+–Ω–∞–∑–∞–¥|half\s+hour\s+ago)/i,
        weight: 0.9,
        description: "–ü–æ–ª—á–∞—Å–∞ –Ω–∞–∑–∞–¥",
        resolver: (message, media, context) =>
          this.findMediaByTimeOffset(media, 30, context),
      },

      // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      {
        pattern: /(–≤—á–µ—Ä–∞|yesterday)/i,
        weight: 0.8,
        description: "–í—á–µ—Ä–∞",
        resolver: (message, media, context) =>
          this.findMediaByDayOffset(media, -1, context),
      },
      {
        pattern: /(–ø–æ–∑–∞–≤—á–µ—Ä–∞|day\s+before\s+yesterday)/i,
        weight: 0.8,
        description: "–ü–æ–∑–∞–≤—á–µ—Ä–∞",
        resolver: (message, media, context) =>
          this.findMediaByDayOffset(media, -2, context),
      },
      {
        pattern: /(–Ω–∞\s+–ø—Ä–æ—à–ª–æ–π\s+–Ω–µ–¥–µ–ª–µ|last\s+week)/i,
        weight: 0.7,
        description: "–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ",
        resolver: (message, media, context) =>
          this.findMediaByWeekOffset(media, -1, context),
      },

      // –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
      {
        pattern: /(–ø–µ—Ä–≤[–∞-—è]+|first)/i,
        weight: 0.8,
        description: "–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        resolver: (message, media, context) => this.findMediaByOrder(media, 0),
      },
      {
        pattern: /(–≤—Ç–æ—Ä[–∞-—è]+|second)/i,
        weight: 0.8,
        description: "–í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        resolver: (message, media, context) => this.findMediaByOrder(media, 1),
      },
      {
        pattern: /(—Ç—Ä–µ—Ç—å[–∞-—è]+|third)/i,
        weight: 0.8,
        description: "–¢—Ä–µ—Ç—å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        resolver: (message, media, context) => this.findMediaByOrder(media, 2),
      },
      {
        pattern: /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|last|recent)/i,
        weight: 0.9,
        description: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        resolver: (message, media, context) => this.findLastMedia(media),
      },
      {
        pattern: /(–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+|previous)/i,
        weight: 0.8,
        description: "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        resolver: (message, media, context) => this.findPreviousMedia(media),
      },

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      {
        pattern: /(–∫–æ–≥–¥–∞\s+—è\s+—Ç–æ–ª—å–∫–æ\s+—á—Ç–æ|just\s+now|—Ç–æ–ª—å–∫–æ\s+—á—Ç–æ)/i,
        weight: 0.9,
        description: "–¢–æ–ª—å–∫–æ —á—Ç–æ",
        resolver: (message, media, context) =>
          this.findRecentMedia(media, 5, context),
      },
      {
        pattern: /(–Ω–µ–¥–∞–≤–Ω[–∞-—è]+|recently)/i,
        weight: 0.7,
        description: "–ù–µ–¥–∞–≤–Ω–æ",
        resolver: (message, media, context) =>
          this.findRecentMedia(media, 60, context),
      },
      {
        pattern: /(–¥–∞–≤–Ω[–∞-—è]+|long\s+ago|long\s+time\s+ago)/i,
        weight: 0.6,
        description: "–î–∞–≤–Ω–æ",
        resolver: (message, media, context) =>
          this.findOldMedia(media, 24, context),
      },

      // –°–µ–∑–æ–Ω–Ω—ã–µ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      {
        pattern: /(—Å–µ–≥–æ–¥–Ω—è\s+—É—Ç—Ä–æ–º|this\s+morning)/i,
        weight: 0.8,
        description: "–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º",
        resolver: (message, media, context) =>
          this.findMediaByTimeOfDay(media, "morning", context),
      },
      {
        pattern: /(—Å–µ–≥–æ–¥–Ω—è\s+–¥–Ω–µ–º|this\s+afternoon)/i,
        weight: 0.8,
        description: "–°–µ–≥–æ–¥–Ω—è –¥–Ω–µ–º",
        resolver: (message, media, context) =>
          this.findMediaByTimeOfDay(media, "afternoon", context),
      },
      {
        pattern: /(—Å–µ–≥–æ–¥–Ω—è\s+–≤–µ—á–µ—Ä–æ–º|this\s+evening)/i,
        weight: 0.8,
        description: "–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
        resolver: (message, media, context) =>
          this.findMediaByTimeOfDay(media, "evening", context),
      },

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      {
        pattern: /(–ø–µ—Ä–µ–¥\s+—Ç–µ–º\s+–∫–∞–∫|before|–¥–æ\s+—Ç–æ–≥–æ\s+–∫–∞–∫)/i,
        weight: 0.7,
        description: "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫",
        resolver: (message, media, context) =>
          this.findMediaBeforeEvent(media, context),
      },
      {
        pattern: /(–ø–æ—Å–ª–µ\s+—Ç–æ–≥–æ\s+–∫–∞–∫|after|–ø–æ—Å–ª–µ\s+—ç—Ç–æ–≥–æ)/i,
        weight: 0.7,
        description: "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫",
        resolver: (message, media, context) =>
          this.findMediaAfterEvent(media, context),
      },

      // –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      {
        pattern: /(–¥–≤–∞\s+—Å–æ–æ–±—â–µ–Ω–∏—è\s+–Ω–∞–∑–∞–¥|2\s+messages\s+ago)/i,
        weight: 0.8,
        description: "–î–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥",
        resolver: (message, media, context) =>
          this.findMediaByMessageOffset(media, -2),
      },
      {
        pattern: /(—Ç—Ä–∏\s+—Å–æ–æ–±—â–µ–Ω–∏—è\s+–Ω–∞–∑–∞–¥|3\s+messages\s+ago)/i,
        weight: 0.8,
        description: "–¢—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥",
        resolver: (message, media, context) =>
          this.findMediaByMessageOffset(media, -3),
      },
    ];

    this.temporalPatterns = russianPatterns;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
   */
  async analyzeTemporalReferences(
    message: string,
    chatMedia: ChatMedia[]
  ): Promise<TemporalMatch[]> {
    console.log(`üïí TemporalAnalyzer: Analyzing message: "${message}"`);

    const matches: TemporalMatch[] = [];
    const lowerMessage = message.toLowerCase();

    for (const pattern of this.temporalPatterns) {
      if (pattern.pattern.test(lowerMessage)) {
        console.log(
          `üïí TemporalAnalyzer: Found pattern: ${pattern.description}`
        );

        const media = pattern.resolver(message, chatMedia, this.context);
        if (media) {
          const temporalDistance = this.calculateTemporalDistance(
            media.timestamp
          );
          const confidence = this.calculateConfidence(
            pattern.weight,
            temporalDistance
          );

          matches.push({
            media,
            confidence,
            reasoningText: `–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${pattern.description}`,
            temporalDistance,
          });

          console.log(`üïí TemporalAnalyzer: Found match:`, {
            url: media.url,
            confidence: `${Math.round(confidence * 100)}%`,
            temporalDistance: `${Math.round(temporalDistance / (1000 * 60))} minutes ago`,
          });
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    matches.sort((a, b) => b.confidence - a.confidence);

    console.log(
      `üïí TemporalAnalyzer: Found ${matches.length} temporal matches`
    );
    return matches;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–º–µ—â–µ–Ω–∏—é –≤ –º–∏–Ω—É—Ç–∞—Ö
   */
  private findMediaByTimeOffset(
    media: ChatMedia[],
    minutesOffset: number,
    context: TemporalContext
  ): ChatMedia | null {
    const targetTime = new Date(
      context.currentTime.getTime() - minutesOffset * 60 * 1000
    );

    return media.reduce(
      (closest, current) => {
        const currentDistance = Math.abs(
          current.timestamp.getTime() - targetTime.getTime()
        );
        const closestDistance = closest
          ? Math.abs(closest.timestamp.getTime() - targetTime.getTime())
          : Number.POSITIVE_INFINITY;

        return currentDistance < closestDistance ? current : closest;
      },
      null as ChatMedia | null
    );
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ —Å–º–µ—â–µ–Ω–∏—é –≤ –¥–Ω—è—Ö
   */
  private findMediaByDayOffset(
    media: ChatMedia[],
    daysOffset: number,
    context: TemporalContext
  ): ChatMedia | null {
    const targetDate = new Date(context.currentTime);
    targetDate.setDate(targetDate.getDate() + daysOffset);
    targetDate.setHours(0, 0, 0, 0);

    const nextDay = new Date(targetDate);
    nextDay.setDate(nextDay.getDate() + 1);

    const dayMedia = media.filter(
      (m) => m.timestamp >= targetDate && m.timestamp < nextDay
    );

    return dayMedia.length > 0 ? dayMedia[dayMedia.length - 1] || null : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ —Å–º–µ—â–µ–Ω–∏—é –≤ –Ω–µ–¥–µ–ª—è—Ö
   */
  private findMediaByWeekOffset(
    media: ChatMedia[],
    weeksOffset: number,
    context: TemporalContext
  ): ChatMedia | null {
    const targetDate = new Date(context.currentTime);
    targetDate.setDate(targetDate.getDate() + weeksOffset * 7);

    const weekMedia = media.filter((m) => {
      const mediaDate = new Date(m.timestamp);
      const weekStart = new Date(targetDate);
      weekStart.setDate(weekStart.getDate() - weekStart.getDay());
      weekStart.setHours(0, 0, 0, 0);

      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekEnd.getDate() + 7);

      return mediaDate >= weekStart && mediaDate < weekEnd;
    });

    return weekMedia.length > 0
      ? weekMedia[weekMedia.length - 1] || null
      : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
   */
  private findMediaByOrder(
    media: ChatMedia[],
    index: number
  ): ChatMedia | null {
    const sortedMedia = [...media].sort(
      (a, b) => a.timestamp.getTime() - b.timestamp.getTime()
    );
    return sortedMedia[index] || null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª
   */
  private findLastMedia(media: ChatMedia[]): ChatMedia | null {
    return media.length > 0 ? media[media.length - 1] || null : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª
   */
  private findPreviousMedia(media: ChatMedia[]): ChatMedia | null {
    return media.length > 1 ? media[media.length - 2] || null : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
   */
  private findRecentMedia(
    media: ChatMedia[],
    maxMinutes: number,
    context: TemporalContext
  ): ChatMedia | null {
    const cutoffTime = new Date(
      context.currentTime.getTime() - maxMinutes * 60 * 1000
    );
    const recentMedia = media.filter((m) => m.timestamp >= cutoffTime);
    return recentMedia.length > 0
      ? recentMedia[recentMedia.length - 1] || null
      : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
   */
  private findOldMedia(
    media: ChatMedia[],
    minHours: number,
    context: TemporalContext
  ): ChatMedia | null {
    const cutoffTime = new Date(
      context.currentTime.getTime() - minHours * 60 * 60 * 1000
    );
    const oldMedia = media.filter((m) => m.timestamp <= cutoffTime);
    return oldMedia.length > 0 ? oldMedia[0] || null : null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
   */
  private findMediaByTimeOfDay(
    media: ChatMedia[],
    timeOfDay: "morning" | "afternoon" | "evening",
    context: TemporalContext
  ): ChatMedia | null {
    const today = new Date(context.currentTime);
    today.setHours(0, 0, 0, 0);

    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const todayMedia = media.filter(
      (m) => m.timestamp >= today && m.timestamp < tomorrow
    );

    if (todayMedia.length === 0) return null;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    const timeFilteredMedia = todayMedia.filter((m) => {
      const hour = m.timestamp.getHours();
      switch (timeOfDay) {
        case "morning":
          return hour >= 6 && hour < 12;
        case "afternoon":
          return hour >= 12 && hour < 18;
        case "evening":
          return hour >= 18 && hour < 24;
        default:
          return true;
      }
    });

    return timeFilteredMedia.length > 0
      ? timeFilteredMedia[timeFilteredMedia.length - 1] || null
      : todayMedia[todayMedia.length - 1] || null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–æ —Å–æ–±—ã—Ç–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private findMediaBeforeEvent(
    media: ChatMedia[],
    context: TemporalContext
  ): ChatMedia | null {
    // –ò—â–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const sortedMedia = [...media].sort(
      (a, b) => a.timestamp.getTime() - b.timestamp.getTime()
    );
    const midIndex = Math.floor(sortedMedia.length / 2);
    return sortedMedia[midIndex] || null;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private findMediaAfterEvent(
    media: ChatMedia[],
    context: TemporalContext
  ): ChatMedia | null {
    // –ò—â–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const sortedMedia = [...media].sort(
      (a, b) => a.timestamp.getTime() - b.timestamp.getTime()
    );
    const midIndex = Math.floor(sortedMedia.length / 2);
    return (
      sortedMedia[midIndex + 1] || sortedMedia[sortedMedia.length - 1] || null
    );
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ —Å–º–µ—â–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private findMediaByMessageOffset(
    media: ChatMedia[],
    offset: number
  ): ChatMedia | null {
    const sortedMedia = [...media].sort(
      (a, b) => a.timestamp.getTime() - b.timestamp.getTime()
    );
    const index = sortedMedia.length + offset - 1;
    return sortedMedia[index] || null;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  private calculateTemporalDistance(timestamp: Date): number {
    return Math.abs(this.context.currentTime.getTime() - timestamp.getTime());
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
   */
  private calculateConfidence(
    patternWeight: number,
    temporalDistance: number
  ): number {
    const hoursDistance = temporalDistance / (1000 * 60 * 60);

    // –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
    const timeDecay = Math.max(0.3, 1.0 - hoursDistance / 168); // 168 —á–∞—Å–æ–≤ = 1 –Ω–µ–¥–µ–ª—è

    return patternWeight * timeDecay;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
   */
  updateContext(newContext: Partial<TemporalContext>): void {
    this.context = { ...this.context, ...newContext };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  getStats(): {
    totalPatterns: number;
    supportedLanguages: string[];
    contextInfo: TemporalContext;
  } {
    return {
      totalPatterns: this.temporalPatterns.length,
      supportedLanguages: ["ru", "en"],
      contextInfo: this.context,
    };
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 */
export const temporalAnalyzer = new TemporalAnalyzer();
