/**
 * –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
 */

import type { MediaContext } from './universal-context';

interface CachedContext {
  context: MediaContext;
  timestamp: number;
  messageHash: string;
  chatId: string;
}

interface CacheStats {
  hits: number;
  misses: number;
  evictions: number;
  totalRequests: number;
}

/**
 * –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export class ContextCache {
  private cache = new Map<string, CachedContext>();
  private stats: CacheStats = {
    hits: 0,
    misses: 0,
    evictions: 0,
    totalRequests: 0,
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
  private maxSize = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  private readonly ttl = 300000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  private readonly cleanupInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞

  constructor(maxSize = 1000) {
    this.maxSize = maxSize;
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    setInterval(() => this.cleanup(), this.cleanupInterval);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  async getCachedContext(
    chatId: string,
    messageHash: string,
    mediaType: string,
  ): Promise<MediaContext | null> {
    this.stats.totalRequests++;

    const key = this.generateKey(chatId, messageHash, mediaType);
    const cached = this.cache.get(key);

    if (cached && this.isValid(cached)) {
      this.stats.hits++;
      console.log(`üéØ cache:hit`, { mediaType });
      return cached.context;
    }

    if (cached) {
      // –ó–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è–µ–º
      this.cache.delete(key);
      this.stats.evictions++;
    }

    this.stats.misses++;
    console.log(`‚ùå cache:miss`, { mediaType });
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫—ç—à
   */
  async setCachedContext(
    chatId: string,
    messageHash: string,
    mediaType: string,
    context: MediaContext,
  ): Promise<void> {
    const key = this.generateKey(chatId, messageHash, mediaType);

    const cachedContext: CachedContext = {
      context,
      timestamp: Date.now(),
      messageHash,
      chatId,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫—ç—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∫–ª—é—á (–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
    if (!this.cache.has(key) && this.cache.size >= this.maxSize) {
      this.evictOldest();
    }

    this.cache.set(key, cachedContext);
    console.log(`üíæ cache:saved`, { mediaType });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
   */
  private generateKey(
    chatId: string,
    messageHash: string,
    mediaType: string,
  ): string {
    return `${chatId}:${mediaType}:${messageHash}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
   */
  private isValid(cached: CachedContext): boolean {
    return Date.now() - cached.timestamp < this.ttl;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
   */
  private cleanup(): void {
    const now = Date.now();
    let cleaned = 0;

    for (const [key, cached] of this.cache.entries()) {
      if (now - cached.timestamp > this.ttl) {
        this.cache.delete(key);
        cleaned++;
        this.stats.evictions++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ cache:cleanup`, { cleaned });
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
   */
  private evictOldest(): void {
    let oldestKey = '';
    let oldestTime = Date.now();

    for (const [key, cached] of this.cache.entries()) {
      if (cached.timestamp < oldestTime) {
        oldestTime = cached.timestamp;
        oldestKey = key;
      }
    }

    if (oldestKey) {
      this.cache.delete(oldestKey);
      this.stats.evictions++;
      console.log(`üóëÔ∏è cache:evict`);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  clearChatCache(chatId: string): void {
    let cleared = 0;

    for (const [key, cached] of this.cache.entries()) {
      if (cached.chatId === chatId) {
        this.cache.delete(key);
        cleared++;
      }
    }

    if (cleared > 0) {
      console.log(`üßπ cache:clearChat`, { cleared });
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats(): CacheStats & { size: number; hitRate: number } {
    const hitRate =
      this.stats.totalRequests > 0
        ? this.stats.hits / this.stats.totalRequests
        : 0;

    return {
      ...this.stats,
      size: this.cache.size,
      hitRate: Math.round(hitRate * 100) / 100,
    };
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  resetStats(): void {
    this.stats = {
      hits: 0,
      misses: 0,
      evictions: 0,
      totalRequests: 0,
    };
  }

  /**
   * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫—ç—à
   */
  clear(): void {
    const size = this.cache.size;
    this.cache.clear();
    console.log(`üßπ cache:clearAll`, { size });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function generateMessageHash(
  message: string,
  attachments?: any[],
): string {
  const crypto = require('node:crypto');

  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  let hashInput = message.toLowerCase().trim();

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
  if (attachments && attachments.length > 0) {
    const attachmentInfo = attachments
      .map((att) => `${att.url || ''}:${att.contentType || ''}`)
      .sort()
      .join('|');
    hashInput += `|attachments:${attachmentInfo}`;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MD5 —Ö—ç—à
  return crypto.createHash('md5').update(hashInput).digest('hex');
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
 */
export const contextCache = new ContextCache();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export function shouldUseCache(message: string, attachments?: any[]): boolean {
  // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (message.trim().length < 3) return false;

  // –ù–µ –∫—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–ª–æ–∂–µ–Ω–∏–π
  if (attachments && attachments.length > 10) return false;

  // –ö—ç—à–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  return true;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function getCacheKey(
  chatId: string,
  message: string,
  mediaType: string,
  attachments?: any[],
): string {
  const messageHash = generateMessageHash(message, attachments);
  return `${chatId}:${mediaType}:${messageHash}`;
}
