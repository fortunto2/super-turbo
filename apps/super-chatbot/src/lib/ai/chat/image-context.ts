import { semanticAnalyzer } from "../context/semantic-search";
import { semanticIndex } from "../context/semantic-index";

export interface ImageContext {
  sourceImageUrl?: string;
  sourceImageId?: string;
  confidence: "high" | "medium" | "low";
  reasoningText: string;
}

export interface ChatImage {
  url: string;
  id?: string;
  role: "user" | "assistant";
  timestamp: Date;
  prompt?: string;
  messageIndex: number;
  mediaType: "image";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
interface MessageAttachment {
  url?: string;
  contentType?: string;
  name?: string;
  id?: string;
}

export async function analyzeImageContext(
  userMessage: string,
  chatImages: ChatImage[],
  currentMessageAttachments?: MessageAttachment[]
): Promise<ImageContext> {
  console.log("üîç analyzeImageContext: Starting analysis", {
    userMessage,
    chatImagesLength: chatImages.length,
    currentMessageAttachments: currentMessageAttachments,
  });

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (currentMessageAttachments?.length) {
    console.log("üîç analyzeImageContext: Checking current message attachments");
    const currentImage = currentMessageAttachments.find(
      (a: MessageAttachment) =>
        typeof a?.url === "string" &&
        /^https?:\/\//.test(a.url) &&
        String(a?.contentType || "").startsWith("image/")
    );

    if (currentImage?.url) {
      console.log(
        "üîç analyzeImageContext: Found image in current message:",
        currentImage.url
      );
      return {
        sourceImageUrl: currentImage.url,
        confidence: "high",
        reasoningText: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      };
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  if (chatImages.length === 0) {
    console.log("üîç analyzeImageContext: No images found in chat history");
    return {
      confidence: "low",
      reasoningText: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    };
  }

  console.log("üîç analyzeImageContext: Images from chat history:", {
    totalImages: chatImages.length,
    images: chatImages.map((img) => ({
      url: img.url,
      role: img.role,
      prompt: img.prompt,
      messageIndex: img.messageIndex,
    })),
  });

  if (chatImages.length === 0) {
    console.log("üîç analyzeImageContext: No images found in chat history");
    return {
      confidence: "low",
      reasoningText: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    };
  }

  // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const messageLower = userMessage.toLowerCase();
  console.log(
    "üîç analyzeImageContext: Analyzing message for image references:",
    messageLower
  );

  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const imageReferences = await analyzeImageReferences(
    messageLower,
    chatImages
  );
  console.log(
    "üîç analyzeImageContext: Found image references:",
    imageReferences
  );

  if (imageReferences.length > 0) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    imageReferences.sort((a, b) => b.relevance - a.relevance);
    const bestMatch = imageReferences[0];
    console.log("üîç analyzeImageContext: Best match:", {
      image: bestMatch?.image,
      relevance: bestMatch?.relevance,
      reasoningText: bestMatch?.reasoningText,
    });

    return {
      sourceImageUrl: bestMatch?.image?.url || "",
      ...(bestMatch?.image?.id && { sourceImageId: bestMatch.image.id }),
      confidence: (bestMatch?.relevance || 0) > 0.7 ? "high" : "medium",
      reasoningText: `–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${bestMatch?.reasoningText || ""}`,
    };
  }

  // 4. –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –ø—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  console.log(
    "üîç analyzeImageContext: No explicit references found, trying semantic search"
  );
  const semanticMatch = await findImageBySemanticContent(
    messageLower,
    chatImages
  );
  console.log("üîç analyzeImageContext: Semantic match:", semanticMatch);

  if (semanticMatch) {
    return {
      sourceImageUrl: semanticMatch?.url || "",
      ...(semanticMatch?.id && { sourceImageId: semanticMatch.id }),
      confidence: "medium",
      reasoningText: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–∏—Å–∫—É`,
    };
  }

  // 5. –ï—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
  console.log(
    "üîç analyzeImageContext: No semantic match found, trying heuristics"
  );
  const heuristicMatch = findImageByHeuristics(messageLower, chatImages);
  console.log("üîç analyzeImageContext: Heuristic match:", heuristicMatch);

  if (heuristicMatch) {
    return {
      sourceImageUrl: heuristicMatch?.image?.url || "",
      ...(heuristicMatch?.image?.id && {
        sourceImageId: heuristicMatch.image.id,
      }),
      confidence: "medium",
      reasoningText: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ: ${heuristicMatch?.reasoningText || ""}`,
    };
  }

  // 6. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log("üîç analyzeImageContext: Using fallback - last image in chat");
  const lastImage = chatImages[chatImages.length - 1];
  console.log("üîç analyzeImageContext: Last image:", {
    url: lastImage?.url,
    role: lastImage?.role,
    prompt: lastImage?.prompt,
  });

  return {
    sourceImageUrl: lastImage?.url || "",
    ...(lastImage?.id && { sourceImageId: lastImage.id }),
    confidence: "low",
    reasoningText: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ (${lastImage?.role === "assistant" ? "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ" : "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ"})`,
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageReferences(
  messageLower: string,
  chatImages: ChatImage[]
): Promise<
  Array<{ image: ChatImage; relevance: number; reasoningText: string }>
> {
  console.log(
    "üîç analyzeImageReferences: Starting pattern matching for:",
    messageLower
  );
  const references: Array<{
    image: ChatImage;
    relevance: number;
    reasoningText: string;
  }> = [];

  // –†—É—Å—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const russianPatterns = [
    {
      pattern: /(—ç—Ç–æ|—ç—Ç–∞|—ç—Ç–æ—Ç)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ|—Ä–∏—Å—É–Ω–æ–∫)/,
      weight: 0.9,
    },
    {
      pattern:
        /(—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω[–∞-—è]+|—Å–æ–∑–¥–∞–Ω–Ω[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.8,
    },
    {
      pattern: /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.7,
    },
    {
      pattern:
        /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+|—á–µ—Ç–≤–µ—Ä—Ç[–∞-—è]+|–ø—è—Ç[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ|picture)/,
      weight: 0.8,
    },
    {
      pattern: /(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.7,
    },
    { pattern: /(–Ω–∞\s+—ç—Ç–æ–º\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏|–≤\s+—ç—Ç–æ–π\s+–∫–∞—Ä—Ç–∏–Ω–∫–µ)/, weight: 0.9 },
    {
      pattern:
        /(–∏–∑–º–µ–Ω–∏|–∏—Å–ø—Ä–∞–≤—å|–ø–æ–¥–ø—Ä–∞–≤—å|—Å–¥–µ–ª–∞–π)\s+(—ç—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—ç—Ç—É\s+–∫–∞—Ä—Ç–∏–Ω–∫—É)/,
      weight: 0.9,
    },
    {
      pattern:
        /(—Å–¥–µ–ª–∞–π\s+–≥–ª–∞–∑–∞\s+–≥–æ–ª—É–±—ã–º–∏|–∏–∑–º–µ–Ω–∏\s+—Ü–≤–µ—Ç|–ø–æ–¥–ø—Ä–∞–≤—å\s+—Ñ–æ–Ω|–¥–æ–±–∞–≤—å\s+–∫—Ä—ã–ª—å—è)/,
      weight: 0.8,
    },
    // –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    {
      pattern:
        /(–≤–æ–∑—å–º–∏|–∏—Å–ø–æ–ª—å–∑—É–π|—Ä–∞–±–æ—Ç–∞–π\s+—Å)\s+(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ|picture)/,
      weight: 0.9,
    },
    {
      pattern:
        /(take|use|work\s+with)\s+(the\s+)?(first|second|third)\s+(image|picture|photo)/,
      weight: 0.9,
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+–∫–æ—Ç–æ—Ä[–∞-—è]+\s+(—è|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\s+–∑–∞–≥—Ä—É–∑–∏–ª|–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+\s+–º–Ω–æ—é|–º–æ[—è-—è]+\s+–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+)/,
      weight: 0.8,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+–∫–æ—Ç–æ—Ä[–∞-—è]+\s+—Å–æ–∑–¥–∞–ª\s+(–±–æ—Ç|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–∏–∏)|—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω[–∞-—è]+\s+–±–æ—Ç–æ–º|—Å–æ–∑–¥–∞–Ω–Ω[–∞-—è]+\s+–∏–∏)/,
      weight: 0.8,
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    {
      pattern:
        /(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+—Å—Å—ã–ª–∫[–∞-—è]+|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+–ø–æ\s+–∞–¥—Ä–µ—Å—É|—Ñ–æ—Ç–æ\s+–ø–æ\s+url)/,
      weight: 0.7,
    },

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—Ä—É—Å—Å–∫–∏–µ)
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–ª—É–Ω–æ–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–ª—É–Ω–æ–π|—Ñ–æ—Ç–æ\s+—Å\s+–ª—É–Ω–æ–π)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+—Å–æ–ª–Ω—Ü–µ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+—Å–æ–ª–Ω—Ü–µ–º|—Ñ–æ—Ç–æ\s+—Å\s+—Å–æ–ª–Ω—Ü–µ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+—Å–∞–º–æ–ª–µ—Ç–æ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+—Å–∞–º–æ–ª–µ—Ç–æ–º|—Ñ–æ—Ç–æ\s+—Å\s+—Å–∞–º–æ–ª–µ—Ç–æ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–¥–µ–≤–æ—á–∫–æ–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–¥–µ–≤–æ—á–∫–æ–π|—Ñ–æ—Ç–æ\s+—Å\s+–¥–µ–≤–æ—á–∫–æ–π)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–º–∞–ª—å—á–∏–∫–æ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–º–∞–ª—å—á–∏–∫–æ–º|—Ñ–æ—Ç–æ\s+—Å\s+–º–∞–ª—å—á–∏–∫–æ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+—Å–æ–±–∞–∫–æ–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+—Å–æ–±–∞–∫–æ–π|—Ñ–æ—Ç–æ\s+—Å\s+—Å–æ–±–∞–∫–æ–π)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–∫–æ—à–∫–æ–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–∫–æ—à–∫–æ–π|—Ñ–æ—Ç–æ\s+—Å\s+–∫–æ—à–∫–æ–π)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–º–∞—à–∏–Ω–æ–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–º–∞—à–∏–Ω–æ–π|—Ñ–æ—Ç–æ\s+—Å\s+–º–∞—à–∏–Ω–æ–π)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–¥–æ–º–æ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–¥–æ–º–æ–º|—Ñ–æ—Ç–æ\s+—Å\s+–¥–æ–º–æ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–ª–µ—Å–æ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–ª–µ—Å–æ–º|—Ñ–æ—Ç–æ\s+—Å\s+–ª–µ—Å–æ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+—Å\s+–º–æ—Ä–µ–º|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+—Å\s+–º–æ—Ä–µ–º|—Ñ–æ—Ç–æ\s+—Å\s+–º–æ—Ä–µ–º)/,
      weight: 0.9,
    },
    {
      pattern:
        /(–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+\s+–≥–¥–µ\s+–µ—Å—Ç—å|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\s+–≥–¥–µ\s+–µ—Å—Ç—å|—Ñ–æ—Ç–æ\s+–≥–¥–µ\s+–µ—Å—Ç—å)/,
      weight: 0.8,
    },
  ];

  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const englishPatterns = [
    { pattern: /(this|that)\s+(image|picture|photo|drawing)/, weight: 0.9 },
    { pattern: /(generated|created)\s+(image|picture|photo)/, weight: 0.8 },
    { pattern: /(last|previous|recent)\s+(image|picture|photo)/, weight: 0.7 },
    { pattern: /(first|second|third)\s+(image|picture|photo)/, weight: 0.6 },
    { pattern: /(uploaded|upload)\s+(image|picture|photo)/, weight: 0.7 },
    { pattern: /(on\s+this\s+image|in\s+this\s+picture)/, weight: 0.9 },
    {
      pattern: /(change|fix|edit|modify)\s+(this\s+image|this\s+picture)/,
      weight: 0.9,
    },
    {
      pattern:
        /(make\s+eyes\s+blue|change\s+color|fix\s+background|add\s+wings)/,
      weight: 0.8,
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
    {
      pattern:
        /(image\s+(that\s+)?(i|user)\s+uploaded|uploaded\s+by\s+me|my\s+uploaded\s+image)/,
      weight: 0.8,
    },
    {
      pattern:
        /(image\s+(that\s+)?(bot|assistant|ai)\s+created|generated\s+by\s+bot|created\s+by\s+ai)/,
      weight: 0.8,
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
    {
      pattern:
        /(image\s+from\s+url|picture\s+with\s+link|photo\s+by\s+address)/,
      weight: 0.7,
    },

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
    {
      pattern: /(image|picture|photo)\s+with\s+(moon|lunar)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(sun|solar)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(airplane|plane)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(girl|woman)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(boy|man)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(dog)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(cat)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(car|vehicle)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(house|building)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(forest|trees)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+with\s+(sea|ocean)/,
      weight: 0.9,
    },
    {
      pattern: /(image|picture|photo)\s+that\s+(has|contains|shows)/,
      weight: 0.8,
    },
  ];

  const allPatterns = [...russianPatterns, ...englishPatterns];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.all –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const patternPromises = allPatterns.map(async ({ pattern, weight }) => {
    if (pattern.test(messageLower)) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É
      const targetImage = await findTargetImageByPattern(
        pattern,
        messageLower,
        chatImages
      );
      if (targetImage) {
        return {
          image: targetImage,
          relevance: weight,
          reasoningText: `–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: ${pattern.source}`,
        };
      }
    }
    return null;
  });

  const results = await Promise.all(patternPromises);
  references.push(
    ...results.filter(
      (result): result is NonNullable<typeof result> => result !== null
    )
  );

  return references;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
async function findTargetImageByPattern(
  pattern: RegExp,
  messageLower: string,
  chatImages: ChatImage[]
): Promise<ChatImage | null> {
  console.log(
    "üîç findTargetImageByPattern: Finding target for pattern:",
    pattern.source
  );

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "—ç—Ç–æ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
  if (pattern.source.includes("—ç—Ç–æ") || pattern.source.includes("this")) {
    const result = chatImages[chatImages.length - 1] || null;
    console.log(
      "üîç findTargetImageByPattern: 'This' pattern, returning last image:",
      result?.url
    );
    return result;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
  const orderMatch = messageLower.match(
    /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+|—á–µ—Ç–≤–µ—Ä—Ç[–∞-—è]+|–ø—è—Ç[–∞-—è]+|first|second|third|fourth|fifth)/
  );
  if (orderMatch) {
    const order = orderMatch[0];
    let index = 0;

    if (order.includes("–ø–µ—Ä–≤") || order.includes("first")) index = 0;
    else if (order.includes("–≤—Ç–æ—Ä") || order.includes("second")) index = 1;
    else if (order.includes("—Ç—Ä–µ—Ç—å") || order.includes("third")) index = 2;
    else if (order.includes("—á–µ—Ç–≤–µ—Ä—Ç") || order.includes("fourth")) index = 3;
    else if (order.includes("–ø—è—Ç") || order.includes("fifth")) index = 4;

    const targetImage = chatImages[index];
    console.log("üîç findTargetImageByPattern: Order pattern matched:", {
      order,
      index,
      totalImages: chatImages.length,
      targetImage: targetImage?.url,
    });
    return targetImage || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "–ø–æ—Å–ª–µ–¥–Ω–µ–µ" –∏–ª–∏ "–ø—Ä–µ–¥—ã–¥—É—â–µ–µ"
  if (pattern.source.includes("–ø–æ—Å–ª–µ–¥–Ω") || pattern.source.includes("last")) {
    const result = chatImages[chatImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'Last' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  if (
    pattern.source.includes("–ø—Ä–µ–¥—ã–¥—É—â") ||
    pattern.source.includes("previous")
  ) {
    const result = chatImages[chatImages.length - 2];
    console.log(
      "üîç findTargetImageByPattern: 'Previous' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (
    pattern.source.includes("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω") ||
    pattern.source.includes("generated")
  ) {
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    const result = generatedImages[generatedImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'Generated' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (
    pattern.source.includes("–∑–∞–≥—Ä—É–∂–µ–Ω–Ω") ||
    pattern.source.includes("uploaded") ||
    messageLower.includes("–∑–∞–≥—Ä—É–∑–∏–ª") ||
    messageLower.includes("uploaded")
  ) {
    const uploadedImages = chatImages.filter((img) => img.role === "user");
    const result = uploadedImages[uploadedImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'Uploaded' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥—Ä—É–∑–∏–ª" –∏–ª–∏ "–º–æ–µ"
  if (
    messageLower.includes("–∫–æ—Ç–æ—Ä") &&
    (messageLower.includes("–∑–∞–≥—Ä—É–∑–∏–ª") || messageLower.includes("—è")) &&
    messageLower.includes("–∫–∞—Ä—Ç–∏–Ω–∫")
  ) {
    const uploadedImages = chatImages.filter((img) => img.role === "user");
    const result = uploadedImages[uploadedImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'My uploaded' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª –±–æ—Ç" –∏–ª–∏ "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"
  if (
    (messageLower.includes("—Å–æ–∑–¥–∞–ª") &&
      (messageLower.includes("–±–æ—Ç") || messageLower.includes("–∏–∏"))) ||
    (messageLower.includes("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω") && messageLower.includes("–±–æ—Ç")) ||
    (messageLower.includes("created") &&
      (messageLower.includes("bot") || messageLower.includes("ai"))) ||
    (messageLower.includes("generated") && messageLower.includes("bot"))
  ) {
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    const result = generatedImages[generatedImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'Bot created' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–ø–æ URL" –∏–ª–∏ "—Å —Å—Å—ã–ª–∫–æ–π"
  if (
    messageLower.includes("url") ||
    messageLower.includes("—Å—Å—ã–ª–∫") ||
    messageLower.includes("–∞–¥—Ä–µ—Å")
  ) {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º URL
    const urlImages = chatImages.filter((img) => img.url?.startsWith("http"));
    const result = urlImages[urlImages.length - 1];
    console.log(
      "üîç findTargetImageByPattern: 'URL' pattern, returning:",
      result?.url
    );
    return result || null;
  }

  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  if (isSemanticPattern(pattern)) {
    console.log(
      "üîç findTargetImageByPattern: Semantic pattern detected, searching by content"
    );
    return await findImageBySemanticContent(messageLower, chatImages);
  }

  return null;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º, –µ—Å–ª–∏ —è–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
 */
function findImageByHeuristics(
  messageLower: string,
  chatImages: ChatImage[]
): { image: ChatImage; reasoningText: string } | null {
  console.log(
    "üîç findImageByHeuristics: Analyzing message for edit intent:",
    messageLower
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç "—Ç–æ–π –∂–µ –¥–µ–≤–æ—á–∫–∏/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
  const samePersonPatterns = [
    /—Ç–æ–π\s+–∂–µ\s+–¥–µ–≤–æ—á–∫[–∞-—è]+/i,
    /—Ç–æ–π\s+–∂–µ\s+–¥–µ–≤—É—à–∫[–∞-—è]+/i,
    /—Ç–æ–≥–æ\s+–∂–µ\s+—á–µ–ª–æ–≤–µ–∫[–∞-—è]+/i,
    /same\s+girl/i,
    /same\s+person/i,
    /same\s+character/i,
    /the\s+same\s+girl/i,
    /the\s+same\s+person/i,
  ];

  const hasSamePersonContext = samePersonPatterns.some((pattern) =>
    pattern.test(messageLower)
  );
  if (hasSamePersonContext) {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (assistant), —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–æ, —á—Ç–æ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    if (generatedImages.length > 0) {
      const lastGenerated = generatedImages[generatedImages.length - 1];
      console.log(
        "üîç findImageByHeuristics: Same person context, returning last generated image:",
        lastGenerated?.url
      );
      return {
        image: lastGenerated || {
          url: "",
          id: "",
          role: "assistant",
          timestamp: new Date(),
          prompt: "",
          messageIndex: 0,
          mediaType: "image" as const,
        },
        reasoningText:
          "–∫–æ–Ω—Ç–µ–∫—Å—Ç '—Ç–æ–π –∂–µ –¥–µ–≤–æ—á–∫–∏' - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      };
    }
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const editWords = [
    "–∏–∑–º–µ–Ω–∏",
    "–∏—Å–ø—Ä–∞–≤—å",
    "–ø–æ–¥–ø—Ä–∞–≤—å",
    "—Å–¥–µ–ª–∞–π",
    "–∑–∞–º–µ–Ω–∏",
    "—É–ª—É—á—à–∏",
    "–¥–æ–±–∞–≤—å",
    "change",
    "fix",
    "edit",
    "modify",
    "replace",
    "improve",
    "add",
  ];

  const hasEditIntent = editWords.some((word) => messageLower.includes(word));
  console.log("üîç findImageByHeuristics: Has edit intent:", hasEditIntent);

  if (hasEditIntent) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    const uploadedImages = chatImages.filter((img) => img.role === "user");

    let targetImage: ChatImage | undefined;
    let reasoning: string;

    if (generatedImages.length > 0) {
      targetImage = generatedImages[generatedImages.length - 1] || undefined;
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    } else if (uploadedImages.length > 0) {
      targetImage = uploadedImages[uploadedImages.length - 1] || undefined;
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    } else {
      targetImage = chatImages[chatImages.length - 1] || undefined;
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç–µ";
    }

    console.log(
      "üîç findImageByHeuristics: Edit intent detected, returning:",
      targetImage?.url
    );

    if (!targetImage) {
      return null;
    }

    return { image: targetImage, reasoningText: reasoning };
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Å—Ç–∏–ª–µ/–∫–∞—á–µ—Å—Ç–≤–µ
  const styleWords = [
    "—Å—Ç–∏–ª—å",
    "–∫–∞—á–µ—Å—Ç–≤–æ",
    "—Ä–∞–∑–º–µ—Ä",
    "—Ü–≤–µ—Ç",
    "—Ñ–æ–Ω",
    "style",
    "quality",
    "size",
    "color",
    "background",
  ];

  const hasStyleIntent = styleWords.some((word) => messageLower.includes(word));
  if (hasStyleIntent) {
    const result = chatImages[chatImages.length - 1];
    if (!result) {
      return null;
    }
    return {
      image: result,
      reasoningText:
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∏–ª—è/–∫–∞—á–µ—Å—Ç–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    };
  }

  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
 */
export async function getChatImages(chatId: string): Promise<ChatImage[]> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const { getMessagesByChatId } = await import("@/lib/db/queries");

    const messages = await getMessagesByChatId({ id: chatId });
    console.log("üîç getChatImages: Raw messages from DB:", {
      chatId,
      totalMessages: messages.length,
      messages: messages.map((msg) => ({
        id: msg.id,
        role: msg.role,
        hasAttachments: !!msg.attachments,
        attachmentsLength: Array.isArray(msg.attachments)
          ? msg.attachments.length
          : "not array",
        attachments: msg.attachments,
      })),
    });

    const chatImages: ChatImage[] = [];

    messages.forEach((msg, index) => {
      try {
        const attachments = msg.attachments as MessageAttachment[];
        console.log(`üîç Processing message ${index}:`, {
          role: msg.role,
          attachments: attachments,
          isArray: Array.isArray(attachments),
        });

        if (Array.isArray(attachments)) {
          attachments.forEach((att, attIndex) => {
            console.log(`üîç Processing attachment ${attIndex}:`, {
              url: att?.url,
              contentType: att?.contentType,
              name: att?.name,
              id: att?.id,
              isValidUrl:
                typeof att?.url === "string" && /^https?:\/\//.test(att?.url),
              isImage: String(att?.contentType || "").startsWith("image/"),
            });

            if (
              typeof att?.url === "string" &&
              /^https?:\/\//.test(att.url) &&
              String(att?.contentType || "").startsWith("image/")
            ) {
              // AICODE-DEBUG: –ò–∑–≤–ª–µ–∫–∞–µ–º fileId –∏–∑ –∏–º–µ–Ω–∏ –≤–ª–æ–∂–µ–Ω–∏—è
              let extractedFileId: string | undefined;
              let displayPrompt = att.name || "";
              const fileIdRegex = /\[FILE_ID:([a-f0-9-]+)\]\s*(.*)/;
              const match = att.name?.match(fileIdRegex);

              if (match) {
                extractedFileId = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º fileId
                displayPrompt = match[2]?.trim() || ""; // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ - —ç—Ç–æ prompt
              }

              console.log("üîç getChatImages: FileId extraction:", {
                originalName: att.name,
                extractedFileId: extractedFileId || "none",
                displayPrompt: displayPrompt,
                fallbackReason: extractedFileId
                  ? "fileId found"
                  : "no fileId in name",
              });

              const chatImage: ChatImage = {
                url: att.url,
                ...(extractedFileId && { id: extractedFileId }), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π fileId
                role: msg.role as "user" | "assistant",
                timestamp: msg.createdAt,
                prompt: displayPrompt, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π prompt
                messageIndex: index,
                mediaType: "image",
              };

              console.log("üîç Adding chat image:", chatImage);
              chatImages.push(chatImage);

              // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
              semanticIndex.addImage(chatImage);
            }
          });
        }
      } catch (error) {
        console.warn("Error parsing message attachments:", error);
      }
    });

    console.log("üîç getChatImages: Final result:", {
      totalImages: chatImages.length,
      images: chatImages.map((img) => ({
        url: img.url,
        role: img.role,
        prompt: img.prompt,
        messageIndex: img.messageIndex,
      })),
    });

    return chatImages;
  } catch (error) {
    console.error("Error getting chat images:", error);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
function isSemanticPattern(pattern: RegExp): boolean {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  const patternText = pattern.source;
  const keywords = semanticIndex.extractKeywords(patternText);

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —ç—Ç–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
  const isSemantic = keywords.length > 0;

  console.log("üîç isSemanticPattern: Pattern analysis", {
    pattern: patternText,
    extractedKeywords: keywords,
    isSemantic,
  });

  return isSemantic;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
 */
async function findImageBySemanticContent(
  messageLower: string,
  chatImages: ChatImage[]
): Promise<ChatImage | null> {
  console.log(
    "üîç findImageBySemanticContent: Analyzing message:",
    messageLower
  );

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
    const semanticResults = semanticIndex.search(messageLower, chatImages);

    if (
      semanticResults.length > 0 &&
      semanticResults[0]?.relevanceScore &&
      semanticResults[0].relevanceScore > 0.3
    ) {
      const bestMatch = semanticResults[0];
      if (!bestMatch) {
        return null;
      }
      console.log(
        "üîç findImageBySemanticContent: Found semantic index match:",
        {
          url: bestMatch?.image?.url,
          score: `${Math.round((bestMatch?.relevanceScore || 0) * 100)}%`,
          reasoningText: bestMatch?.reasoningText,
          matchedKeywords: bestMatch?.matchedKeywords,
        }
      );
      return bestMatch.image;
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É
    const matches = await semanticAnalyzer.findSimilarMedia(
      messageLower,
      chatImages,
      0.4
    );

    if (matches.length > 0) {
      const bestMatch = matches[0];
      console.log(
        "üîç findImageBySemanticContent: Found semantic analyzer match:",
        {
          url: bestMatch?.media?.url,
          similarity: `${Math.round((bestMatch?.similarity || 0) * 100)}%`,
          reasoningText: bestMatch?.reasoningText,
          matchedKeywords: bestMatch?.matchedKeywords,
        }
      );
      // –ü—Ä–∏–≤–æ–¥–∏–º ChatMedia –∫ ChatImage, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      return bestMatch?.media as ChatImage;
    }
  } catch (error) {
    console.warn(
      "üîç findImageBySemanticContent: Semantic search failed, falling back to keyword search:",
      error
    );
  }

  // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const keywords = extractKeywordsFromMessage(messageLower);
  console.log("üîç findImageBySemanticContent: Extracted keywords:", keywords);

  if (keywords.length === 0) {
    console.log(
      "üîç findImageBySemanticContent: No keywords found, returning null"
    );
    return null;
  }

  // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏–ª–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const matchingImages = chatImages.filter((img) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç
    if (img.prompt) {
      const promptLower = img.prompt.toLowerCase();
      const hasKeywordInPrompt = keywords.some((keyword) =>
        promptLower.includes(keyword.toLowerCase())
      );

      if (hasKeywordInPrompt) {
        console.log(
          "üîç findImageBySemanticContent: Found matching image by prompt:",
          {
            url: img.url,
            prompt: img.prompt,
            matchedKeywords: keywords.filter((k) =>
              promptLower.includes(k.toLowerCase())
            ),
          }
        );
        return true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–∏–∑ URL)
    if (img.url) {
      const fileName = img.url.split("/").pop() || "";
      const fileNameLower = fileName.toLowerCase();

      // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const hasKeywordInFileName = keywords.some((keyword) => {
        const keywordLower = keyword.toLowerCase();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (fileNameLower.includes(keywordLower)) {
          return true;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        const transliterated = transliterateRussian(keywordLower);
        if (fileNameLower.includes(transliterated)) {
          return true;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        const synonyms = semanticIndex.findSynonyms(keywordLower);
        const hasSynonymMatch = synonyms.some((synonym) =>
          fileNameLower.includes(synonym.toLowerCase())
        );
        if (hasSynonymMatch) {
          return true;
        }
        return false;
      });

      if (hasKeywordInFileName) {
        console.log(
          "üîç findImageBySemanticContent: Found matching image by filename:",
          {
            url: img.url,
            fileName: fileName,
            matchedKeywords: keywords.filter((k) => {
              const keywordLower = k.toLowerCase();
              return (
                fileNameLower.includes(keywordLower) ||
                semanticIndex
                  .findSynonyms(keywordLower)
                  .some((synonym) =>
                    fileNameLower.includes(synonym.toLowerCase())
                  )
              );
            }),
          }
        );
        return true;
      }
    }

    return false;
  });

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ)
  const result = matchingImages[matchingImages.length - 1] || null;

  console.log("üîç findImageBySemanticContent: Result:", {
    totalMatches: matchingImages.length,
    selectedImage: result?.url,
    selectedPrompt: result?.prompt,
  });

  return result;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)
 */
function transliterateRussian(word: string): string {
  const transliterationMap: Record<string, string> = {
    –∞: "a",
    –±: "b",
    –≤: "v",
    –≥: "g",
    –¥: "d",
    –µ: "e",
    —ë: "yo",
    –∂: "zh",
    –∑: "z",
    –∏: "i",
    –π: "y",
    –∫: "k",
    –ª: "l",
    –º: "m",
    –Ω: "n",
    –æ: "o",
    –ø: "p",
    —Ä: "r",
    —Å: "s",
    —Ç: "t",
    —É: "u",
    —Ñ: "f",
    —Ö: "h",
    —Ü: "ts",
    —á: "ch",
    —à: "sh",
    —â: "sch",
    —ä: "",
    —ã: "y",
    —å: "",
    —ç: "e",
    —é: "yu",
    —è: "ya",
  };

  return word
    .toLowerCase()
    .split("")
    .map((char) => transliterationMap[char] || char)
    .join("");
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
function extractKeywordsFromMessage(message: string): string[] {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  // –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  return semanticIndex.extractKeywords(message);
}
