import {
  semanticIndex,
  temporalAnalyzer,
  userPreferenceLearner,
  contextCache,
  generateMessageHash,
} from "../context";

export interface VideoContext {
  sourceImageUrl?: string;
  sourceImageId?: string;
  confidence: "high" | "medium" | "low";
  reasoningText: string;
  metadata?: Record<string, any>;
}

export interface ChatImage {
  url: string;
  id?: string;
  role: "user" | "assistant";
  timestamp: Date;
  prompt?: string;
  messageIndex: number;
  mediaType: "image";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
 */
interface MessageAttachment {
  url?: string;
  contentType?: string;
  name?: string;
  id?: string;
}

export async function analyzeVideoContext(
  userMessage: string,
  chatImages: ChatImage[],
  currentMessageAttachments?: MessageAttachment[],
  chatId?: string,
  userId?: string
): Promise<VideoContext> {
  console.log(
    "üé¨ analyzeVideoContext: Starting enhanced analysis with all 4 systems",
    {
      userMessage,
      chatImagesLength: chatImages.length,
      currentMessageAttachments: currentMessageAttachments,
      chatId,
      userId,
    }
  );

  // 1. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
  if (
    chatId &&
    true // CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
  ) {
    const messageHash = generateMessageHash(
      userMessage,
      currentMessageAttachments
    );
    const cachedContext = await contextCache.getCachedContext(
      chatId,
      messageHash,
      "video"
    );

    if (cachedContext) {
      console.log(`üéØ VideoContext: Cache HIT for video in chat ${chatId}`);
      return {
        sourceImageUrl: cachedContext?.sourceUrl || "",
        ...(cachedContext?.sourceId && {
          sourceImageId: cachedContext.sourceId,
        }),
        confidence: cachedContext?.confidence || "medium",
        reasoningText: `–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${cachedContext?.reasoningText || ""}`,
        ...(cachedContext?.metadata && { metadata: cachedContext.metadata }),
      };
    }
  }

  // 2. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-to-video)
  if (currentMessageAttachments?.length) {
    console.log("üé¨ analyzeVideoContext: Checking current message attachments");
    const currentImage = currentMessageAttachments.find(
      (a: MessageAttachment) =>
        typeof a?.url === "string" &&
        /^https?:\/\//.test(a.url) &&
        String(a?.contentType || "").startsWith("image/")
    );

    if (currentImage?.url) {
      console.log(
        "üé¨ analyzeVideoContext: Found image in current message:",
        currentImage.url
      );

      const result = {
        sourceImageUrl: currentImage.url,
        sourceImageId: currentImage.id,
        confidence: "high" as const,
        reasoningText:
          "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è image-to-video",
        metadata: {
          source: "current_message",
          contentType: currentImage.contentType,
          timestamp: new Date().toISOString(),
        },
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (
        chatId &&
        true // CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
      ) {
        const messageHash = generateMessageHash(
          userMessage,
          currentMessageAttachments
        );
        await contextCache.setCachedContext(chatId, messageHash, "video", {
          sourceUrl: result.sourceImageUrl,
          ...(result.sourceImageId && { sourceId: result.sourceImageId }),
          mediaType: "video" as const,
          confidence: result.confidence,
          reasoningText: result.reasoningText,
          ...(result.metadata && { metadata: result.metadata }),
        });
      }

      return {
        sourceImageUrl: result?.sourceImageUrl || "",
        ...(result?.sourceImageId && { sourceImageId: result.sourceImageId }),
        confidence: result?.confidence || "medium",
        reasoningText: result?.reasoningText || "",
        ...(result?.metadata && { metadata: result.metadata }),
      };
    }
  }

  // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –ß–ê–¢–ê –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (chatImages.length === 0) {
    console.log("üé¨ analyzeVideoContext: No images found in chat history");
    return {
      confidence: "low",
      reasoningText: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video",
      metadata: {
        source: "chat_history",
        totalImages: 0,
        timestamp: new Date().toISOString(),
      },
    };
  }

  console.log("üé¨ analyzeVideoContext: Images from chat history:", {
    totalImages: chatImages.length,
    images: chatImages.map((img) => ({
      url: img.url,
      role: img.role,
      prompt: img.prompt,
      messageIndex: img.messageIndex,
    })),
  });

  // 4. –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è image-to-video
  const userImages = chatImages.filter((img) => img.role === "user");
  console.log(
    "üé¨ analyzeVideoContext: User uploaded images for video generation:",
    {
      totalUserImages: userImages.length,
      images: userImages.map((img) => ({
        url: img.url,
        prompt: img.prompt,
        messageIndex: img.messageIndex,
      })),
    }
  );

  if (userImages.length === 0) {
    console.log("üé¨ analyzeVideoContext: No user uploaded images found");
    return {
      confidence: "low",
      reasoningText:
        "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video",
      metadata: {
        source: "chat_history",
        totalUserImages: 0,
        timestamp: new Date().toISOString(),
      },
    };
  }

  // 5. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö 4 —Å–∏—Å—Ç–µ–º
  const messageLower = userMessage.toLowerCase();
  console.log(
    "üé¨ analyzeVideoContext: Analyzing message with all 4 systems:",
    messageLower
  );

  // 5.1. –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó - –∏—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  let temporalMatch = null;
  try {
    console.log("üïí VideoContext: Analyzing temporal references...");
    const temporalMatches = await temporalAnalyzer.analyzeTemporalReferences(
      userMessage,
      userImages.map((img) => ({
        ...img,
        mediaType: "image" as const,
      }))
    );

    if (
      temporalMatches.length > 0 &&
      temporalMatches[0]?.confidence &&
      temporalMatches[0].confidence > 0.6
    ) {
      temporalMatch = temporalMatches[0];
      console.log("üïí VideoContext: Found temporal match:", {
        url: temporalMatch?.media?.url,
        confidence: temporalMatch?.confidence,
        reasoningText: temporalMatch?.reasoningText,
      });
    }
  } catch (error) {
    console.warn("üïí VideoContext: Temporal analysis failed:", error);
  }

  // 5.2. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö - –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  let semanticMatch = null;
  try {
    console.log("üîç VideoContext: Analyzing semantic content...");
    const semanticResults = semanticIndex.search(messageLower, userImages);

    if (
      semanticResults.length > 0 &&
      semanticResults[0]?.relevanceScore &&
      semanticResults[0].relevanceScore > 0.3
    ) {
      semanticMatch = semanticResults[0];
      console.log("üîç VideoContext: Found semantic match:", {
        url: semanticMatch?.image?.url,
        score: semanticMatch?.relevanceScore,
        reasoningText: semanticMatch?.reasoningText,
      });
    }
  } catch (error) {
    console.warn("üîç VideoContext: Semantic search failed:", error);
  }

  // 5.3. –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú (legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
  const imageReferences = await analyzeVideoImageReferences(
    messageLower,
    userImages
  );
  console.log(
    "üé¨ analyzeVideoContext: Found image references:",
    imageReferences
  );

  // 6. –í–´–ë–ò–†–ê–ï–ú –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
  let bestMatch = null;
  let bestScore = 0;
  let bestReasoning = "";
  let bestSource = "";

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  if (temporalMatch && temporalMatch.confidence > bestScore) {
    bestMatch = temporalMatch.media;
    bestScore = temporalMatch.confidence;
    bestReasoning = `–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${temporalMatch.reasoningText}`;
    bestSource = "temporal";
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  if (semanticMatch && semanticMatch.relevanceScore > bestScore) {
    bestMatch = semanticMatch.image;
    bestScore = semanticMatch.relevanceScore;
    bestReasoning = `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: ${semanticMatch.reasoningText}`;
    bestSource = "semantic";
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü–û–ò–°–ö –ü–û –°–û–î–ï–†–ñ–ò–ú–û–ú–£ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –ø—Ä–æ–º–ø—Ç–µ)
  console.log("üé¨ analyzeVideoContext: Searching by image content...");
  const contentMatch = findUserImageByKeywords(messageLower, userImages);
  if (contentMatch?.reasoningText) {
    const matchedImage = userImages.find((img) => img.url === contentMatch.url);
    if (matchedImage) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const keywords = extractKeywords(messageLower);
      const matchedKeywords = keywords.filter((keyword) =>
        (matchedImage.prompt || "")
          .toLowerCase()
          .includes(keyword.toLowerCase())
      );
      const relevance = matchedKeywords.length / Math.max(keywords.length, 1);

      if (relevance > bestScore) {
        bestMatch = matchedImage;
        bestScore = relevance;
        bestReasoning = `–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: ${contentMatch.reasoningText}`;
        bestSource = "content";
        console.log("üé¨ analyzeVideoContext: Content match selected:", {
          url: matchedImage.url,
          relevance: `${Math.round(relevance * 100)}%`,
          reasoningText: bestReasoning,
        });
      }
    }
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (legacy)
  if (imageReferences.length > 0) {
    const keywordMatch = imageReferences.sort(
      (a, b) => b.relevance - a.relevance
    )[0];
    if (keywordMatch?.relevance && keywordMatch.relevance > bestScore) {
      bestMatch = keywordMatch?.image;
      bestScore = keywordMatch.relevance;
      bestReasoning = `–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatch?.reasoningText || ""}`;
      bestSource = "keywords";
    }
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (fallback)
  if (!bestMatch) {
    console.log(
      "üé¨ analyzeVideoContext: No explicit references found, trying semantic search on user images"
    );
    const fallbackSemanticMatch = await findUserImageBySemanticContent(
      messageLower,
      userImages
    );

    if (fallbackSemanticMatch) {
      bestMatch = fallbackSemanticMatch;
      bestScore = 0.5; // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è fallback
      bestReasoning = `Fallback —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`;
      bestSource = "fallback_semantic";
    }
  }

  // 7. FALLBACK –ü–û–ò–°–ö –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (!bestMatch) {
    console.log(
      "üé¨ analyzeVideoContext: No match found with main systems, trying fallback methods"
    );

    // Fallback 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywordMatch = findUserImageByKeywords(messageLower, userImages);
    if (keywordMatch) {
      bestMatch = keywordMatch;
      bestScore = 0.4;
      bestReasoning = `Fallback –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatch.reasoningText}`;
      bestSource = "fallback_keywords";
    }

    // Fallback 2: –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
    if (!bestMatch) {
      const heuristicMatch = findUserImageByVideoHeuristics(
        messageLower,
        userImages
      );
      if (heuristicMatch) {
        bestMatch = heuristicMatch.image;
        bestScore = 0.3;
        bestReasoning = `Fallback —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ: ${heuristicMatch.reasoningText}`;
        bestSource = "fallback_heuristics";
      }
    }

    // Fallback 3: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!bestMatch && userImages.length > 0) {
      bestMatch = userImages[userImages.length - 1];
      bestScore = 0.2;
      bestReasoning =
        "Fallback: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      bestSource = "fallback_last";
    }
  }

  // 8. –§–û–†–ú–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  if (bestMatch) {
    const confidence =
      bestScore > 0.7 ? "high" : bestScore > 0.4 ? "medium" : "low";

    const result = {
      sourceImageUrl: bestMatch.url,
      sourceImageId: bestMatch.id,
      confidence: confidence as "high" | "medium" | "low",
      reasoningText: bestReasoning,
      metadata: {
        source: bestSource,
        score: bestScore,
        totalUserImages: userImages.length,
        timestamp: new Date().toISOString(),
        systems_used: {
          temporal: !!temporalMatch,
          semantic: !!semanticMatch,
          keywords: imageReferences.length > 0,
        },
      },
    };

    console.log("üé¨ analyzeVideoContext: Final result:", {
      sourceImageUrl: result.sourceImageUrl,
      confidence: result.confidence,
      reasoningText: result.reasoningText,
      metadata: result.metadata,
    });

    // 9. –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–®
    if (
      chatId &&
      true // CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
    ) {
      const messageHash = generateMessageHash(
        userMessage,
        currentMessageAttachments
      );
      await contextCache.setCachedContext(chatId, messageHash, "video", {
        sourceUrl: result.sourceImageUrl,
        ...(result.sourceImageId && { sourceId: result.sourceImageId }),
        mediaType: "video" as const,
        confidence: result.confidence,
        reasoningText: result.reasoningText,
        ...(result.metadata && { metadata: result.metadata }),
      });
    }

    // 10. –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–´–ë–û–† –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô
    if (userId && chatId) {
      try {
        await userPreferenceLearner.recordUserChoice(
          chatId,
          userId,
          userMessage,
          {
            url: result.sourceImageUrl || "",
            ...(result.sourceImageId && { id: result.sourceImageId }),
            role: "user" as const,
            timestamp: new Date(),
            messageIndex: 0,
            mediaType: "image" as const,
          },
          userImages.map((img) => ({
            ...img,
            mediaType: "image" as const,
          })),
          bestScore,
          bestReasoning
        );
        console.log("üß† VideoContext: Recorded user choice for learning");
      } catch (error) {
        console.warn("üß† VideoContext: Failed to record user choice:", error);
      }
    }

    return {
      sourceImageUrl: result?.sourceImageUrl || "",
      ...(result?.sourceImageId && { sourceImageId: result.sourceImageId }),
      confidence: result?.confidence || "medium",
      reasoningText: result?.reasoningText || "",
      ...(result?.metadata && { metadata: result.metadata }),
    };
  }

  // 11. FALLBACK: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log(
    "üé¨ analyzeVideoContext: No matches found, using last user image as fallback"
  );
  const lastUserImage = userImages[userImages.length - 1];

  const fallbackResult = {
    sourceImageUrl: lastUserImage?.url || "",
    ...(lastUserImage?.id && { sourceImageId: lastUserImage.id }),
    confidence: "low" as const,
    reasoningText: `Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è image-to-video`,
    metadata: {
      source: "fallback_last",
      score: 0.1,
      totalUserImages: userImages.length,
      timestamp: new Date().toISOString(),
      systems_used: {
        temporal: false,
        semantic: false,
        keywords: false,
      },
    },
  };

  console.log("üé¨ analyzeVideoContext: Fallback result:", fallbackResult);
  return fallbackResult;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
async function analyzeVideoImageReferences(
  messageLower: string,
  userImages: ChatImage[]
): Promise<
  Array<{ image: ChatImage; relevance: number; reasoningText: string }>
> {
  console.log(
    "üé¨ analyzeVideoImageReferences: Starting pattern matching for:",
    messageLower
  );

  const references: Array<{
    image: ChatImage;
    relevance: number;
    reasoningText: string;
  }> = [];

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const userImagePatterns = [
    // –†—É—Å—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(—ç—Ç–æ|—ç—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—ç—Ç–∞\s+–∫–∞—Ä—Ç–∏–Ω–∫–∞|—ç—Ç–æ\s+—Ñ–æ—Ç–æ)/i,
      weight: 0.9,
      description: "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern: /(–º–æ–µ|–º–æ[–µ—ë])\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É",
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–∞–ª—å—á–∏–∫|–ø–∞—Ä–µ–Ω—å|—á–µ–ª–æ–≤–µ–∫|–ª—é–¥–∏|–º—É–∂—á–∏–Ω–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–∞–ª—å—á–∏–∫–æ–º/–ø–∞—Ä–Ω–µ–º",
    },
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–¥–µ–≤–æ—á–∫–∞|–∂–µ–Ω—â–∏–Ω–∞|–¥–µ–≤—É—à–∫–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –¥–µ–≤–æ—á–∫–æ–π/–∂–µ–Ω—â–∏–Ω–æ–π",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–µ–¥–≤–µ–¥—å|bear)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–µ–¥–≤–µ–¥–µ–º",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(—Å–æ–ª–Ω—Ü–µ|sun|–ª—É–Ω–∞|moon)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å —Å–æ–ª–Ω—Ü–µ–º/–ª—É–Ω–æ–π",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(this|this\s+image|this\s+picture|this\s+photo)/i,
      weight: 0.9,
      description: "Direct reference to image",
    },
    {
      pattern: /(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.8,
      description: "Reference to uploaded image",
    },
    {
      pattern: /(last|previous)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to last/previous uploaded image",
    },
    {
      pattern: /(first|second|third)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to uploaded image by order",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern: /(photo|picture|image)\s+with\s+(boy|man|people|person)/i,
      weight: 0.8,
      description: "Reference to photo with boy/man",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(girl|woman|lady)/i,
      weight: 0.8,
      description: "Reference to photo with girl/woman",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(bear|sun|moon)/i,
      weight: 0.8,
      description: "Reference to photo with bear/sun/moon",
    },
    {
      pattern: /(take|use)\s+(photo|picture|image)\s+with\s+(.+)/i,
      weight: 0.7,
      description: "Take/use photo with specific content",
    },
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const { pattern, weight, description } of userImagePatterns) {
    if (pattern.test(messageLower)) {
      console.log(
        `üé¨ analyzeVideoImageReferences: Pattern matched: ${description}`
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å
      let targetImage: ChatImage | null | undefined = null;
      let reasoning = description;

      if (messageLower.includes("–ø–æ—Å–ª–µ–¥–Ω") || messageLower.includes("last")) {
        targetImage = userImages[userImages.length - 1] || undefined;
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø—Ä–µ–¥—ã–¥—É—â") ||
        messageLower.includes("previous")
      ) {
        targetImage =
          userImages[userImages.length - 2] ||
          userImages[userImages.length - 1] ||
          undefined;
        reasoning += " - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø–µ—Ä–≤") ||
        messageLower.includes("first")
      ) {
        targetImage = userImages[0] || undefined;
        reasoning += " - –ø–µ—Ä–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–≤—Ç–æ—Ä") ||
        messageLower.includes("second")
      ) {
        targetImage = userImages[1] || undefined;
        reasoning += " - –≤—Ç–æ—Ä–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("—Ç—Ä–µ—Ç—å") ||
        messageLower.includes("third")
      ) {
        targetImage = userImages[2] || undefined;
        reasoning += " - —Ç—Ä–µ—Ç—å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        targetImage = userImages[userImages.length - 1] || undefined;
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      }

      if (targetImage) {
        references.push({
          image: targetImage,
          relevance: weight,
          reasoningText: reasoning,
        });
      }
    }
  }

  return references;
}

/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
async function findUserImageBySemanticContent(
  messageLower: string,
  userImages: ChatImage[]
): Promise<ChatImage | null> {
  console.log(
    "üé¨ findUserImageBySemanticContent: Starting semantic search for user images",
    {
      message: messageLower,
      userImagesCount: userImages.length,
    }
  );

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
    const semanticResults = semanticIndex.search(messageLower, userImages);

    if (
      semanticResults.length > 0 &&
      semanticResults[0]?.relevanceScore &&
      semanticResults[0].relevanceScore > 0.3
    ) {
      const bestMatch = semanticResults[0] || undefined;
      console.log(
        "üé¨ findUserImageBySemanticContent: Found semantic index match:",
        {
          url: bestMatch?.image?.url,
          score: `${Math.round((bestMatch?.relevanceScore || 0) * 100)}%`,
          reasoningText: bestMatch?.reasoningText,
          matchedKeywords: bestMatch?.matchedKeywords,
        }
      );
      return bestMatch?.image || null;
    }

    console.log("üé¨ findUserImageBySemanticContent: No semantic matches found");
    return null;
  } catch (error) {
    console.warn(
      "üé¨ findUserImageBySemanticContent: Semantic search failed:",
      error
    );
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function extractKeywords(message: string): string[] {
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
  const stopWords = new Set([
    "the",
    "a",
    "an",
    "and",
    "or",
    "but",
    "in",
    "on",
    "at",
    "to",
    "for",
    "of",
    "with",
    "by",
    "–∏–∑",
    "–≤",
    "–Ω–∞",
    "—Å",
    "–¥–ª—è",
    "–æ—Ç",
    "–¥–æ",
    "–ø—Ä–∏",
    "–ø–æ–¥",
    "–Ω–∞–¥",
    "–º–µ–∂–¥—É",
    "—á–µ—Ä–µ–∑",
    "–±–µ–∑",
    "–∫—Ä–æ–º–µ",
    "–≤–º–µ—Å—Ç–æ",
    "–≤–æ–∫—Ä—É–≥",
    "–æ–∫–æ–ª–æ",
    "–≤–æ–∑–ª–µ",
    "–±–ª–∏–∑",
    "–¥–∞–ª–µ–∫–æ",
    "–±–ª–∏–∑–∫–æ",
    "–∑–¥–µ—Å—å",
    "—Ç–∞–º",
    "–≥–¥–µ",
    "–∫—É–¥–∞",
    "–æ—Ç–∫—É–¥–∞",
    "–∫–æ–≥–¥–∞",
    "–∫–∞–∫",
    "—á—Ç–æ",
    "–∫—Ç–æ",
    "–∫–∞–∫–æ–π",
    "—á–µ–π",
    "–∫–æ—Ç–æ—Ä—ã–π",
    "—ç—Ç–æ",
    "—Ç–æ",
    "—Ç–∞–∫–æ–π",
    "—Ç–∞–∫–∞—è",
    "—Ç–∞–∫–æ–µ",
    "—Ç–∞–∫–∏–µ",
    "–≤–µ—Å—å",
    "–≤—Å—è",
    "–≤—Å—ë",
    "–≤—Å–µ",
    "–∫–∞–∂–¥—ã–π",
    "–∫–∞–∂–¥–∞—è",
    "–∫–∞–∂–¥–æ–µ",
    "–∫–∞–∂–¥—ã–µ",
    "–ª—é–±–æ–π",
    "–ª—é–±–∞—è",
    "–ª—é–±–æ–µ",
    "–ª—é–±—ã–µ",
    "–Ω–µ–∫–æ—Ç–æ—Ä—ã–π",
    "–Ω–µ–∫–æ—Ç–æ—Ä–∞—è",
    "–Ω–µ–∫–æ—Ç–æ—Ä–æ–µ",
    "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ",
    "–æ–¥–∏–Ω",
    "–æ–¥–Ω–∞",
    "–æ–¥–Ω–æ",
    "–æ–¥–Ω–∏",
    "–¥–≤–∞",
    "–¥–≤–µ",
    "—Ç—Ä–∏",
    "—á–µ—Ç—ã—Ä–µ",
    "–ø—è—Ç—å",
    "–º–Ω–æ–≥–æ",
    "–º–∞–ª–æ",
    "–±–æ–ª—å—à–µ",
    "–º–µ–Ω—å—à–µ",
    "–±–æ–ª—å—à–æ–π",
    "–º–∞–ª–µ–Ω—å–∫–∏–π",
    "—Ö–æ—Ä–æ—à–∏–π",
    "–ø–ª–æ—Ö–æ–π",
    "–Ω–æ–≤—ã–π",
    "—Å—Ç–∞—Ä—ã–π",
    "–º–æ–ª–æ–¥–æ–π",
    "–∫—Ä–∞—Å–∏–≤—ã–π",
    "—É—Ä–æ–¥–ª–∏–≤—ã–π",
    "–±—ã—Å—Ç—Ä—ã–π",
    "–º–µ–¥–ª–µ–Ω–Ω—ã–π",
    "–ª–µ–≥–∫–∏–π",
    "—Ç—è–∂–µ–ª—ã–π",
    "–≥–æ—Ä—è—á–∏–π",
    "—Ö–æ–ª–æ–¥–Ω—ã–π",
    "—Ç–µ–ø–ª—ã–π",
    "–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π",
    "—Å—É—Ö–æ–π",
    "–º–æ–∫—Ä—ã–π",
    "—á–∏—Å—Ç—ã–π",
    "–≥—Ä—è–∑–Ω—ã–π",
    "—è—Ä–∫–∏–π",
    "—Ç–µ–º–Ω—ã–π",
    "—Å–≤–µ—Ç–ª—ã–π",
    "–≤—ã—Å–æ–∫–∏–π",
    "–Ω–∏–∑–∫–∏–π",
    "–¥–ª–∏–Ω–Ω—ã–π",
    "–∫–æ—Ä–æ—Ç–∫–∏–π",
    "—à–∏—Ä–æ–∫–∏–π",
    "—É–∑–∫–∏–π",
    "—Ç–æ–ª—Å—Ç—ã–π",
    "—Ç–æ–Ω–∫–∏–π",
    "—Ç–æ–ª—Å—Ç—ã–π",
    "–∂–∏—Ä–Ω—ã–π",
    "—Ö—É–¥–æ–π",
    "—Å–∏–ª—å–Ω—ã–π",
    "—Å–ª–∞–±—ã–π",
    "–∑–¥–æ—Ä–æ–≤—ã–π",
    "–±–æ–ª—å–Ω–æ–π",
    "–≤–µ—Å–µ–ª—ã–π",
    "–≥—Ä—É—Å—Ç–Ω—ã–π",
    "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π",
    "–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π",
    "–¥–æ–≤–æ–ª—å–Ω—ã–π",
    "–Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã–π",
    "—Å–ø–æ–∫–æ–π–Ω—ã–π",
    "–±–µ—Å–ø–æ–∫–æ–π–Ω—ã–π",
    "—É–≤–µ—Ä–µ–Ω–Ω—ã–π",
    "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π",
    "—Å–º–µ–ª—ã–π",
    "—Ç—Ä—É—Å–ª–∏–≤—ã–π",
    "—á–µ—Å—Ç–Ω—ã–π",
    "–ª–∂–∏–≤—ã–π",
    "–¥–æ–±—Ä—ã–π",
    "–∑–ª–æ–π",
    "—É–º–Ω—ã–π",
    "–≥–ª—É–ø—ã–π",
    "–∫—Ä–∞—Å–∏–≤—ã–π",
    "—É—Ä–æ–¥–ª–∏–≤—ã–π",
    "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π",
    "—Å–∫—É—á–Ω—ã–π",
    "–≤–∞–∂–Ω—ã–π",
    "–Ω–µ–≤–∞–∂–Ω—ã–π",
    "–Ω—É–∂–Ω—ã–π",
    "–Ω–µ–Ω—É–∂–Ω—ã–π",
    "–≤–æ–∑–º–æ–∂–Ω—ã–π",
    "–Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π",
    "–ª–µ–≥–∫–∏–π",
    "—Ç—Ä—É–¥–Ω—ã–π",
    "–ø—Ä–æ—Å—Ç–æ–π",
    "—Å–ª–æ–∂–Ω—ã–π",
    "–æ–±—ã—á–Ω—ã–π",
    "–Ω–µ–æ–±—ã—á–Ω—ã–π",
    "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π",
    "–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π",
    "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
    "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
    "—Ö–æ—Ä–æ—à–æ",
    "–ø–ª–æ—Ö–æ",
    "–¥–∞",
    "–Ω–µ—Ç",
    "–º–æ–∂–µ—Ç",
    "–Ω–µ–ª—å–∑—è",
    "–Ω—É–∂–Ω–æ",
    "–Ω–µ –Ω—É–∂–Ω–æ",
    "–º–æ–∂–Ω–æ",
    "–Ω–µ–ª—å–∑—è",
    "—Ö–æ—á—É",
    "–Ω–µ —Ö–æ—á—É",
    "–ª—é–±–ª—é",
    "–Ω–µ –ª—é–±–ª—é",
    "–∑–Ω–∞—é",
    "–Ω–µ –∑–Ω–∞—é",
    "–ø–æ–Ω–∏–º–∞—é",
    "–Ω–µ –ø–æ–Ω–∏–º–∞—é",
    "–ø–æ–º–Ω—é",
    "–Ω–µ –ø–æ–º–Ω—é",
    "–≤–∏–∂—É",
    "–Ω–µ –≤–∏–∂—É",
    "—Å–ª—ã—à—É",
    "–Ω–µ —Å–ª—ã—à—É",
    "—á—É–≤—Å—Ç–≤—É—é",
    "–Ω–µ —á—É–≤—Å—Ç–≤—É—é",
    "–¥—É–º–∞—é",
    "–Ω–µ –¥—É–º–∞—é",
    "–≥–æ–≤–æ—Ä—é",
    "–Ω–µ –≥–æ–≤–æ—Ä—é",
    "–¥–µ–ª–∞—é",
    "–Ω–µ –¥–µ–ª–∞—é",
    "–∏–¥—É",
    "–Ω–µ –∏–¥—É",
    "–µ–¥—É",
    "–Ω–µ –µ–¥—É",
    "–ª–µ—Ç–∞—é",
    "–Ω–µ –ª–µ—Ç–∞—é",
    "–ø–ª–∞–≤–∞—é",
    "–Ω–µ –ø–ª–∞–≤–∞—é",
    "–±–µ–≥–∞—é",
    "–Ω–µ –±–µ–≥–∞—é",
    "–ø—Ä—ã–≥–∞—é",
    "–Ω–µ –ø—Ä—ã–≥–∞—é",
    "—Å—Ç–æ—é",
    "–Ω–µ —Å—Ç–æ—é",
    "—Å–∏–∂—É",
    "–Ω–µ —Å–∏–∂—É",
    "–ª–µ–∂—É",
    "–Ω–µ –ª–µ–∂—É",
    "—Å–ø–ª—é",
    "–Ω–µ —Å–ø–ª—é",
    "–µ–º",
    "–Ω–µ –µ–º",
    "–ø—å—é",
    "–Ω–µ –ø—å—é",
    "—á–∏—Ç–∞—é",
    "–Ω–µ —á–∏—Ç–∞—é",
    "–ø–∏—à—É",
    "–Ω–µ –ø–∏—à—É",
    "—Ä–∏—Å—É—é",
    "–Ω–µ —Ä–∏—Å—É—é",
    "–ø–æ—é",
    "–Ω–µ –ø–æ—é",
    "—Ç–∞–Ω—Ü—É—é",
    "–Ω–µ —Ç–∞–Ω—Ü—É—é",
    "–∏–≥—Ä–∞—é",
    "–Ω–µ –∏–≥—Ä–∞—é",
    "—Ä–∞–±–æ—Ç–∞—é",
    "–Ω–µ —Ä–∞–±–æ—Ç–∞—é",
    "—É—á—É—Å—å",
    "–Ω–µ —É—á—É—Å—å",
    "–æ—Ç–¥—ã—Ö–∞—é",
    "–Ω–µ –æ—Ç–¥—ã—Ö–∞—é",
    "–≥—É–ª—è—é",
    "–Ω–µ –≥—É–ª—è—é",
    "–ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é",
    "–Ω–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é",
    "–∂–∏–≤—É",
    "–Ω–µ –∂–∏–≤—É",
    "—É–º–∏—Ä–∞—é",
    "–Ω–µ —É–º–∏—Ä–∞—é",
    "—Ä–æ–∂–¥–∞—é—Å—å",
    "–Ω–µ —Ä–æ–∂–¥–∞—é—Å—å",
    "–≤–∑—Ä–æ—Å–ª–µ—é",
    "–Ω–µ –≤–∑—Ä–æ—Å–ª–µ—é",
    "—Å—Ç–∞—Ä–µ—é",
    "–Ω–µ —Å—Ç–∞—Ä–µ—é",
    "–±–æ–ª–µ—é",
    "–Ω–µ –±–æ–ª–µ—é",
    "–≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞—é",
    "–Ω–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞—é",
    "–ª–µ—á—É—Å—å",
    "–Ω–µ –ª–µ—á—É—Å—å",
    "–ª–µ—á—É",
    "–Ω–µ –ª–µ—á—É",
    "–ø–æ–º–æ–≥–∞—é",
    "–Ω–µ –ø–æ–º–æ–≥–∞—é",
    "–º–µ—à–∞—é",
    "–Ω–µ –º–µ—à–∞—é",
    "—Å–ø–∞—Å–∞—é",
    "–Ω–µ —Å–ø–∞—Å–∞—é",
    "—É–±–∏–≤–∞—é",
    "–Ω–µ —É–±–∏–≤–∞—é",
    "—Å—Ç—Ä–æ—é",
    "–Ω–µ —Å—Ç—Ä–æ—é",
    "—Ä–∞–∑—Ä—É—à–∞—é",
    "–Ω–µ —Ä–∞–∑—Ä—É—à–∞—é",
    "—Å–æ–∑–¥–∞—é",
    "–Ω–µ —Å–æ–∑–¥–∞—é",
    "—É–Ω–∏—á—Ç–æ–∂–∞—é",
    "–Ω–µ —É–Ω–∏—á—Ç–æ–∂–∞—é",
    "–ø–æ–∫—É–ø–∞—é",
    "–Ω–µ –ø–æ–∫—É–ø–∞—é",
    "–ø—Ä–æ–¥–∞—é",
    "–Ω–µ –ø—Ä–æ–¥–∞—é",
    "–¥–∞—é",
    "–Ω–µ –¥–∞—é",
    "–±–µ—Ä—É",
    "–Ω–µ –±–µ—Ä—É",
    "–æ—Ç–¥–∞—é",
    "–Ω–µ –æ—Ç–¥–∞—é",
    "–ø–æ–ª—É—á–∞—é",
    "–Ω–µ –ø–æ–ª—É—á–∞—é",
    "—Ç–µ—Ä—è—é",
    "–Ω–µ —Ç–µ—Ä—è—é",
    "–Ω–∞—Ö–æ–¥–∂—É",
    "–Ω–µ –Ω–∞—Ö–æ–∂—É",
    "–∏—â—É",
    "–Ω–µ –∏—â—É",
    "—Å–∫—Ä—ã–≤–∞—é",
    "–Ω–µ —Å–∫—Ä—ã–≤–∞—é",
    "–ø–æ–∫–∞–∑—ã–≤–∞—é",
    "–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é",
    "–æ—Ç–∫—Ä—ã–≤–∞—é",
    "–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é",
    "–∑–∞–∫—Ä—ã–≤–∞—é",
    "–Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é",
    "–≤–∫–ª—é—á–∞—é",
    "–Ω–µ –≤–∫–ª—é—á–∞—é",
    "–≤—ã–∫–ª—é—á–∞—é",
    "–Ω–µ –≤—ã–∫–ª—é—á–∞—é",
    "–∑–∞–∂–∏–≥–∞—é",
    "–Ω–µ –∑–∞–∂–∏–≥–∞—é",
    "—Ç—É—à—É",
    "–Ω–µ —Ç—É—à—É",
    "–Ω–∞—á–∏–Ω–∞—é",
    "–Ω–µ –Ω–∞—á–∏–Ω–∞—é",
    "–∑–∞–∫–∞–Ω—á–∏–≤–∞—é",
    "–Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é",
    "–ø—Ä–æ–¥–æ–ª–∂–∞—é",
    "–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é",
    "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é",
    "–Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é",
    "–º–µ–Ω—è—é",
    "–Ω–µ –º–µ–Ω—è—é",
    "—Å–æ—Ö—Ä–∞–Ω—è—é",
    "–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é",
    "—É–¥–∞–ª—è—é",
    "–Ω–µ —É–¥–∞–ª—è—é",
    "–¥–æ–±–∞–≤–ª—è—é",
    "–Ω–µ –¥–æ–±–∞–≤–ª—è—é",
    "—É–±–∏—Ä–∞—é",
    "–Ω–µ —É–±–∏—Ä–∞—é",
    "—Å—Ç–∞–≤–ª—é",
    "–Ω–µ —Å—Ç–∞–≤–ª—é",
    "–∫–ª–∞–¥—É",
    "–Ω–µ –∫–ª–∞–¥—É",
    "–≤–µ—à–∞—é",
    "–Ω–µ –≤–µ—à–∞—é",
    "—Å–Ω–∏–º–∞—é",
    "–Ω–µ —Å–Ω–∏–º–∞—é",
    "–ø–æ–¥–Ω–∏–º–∞—é",
    "–Ω–µ –ø–æ–¥–Ω–∏–º–∞—é",
    "–æ–ø—É—Å–∫–∞—é",
    "–Ω–µ –æ–ø—É—Å–∫–∞—é",
    "–ø–æ–¥–Ω–∏–º–∞—é—Å—å",
    "–Ω–µ –ø–æ–¥–Ω–∏–º–∞—é—Å—å",
    "–æ–ø—É—Å–∫–∞—é—Å—å",
    "–Ω–µ –æ–ø—É—Å–∫–∞—é—Å—å",
    "–≤—Ö–æ–∂—É",
    "–Ω–µ –≤—Ö–æ–∂—É",
    "–≤—ã—Ö–æ–∂—É",
    "–Ω–µ –≤—ã—Ö–æ–∂—É",
    "–ø—Ä–∏—Ö–æ–∂—É",
    "–Ω–µ –ø—Ä–∏—Ö–æ–∂—É",
    "—É—Ö–æ–∂—É",
    "–Ω–µ —É—Ö–æ–∂—É",
    "–≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å",
    "–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å",
    "–æ—Å—Ç–∞—é—Å—å",
    "–Ω–µ –æ—Å—Ç–∞—é—Å—å",
    "—É–µ–∑–∂–∞—é",
    "–Ω–µ —É–µ–∑–∂–∞—é",
    "–ø—Ä–∏–µ–∑–∂–∞—é",
    "–Ω–µ –ø—Ä–∏–µ–∑–∂–∞—é",
    "–ª–µ—Ç–∞—é",
    "–Ω–µ –ª–µ—Ç–∞—é",
    "–ø—Ä–∏–ª–µ—Ç–∞—é",
    "–Ω–µ –ø—Ä–∏–ª–µ—Ç–∞—é",
    "—É–ª–µ—Ç–∞—é",
    "–Ω–µ —É–ª–µ—Ç–∞—é",
    "–ø–ª—ã–≤—É",
    "–Ω–µ –ø–ª—ã–≤—É",
    "–ø—Ä–∏–ø–ª—ã–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–ø–ª—ã–≤–∞—é",
    "—É–ø–ª—ã–≤–∞—é",
    "–Ω–µ —É–ø–ª—ã–≤–∞—é",
    "–±–µ–≥–∞—é",
    "–Ω–µ –±–µ–≥–∞—é",
    "–ø—Ä–∏–±–µ–≥–∞—é",
    "–Ω–µ –ø—Ä–∏–±–µ–≥–∞—é",
    "—É–±–µ–≥–∞—é",
    "–Ω–µ —É–±–µ–≥–∞—é",
    "–ø—Ä—ã–≥–∞—é",
    "–Ω–µ –ø—Ä—ã–≥–∞—é",
    "–ø—Ä–∏–ø—Ä—ã–≥–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–ø—Ä—ã–≥–∏–≤–∞—é",
    "—É–ø—Ä—ã–≥–∏–≤–∞—é",
    "–Ω–µ —É–ø—Ä—ã–≥–∏–≤–∞—é",
    "–ø–æ–ª–∑—É",
    "–Ω–µ –ø–æ–ª–∑—É",
    "–ø—Ä–∏–ø–æ–ª–∑–∞—é",
    "–Ω–µ –ø—Ä–∏–ø–æ–ª–∑–∞—é",
    "—É–ø–æ–ª–∑–∞—é",
    "–Ω–µ —É–ø–æ–ª–∑–∞—é",
    "–∫–∞—Ç–∞—é—Å—å",
    "–Ω–µ –∫–∞—Ç–∞—é—Å—å",
    "–ø—Ä–∏–∫–∞—Ç—ã–≤–∞—é—Å—å",
    "–Ω–µ –ø—Ä–∏–∫–∞—Ç—ã–≤–∞—é—Å—å",
    "—É–∫–∞—Ç—ã–≤–∞—é—Å—å",
    "–Ω–µ —É–∫–∞—Ç—ã–≤–∞—é—Å—å",
    "–∫–∞—á–∞—é—Å—å",
    "–Ω–µ –∫–∞—á–∞—é—Å—å",
    "–ø—Ä–∏–∫–∞—á–∏–≤–∞—é—Å—å",
    "–Ω–µ –ø—Ä–∏–∫–∞—á–∏–≤–∞—é—Å—å",
    "—É–∫–∞—á–∏–≤–∞—é—Å—å",
    "–Ω–µ —É–∫–∞—á–∏–≤–∞—é—Å—å",
    "–≤–µ—Ä—á—É—Å—å",
    "–Ω–µ –≤–µ—Ä—á—É—Å—å",
    "–ø—Ä–∏–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å",
    "–Ω–µ –ø—Ä–∏–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å",
    "—É–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å",
    "–Ω–µ —É–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å",
    "–∫—Ä—É—á—É—Å—å",
    "–Ω–µ –∫—Ä—É—á—É—Å—å",
    "–ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—é—Å—å",
    "–Ω–µ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—é—Å—å",
    "—É–∫—Ä—É—á–∏–≤–∞—é—Å—å",
    "–Ω–µ —É–∫—Ä—É—á–∏–≤–∞—é—Å—å",
    "—Ç—Ä—è—Å—É—Å—å",
    "–Ω–µ —Ç—Ä—è—Å—É—Å—å",
    "–ø—Ä–∏—Ç—Ä—è—Ö–∏–≤–∞—é—Å—å",
    "–Ω–µ –ø—Ä–∏—Ç—Ä—è—Ö–∏–≤–∞—é—Å—å",
    "—É—Ç—Ä—è—Ö–∏–≤–∞—é—Å—å",
    "–Ω–µ —É—Ç—Ä—è—Ö–∏–≤–∞—é—Å—å",
    "–¥—Ä–æ–∂—É",
    "–Ω–µ –¥—Ä–æ–∂—É",
    "–ø—Ä–∏–¥—Ä–æ–∂–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–¥—Ä–æ–∂–∏–≤–∞—é",
    "—É–¥—Ä–æ–∂–∏–≤–∞—é",
    "–Ω–µ —É–¥—Ä–æ–∂–∏–≤–∞—é",
    "—Ç—Ä—è—Å—É",
    "–Ω–µ —Ç—Ä—è—Å—É",
    "–ø—Ä–∏—Ç—Ä—è—Ö–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏—Ç—Ä—è—Ö–∏–≤–∞—é",
    "—É—Ç—Ä—è—Ö–∏–≤–∞—é",
    "–Ω–µ —É—Ç—Ä—è—Ö–∏–≤–∞—é",
    "–∫–∞—á–∞—é",
    "–Ω–µ –∫–∞—á–∞—é",
    "–ø—Ä–∏–∫–∞—á–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–∫–∞—á–∏–≤–∞—é",
    "—É–∫–∞—á–∏–≤–∞—é",
    "–Ω–µ —É–∫–∞—á–∏–≤–∞—é",
    "–≤–µ—Ä—á—É",
    "–Ω–µ –≤–µ—Ä—á—É",
    "–ø—Ä–∏–≤–æ—Ä–∞—á–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–≤–æ—Ä–∞—á–∏–≤–∞—é",
    "—É–≤–æ—Ä–∞—á–∏–≤–∞—é",
    "–Ω–µ —É–≤–æ—Ä–∞—á–∏–≤–∞—é",
    "–∫—Ä—É—á—É",
    "–Ω–µ –∫—Ä—É—á—É",
    "–ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—é",
    "–Ω–µ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—é",
    "—É–∫—Ä—É—á–∏–≤–∞—é",
    "–Ω–µ —É–∫—Ä—É—á–∏–≤–∞—é",
  ]);

  return message
    .toLowerCase()
    .split(/\s+/)
    .filter((word) => word.length > 2 && !stopWords.has(word))
    .filter((word) => /^[–∞-—è—ëa-z]+$/.test(word)) // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã
    .slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
}

/**
 * –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
function findUserImageByKeywords(
  messageLower: string,
  userImages: ChatImage[]
): { url: string; id?: string; reasoningText: string } | null {
  console.log(
    "üé¨ findUserImageByKeywords: Starting keyword-based search for:",
    messageLower
  );

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const keywords = extractKeywords(messageLower);
  console.log(
    `üé¨ findUserImageByKeywords: Keywords from "${messageLower}":`,
    keywords
  );

  if (keywords.length === 0) {
    console.log(
      `üé¨ findUserImageByKeywords: No keywords extracted from message`
    );
    return null;
  }

  // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–æ–º–ø—Ç–æ–≤
  let bestMatch = null;
  let bestRelevance = 0;
  let bestReasoning = "";

  for (const image of userImages) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const imagePrompt = image.prompt || "";
    const imagePromptLower = imagePrompt.toLowerCase();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const matchedKeywords = keywords.filter((keyword) =>
      imagePromptLower.includes(keyword.toLowerCase())
    );

    if (matchedKeywords.length > 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      const relevance = matchedKeywords.length / keywords.length;

      console.log(`üé¨ findUserImageByKeywords: Image match found:`, {
        url: image.url,
        prompt: imagePrompt,
        matchedKeywords,
        relevance: `${Math.round(relevance * 100)}%`,
      });

      if (relevance > bestRelevance) {
        bestMatch = image;
        bestRelevance = relevance;
        bestReasoning = `–Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${matchedKeywords.join(", ")}`;
      }
    }
  }

  console.log(`üé¨ findUserImageByKeywords: Best match:`, {
    hasMatch: !!bestMatch,
    relevance: bestRelevance,
    reasoningText: bestReasoning,
    mediaUrl: bestMatch?.url,
    mediaPrompt: bestMatch?.prompt,
  });

  if (bestMatch && bestRelevance > 0.3) {
    return {
      url: bestMatch?.url || "",
      ...(bestMatch?.id && { id: bestMatch.id }),
      reasoningText: bestReasoning,
    };
  }

  console.log("üé¨ findUserImageByKeywords: No relevant matches found");
  return null;
}

/**
 * –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
 */
function findUserImageByVideoHeuristics(
  messageLower: string,
  userImages: ChatImage[]
): { image: ChatImage; reasoningText: string } | null {
  console.log(
    "üé¨ findUserImageByVideoHeuristics: Analyzing message for video heuristics:",
    messageLower
  );

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const videoCreationWords = [
    "—Å–¥–µ–ª–∞–π –≤–∏–¥–µ–æ",
    "—Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–∏–¥–µ–æ",
    "—Å–¥–µ–ª–∞–π —Ä–æ–ª–∏–∫",
    "—Å–æ–∑–¥–∞–π —Ä–æ–ª–∏–∫",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫",
    "–æ–∂–∏–≤–∏",
    "–∞–Ω–∏–º–∏—Ä—É–π",
    "—Å–¥–µ–ª–∞–π –¥–≤–∏–∂—É—â–∏–º—Å—è",
    "make video",
    "create video",
    "generate video",
    "animate",
    "bring to life",
    "make it move",
  ];

  const hasVideoCreationIntent = videoCreationWords.some((word) =>
    messageLower.includes(word.toLowerCase())
  );

  console.log(
    "üé¨ findUserImageByVideoHeuristics: Has video creation intent:",
    hasVideoCreationIntent
  );

  if (hasVideoCreationIntent) {
    console.log(
      "üé¨ findUserImageByVideoHeuristics: Video creation intent detected, searching by content"
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    const contentMatch = findUserImageByKeywords(messageLower, userImages);
    if (contentMatch) {
      const matchedImage = userImages.find(
        (img) => img.url === contentMatch.url
      );
      if (matchedImage) {
        console.log(
          "üé¨ findUserImageByVideoHeuristics: Found content match:",
          matchedImage.url
        );
        return {
          image: matchedImage || undefined,
          reasoningText: `–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ + ${contentMatch?.reasoningText || ""}`,
        };
      }
    }

    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const lastUserImage = userImages[userImages.length - 1] || undefined;
    console.log(
      "üé¨ findUserImageByVideoHeuristics: No content match, using last image:",
      lastUserImage?.url
    );

    if (!lastUserImage) {
      return null;
    }

    return {
      image: lastUserImage,
      reasoningText:
        "–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    };
  }

  return null;
}
