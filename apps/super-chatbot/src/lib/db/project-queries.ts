import 'server-only';

import { eq } from 'drizzle-orm';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { userProject } from './schema';

// Create database connection
const databaseUrl = process.env.POSTGRES_URL || process.env.DATABASE_URL || '';
const client = postgres(databaseUrl, { ssl: 'require' });
const db = drizzle(client);

export type ProjectStatus = 'pending' | 'processing' | 'completed' | 'failed';

export interface ProjectData {
  id: string;
  userId: string;
  projectId: string;
  status?: ProjectStatus; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
  creditsUsed?: number; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
  errorMessage?: string; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
  createdAt: Date;
  updatedAt?: Date; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function createUserProject(
  userId: string,
  projectId: string,
  creditsUsed = 0,
): Promise<ProjectData> {
  try {
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const newProject = await db
      .insert(userProject)
      .values({
        userId,
        projectId,
        // status: "pending", // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è
        // creditsUsed, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è
      })
      .returning();

    if (newProject.length === 0) {
      throw new Error('Failed to create project in database');
    }

    console.log(
      `üíæ Project ${projectId} created in database for user ${userId} with status: pending`,
    );

    return newProject[0] as ProjectData;
  } catch (error) {
    console.error('Error creating user project:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function updateProjectStatus(
  projectId: string,
  status: ProjectStatus,
  errorMessage?: string,
): Promise<ProjectData | null> {
  try {
    // AICODE-NOTE: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    // –ü–æ–ª—è status, errorMessage, updatedAt –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log(
      `‚ö†Ô∏è Project status update temporarily disabled - migration needed for fields: status, errorMessage, updatedAt`,
    );
    console.log(
      `üìä Project ${projectId} would be updated to: ${status}${
        errorMessage ? ` (Error: ${errorMessage})` : ''
      }`,
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const existingProject = await getProjectByProjectId(projectId);
    return existingProject;
  } catch (error) {
    console.error('Error updating project status:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ ID
 */
export async function getProjectByProjectId(
  projectId: string,
): Promise<ProjectData | null> {
  try {
    const projects = await db
      .select()
      .from(userProject)
      .where(eq(userProject.projectId, projectId))
      .limit(1);

    return projects.length > 0 ? (projects[0] as ProjectData) : null;
  } catch (error) {
    console.error('Error fetching project by project ID:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserProjects(
  userId: string,
  status?: ProjectStatus,
): Promise<ProjectData[]> {
  try {
    // AICODE-NOTE: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    if (status) {
      console.warn(
        `‚ö†Ô∏è Status filtering temporarily disabled - migration needed for status field. Requested status: ${status}`,
      );
    }

    const projects = await db
      .select()
      .from(userProject)
      .where(eq(userProject.userId, userId))
      .orderBy(userProject.createdAt);

    return projects as ProjectData[];
  } catch (error) {
    console.error('Error fetching user projects:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç (–¥–ª—è –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
 */
export async function deleteUserProject(projectId: string): Promise<boolean> {
  try {
    const result = await db
      .delete(userProject)
      .where(eq(userProject.projectId, projectId))
      .returning();

    const deleted = result.length > 0;

    if (deleted) {
      console.log(`üóëÔ∏è Project ${projectId} deleted from database`);
    } else {
      console.warn(`‚ö†Ô∏è Project ${projectId} not found for deletion`);
    }

    return deleted;
  } catch (error) {
    console.error('Error deleting user project:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserProjectStats(userId: string): Promise<{
  total: number;
  pending: number;
  processing: number;
  completed: number;
  failed: number;
  totalCreditsUsed: number;
}> {
  try {
    const projects = await getUserProjects(userId);

    // AICODE-NOTE: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
    // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—è status –∏ creditsUsed
    const stats = {
      total: projects.length,
      pending: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
      processing: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
      completed: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
      failed: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
      totalCreditsUsed: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ 0 –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
    };

    console.log(
      `‚ö†Ô∏è Project stats temporarily simplified - migration needed for status and creditsUsed fields`,
    );

    return stats;
  } catch (error) {
    console.error('Error fetching user project stats:', error);
    throw error;
  }
}
