import { type NextRequest, NextResponse } from 'next/server';
import { auth } from '@/app/(auth)/auth';
import { z } from 'zod';
import {
  validateOperationBalance,
  deductOperationBalance,
} from '@/lib/utils/tools-balance';
import { createBalanceErrorResponse } from '@/lib/utils/balance-error-handler';

// Zod schema for video generation request validation
const videoGenerationSchema = z.object({
  prompt: z.string().min(1, '–ü—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  duration: z.enum(['4', '6', '8']).optional().default('8'),
  aspectRatio: z.enum(['16:9', '9:16', '1:1']).optional().default('16:9'),
  resolution: z.enum(['720p', '1080p']).optional().default('720p'),
  negativePrompt: z.string().optional(),
});

/**
 * Vertex AI Video Generation —á–µ—Ä–µ–∑ Google Cloud
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
 * - GOOGLE_AI_API_KEY –∏–∑ .env.local
 * - Auth0 –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - Vertex AI Veo API
 *
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π Vertex AI API
 * –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É OAuth2 - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/video/generate (Fal.ai)
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üé¨ Vertex AI Video Generate API called');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Auth0
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Auth0' },
        { status: 401 },
      );
    }

    console.log('‚úÖ User authenticated via Auth0:', session.user.email);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Vertex AI API Key
    const apiKey =
      process.env.GOOGLE_AI_API_KEY || process.env.VERTEXT_AI_API_KEY;

    if (!apiKey) {
      return NextResponse.json(
        {
          error: 'Vertex AI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          hint: '–î–æ–±–∞–≤—å—Ç–µ GOOGLE_AI_API_KEY –∏–ª–∏ VERTEX_AI_API_KEY –≤ .env.local',
          auth0Status: '—Ä–∞–±–æ—Ç–∞–µ—Ç',
          vertexStatus: '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        },
        { status: 500 },
      );
    }

    console.log('‚úÖ API Key found:', `${apiKey.substring(0, 10)}...`);

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const body = await request.json();
    const validatedData = videoGenerationSchema.parse(body);

    console.log('üé¨ Validated video request:', {
      prompt: `${validatedData.prompt.substring(0, 50)}...`,
      duration: validatedData.duration,
      aspectRatio: validatedData.aspectRatio,
      resolution: validatedData.resolution,
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = session.user.id;
    const generationType = 'text-to-video';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const multipliers: string[] = [];
    const durationSeconds = Number.parseInt(validatedData.duration);

    if (durationSeconds <= 5) multipliers.push('duration-5s');
    else if (durationSeconds <= 10) multipliers.push('duration-10s');
    else if (durationSeconds <= 15) multipliers.push('duration-15s');

    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (validatedData.resolution === '1080p') {
      multipliers.push('hd-quality');
    }

    const balanceValidation = await validateOperationBalance(
      userId,
      'video-generation',
      generationType,
      multipliers,
    );

    if (!balanceValidation.valid) {
      const errorResponse = createBalanceErrorResponse(
        balanceValidation,
        generationType,
      );
      return NextResponse.json(errorResponse, { status: 402 });
    }

    console.log(
      `üí≥ User ${userId} has sufficient balance for ${generationType} (${balanceValidation.cost} credits)`,
    );

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ Vertex AI endpoints
    const vertexEndpoints = [
      // Endpoint 1: Generative Language API (–¥–ª—è API –∫–ª—é—á–µ–π)
      {
        name: 'Generative Language API',
        url: 'https://generativelanguage.googleapis.com/v1beta/models/veo-3.1-generate-preview:predictLongRunning',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': apiKey,
        },
      },
      // Endpoint 2: Vertex AI API (–æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç OAuth2)
      {
        name: 'Vertex AI API',
        url: 'https://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/publishers/google/models/veo-3.1:predictLongRunning',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
      },
    ];

    let lastError: any = null;

    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π endpoint
    for (const endpoint of vertexEndpoints) {
      try {
        console.log(`üöÄ Trying ${endpoint.name}...`);
        console.log(`   URL: ${endpoint.url}`);

        const response = await fetch(endpoint.url, {
          method: 'POST',
          headers: endpoint.headers,
          body: JSON.stringify({
            instances: [
              {
                prompt: validatedData.prompt,
                ...(validatedData.negativePrompt && {
                  negativePrompt: validatedData.negativePrompt,
                }),
              },
            ],
            parameters: {
              aspectRatio: validatedData.aspectRatio,
              resolution: validatedData.resolution,
              durationSeconds: Number.parseInt(validatedData.duration),
            },
          }),
        });

        const responseText = await response.text();
        console.log(`üìã ${endpoint.name} Response Status:`, response.status);
        console.log(
          `üìã ${endpoint.name} Response:`,
          responseText.substring(0, 200),
        );

        if (response.ok) {
          // –£—Å–ø–µ—Ö! –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
          const operationData = JSON.parse(responseText);
          const fileId = `vertex-${Date.now()}-${Math.random().toString(36).substring(7)}`;

          console.log(
            '‚úÖ SUCCESS! Video generation started with',
            endpoint.name,
          );

          // –î–µduct balance
          try {
            await deductOperationBalance(
              userId,
              'video-generation',
              generationType,
              multipliers,
              {
                fileId,
                operationType: generationType,
                duration: durationSeconds,
                resolution: validatedData.resolution,
                provider: 'vertex-ai',
                model: 'veo-3.1',
                endpoint: endpoint.name,
                timestamp: new Date().toISOString(),
              },
            );
            console.log(`üí≥ Balance deducted for user ${userId}`);
          } catch (balanceError) {
            console.error('‚ö†Ô∏è Failed to deduct balance:', balanceError);
          }

          return NextResponse.json({
            success: true,
            fileId,
            operationName: operationData.name,
            status: 'processing',
            message: '–í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ Vertex AI',
            data: {
              id: fileId,
              operationName: operationData.name,
              prompt: validatedData.prompt,
              timestamp: Date.now(),
              settings: {
                duration: durationSeconds,
                aspectRatio: validatedData.aspectRatio,
                resolution: validatedData.resolution,
              },
            },
            creditsUsed: balanceValidation.cost,
            provider: 'vertex-ai',
            model: 'veo-3.1',
            endpoint: endpoint.name,
            auth0: '—Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ',
            note: `–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏—é: ${operationData.name}`,
          });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–∞
        lastError = {
          endpoint: endpoint.name,
          status: response.status,
          response: responseText,
        };
      } catch (error) {
        console.error(`‚ùå Error with ${endpoint.name}:`, error);
        lastError = {
          endpoint: endpoint.name,
          error: error instanceof Error ? error.message : 'Unknown error',
        };
      }
    }

    // –í—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    console.error('‚ùå All Vertex AI endpoints failed');

    return NextResponse.json(
      {
        success: false,
        error: 'Vertex AI endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏',
        details: lastError,
        auth0Status: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)',
        vertexStatus: '‚ùå –¢—Ä–µ–±—É–µ—Ç OAuth2 –∏–ª–∏ Service Account',
        recommendation: {
          message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/video/generate (Fal.ai)',
          reason: 'Google Veo —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω—É—é OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é',
          alternative: 'Fal.ai –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—Ç –∂–µ Veo 3 —Å –ø—Ä–æ—Å—Ç—ã–º API –∫–ª—é—á–æ–º',
          link: 'https://fal.ai',
        },
        whatHappened: {
          auth0: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Auth0',
          apiKey: 'API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
          vertexApi: 'Vertex AI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç OAuth2)',
        },
      },
      { status: 400 },
    );
  } catch (error) {
    console.error('üí• Vertex Video Generate API error:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: error.errors,
        },
        { status: 400 },
      );
    }

    const errorMessage =
      error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

    return NextResponse.json(
      {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Vertex AI',
        details: errorMessage,
        auth0Status: '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ',
      },
      { status: 500 },
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
export async function GET() {
  try {
    console.log('üé¨ Vertex Video info API called');

    const hasGoogleApiKey = !!process.env.GOOGLE_AI_API_KEY;
    const hasVertexKey = !!process.env.VERTEXT_AI_API_KEY;
    const hasAuth0 = !!(
      process.env.AUTH_AUTH0_ID &&
      process.env.AUTH_AUTH0_SECRET &&
      process.env.AUTH_AUTH0_ISSUER
    );

    return NextResponse.json({
      success: true,
      status: {
        auth0: hasAuth0 ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        googleApiKey: hasGoogleApiKey ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
        vertexApiKey: hasVertexKey
          ? '‚úÖ –ù–∞–π–¥–µ–Ω (–æ–ø–µ—á–∞—Ç–∫–∞ VERTEXT)'
          : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
        recommendation:
          hasGoogleApiKey || hasVertexKey
            ? '–ö–ª—é—á –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è Veo (—Ç—Ä–µ–±—É–µ—Ç OAuth2)'
            : '–î–æ–±–∞–≤—å—Ç–µ GOOGLE_AI_API_KEY –≤ .env.local',
      },
      configuration: {
        auth0Issuer: process.env.AUTH_AUTH0_ISSUER || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        auth0Configured: hasAuth0,
        vertexConfigured: hasGoogleApiKey || hasVertexKey,
      },
      endpoints: {
        thisEndpoint: '/api/video/generate-vertex (–ø–æ–ø—ã—Ç–∫–∞ Vertex AI)',
        recommended: '/api/video/generate (Fal.ai - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ)',
        experimental: '/api/video/generate-google (—Ç–µ—Å—Ç Google API)',
      },
      data: {
        provider: 'vertex-ai',
        model: 'veo-3.1',
        durations: ['4', '6', '8'],
        aspectRatios: ['16:9', '9:16', '1:1'],
        resolutions: ['720p', '1080p'],
      },
    });
  } catch (error) {
    console.error('üé¨ Vertex Video info API error:', error);

    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      },
      { status: 500 },
    );
  }
}
