import { type NextRequest, NextResponse } from 'next/server';
import { auth } from '@/app/(auth)/auth';
import { fal } from '@fal-ai/client';
import { z } from 'zod';
import {
  validateOperationBalance,
  deductOperationBalance,
} from '@/lib/utils/tools-balance';
import { createBalanceErrorResponse } from '@/lib/utils/balance-error-handler';

// Zod schema for video generation request validation
const videoGenerationSchema = z.object({
  prompt: z.string().min(1, '–ü—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  duration: z.enum(['4s', '6s', '8s']).optional().default('8s'),
  aspectRatio: z.enum(['16:9', '9:16', '1:1']).optional().default('16:9'),
  resolution: z.enum(['720p', '1080p']).optional().default('720p'),
  generateAudio: z.boolean().optional().default(true),
  enhancePrompt: z.boolean().optional().default(true),
  negativePrompt: z.string().optional(),
  seed: z.number().int().positive().optional(),
});

// Configure Fal.ai client with API key
function configureFalClient() {
  const falKey = process.env.FAL_KEY;
  if (!falKey) {
    throw new Error('FAL_KEY environment variable is not configured');
  }
  fal.config({ credentials: falKey });
}

export async function POST(request: NextRequest) {
  try {
    console.log('üé¨ Video Generate API called');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Auth0
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
        { status: 401 },
      );
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const body = await request.json();
    const validatedData = videoGenerationSchema.parse(body);

    console.log('üé¨ Validated video request:', {
      prompt: `${validatedData.prompt.substring(0, 50)}...`,
      duration: validatedData.duration,
      aspectRatio: validatedData.aspectRatio,
      resolution: validatedData.resolution,
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = session.user.id;
    const generationType = 'text-to-video';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const multipliers: string[] = [];
    const durationSeconds = Number.parseInt(validatedData.duration);

    if (durationSeconds <= 5) multipliers.push('duration-5s');
    else if (durationSeconds <= 10) multipliers.push('duration-10s');
    else if (durationSeconds <= 15) multipliers.push('duration-15s');

    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (validatedData.resolution === '1080p') {
      multipliers.push('hd-quality');
    }

    const balanceValidation = await validateOperationBalance(
      userId,
      'video-generation',
      generationType,
      multipliers,
    );

    if (!balanceValidation.valid) {
      const errorResponse = createBalanceErrorResponse(
        balanceValidation,
        generationType,
      );
      return NextResponse.json(errorResponse, { status: 402 });
    }

    console.log(
      `üí≥ User ${userId} has sufficient balance for ${generationType} (${balanceValidation.cost} credits)`,
    );

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Fal.ai –∫–ª–∏–µ–Ω—Ç
    configureFalClient();

    // –í—ã–∑—ã–≤–∞–µ–º Fal.ai Veo3 API
    console.log('üöÄ Calling Fal.ai Veo3 API for video generation...');
    const result = await fal.subscribe('fal-ai/veo3', {
      input: {
        prompt: validatedData.prompt,
        aspect_ratio: validatedData.aspectRatio,
        duration: validatedData.duration,
        resolution: validatedData.resolution,
        generate_audio: validatedData.generateAudio,
        enhance_prompt: validatedData.enhancePrompt,
        ...(validatedData.negativePrompt && {
          negative_prompt: validatedData.negativePrompt,
        }),
        ...(validatedData.seed && { seed: validatedData.seed }),
      },
      logs: true,
      onQueueUpdate: (update) => {
        console.log('üìä Video generation queue update:', update);
      },
    });

    console.log('‚úÖ Video generation completed:', result);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –≤–∏–¥–µ–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const videoUrl = result.data?.video?.url;
    if (!videoUrl) {
      throw new Error('No video URL in Fal.ai response');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞
    const fileId = `video-${Date.now()}-${Math.random().toString(36).substring(7)}`;

    // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try {
      await deductOperationBalance(
        userId,
        'video-generation',
        generationType,
        multipliers,
        {
          fileId,
          operationType: generationType,
          duration: durationSeconds,
          resolution: validatedData.resolution,
          provider: 'fal.ai',
          model: 'veo3',
          aspectRatio: validatedData.aspectRatio,
          timestamp: new Date().toISOString(),
        },
      );
      console.log(
        `üí≥ Balance deducted for user ${userId} after successful video generation`,
      );
    } catch (balanceError) {
      console.error(
        '‚ö†Ô∏è Failed to deduct balance after video generation:',
        balanceError,
      );
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º - –≤–∏–¥–µ–æ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      fileId,
      videoUrl,
      data: {
        id: fileId,
        url: videoUrl,
        prompt: validatedData.prompt,
        timestamp: Date.now(),
        settings: {
          duration: durationSeconds,
          aspectRatio: validatedData.aspectRatio,
          resolution: validatedData.resolution,
          generateAudio: validatedData.generateAudio,
        },
      },
      creditsUsed: balanceValidation.cost,
      provider: 'fal.ai',
      model: 'veo3',
      message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
    });
  } catch (error) {
    console.error('üí• Video Generate API error:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: error.errors,
        },
        { status: 400 },
      );
    }

    const errorMessage =
      error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

    return NextResponse.json(
      {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ',
        details: errorMessage,
      },
      { status: 500 },
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
export async function GET() {
  try {
    console.log('üé¨ Video info API called');

    return NextResponse.json({
      success: true,
      data: {
        provider: 'fal.ai',
        model: 'veo3',
        durations: ['4s', '6s', '8s'],
        aspectRatios: ['16:9', '9:16', '1:1'],
        resolutions: ['720p', '1080p'],
        features: {
          audioGeneration: true,
          promptEnhancement: true,
          negativePrompts: true,
          seedControl: true,
        },
      },
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–∞',
    });
  } catch (error) {
    console.error('üé¨ Video info API error:', error);

    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      },
      { status: 500 },
    );
  }
}
