import { type NextRequest, NextResponse } from "next/server";
import { auth } from "@/app/(auth)/auth";
import { nanoBananaImageEditing } from "@/lib/ai/tools/nano-banana-image-editing";
import { createDocument } from "@/lib/ai/tools/create-document";
import { z } from "zod/v3";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const editRequestSchema = z.object({
  editType: z.enum([
    "background-replacement",
    "object-addition",
    "object-removal",
    "style-transfer",
    "color-correction",
    "resolution-upscale",
    "face-enhancement",
    "text-addition",
    "composition-improvement",
    "lighting-adjustment",
  ]),
  editPrompt: z.string().min(1, "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  sourceImageUrl: z
    .string()
    .url("URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    .or(z.literal("")),
  precisionLevel: z
    .enum(["automatic", "precise", "surgical"])
    .optional()
    .default("automatic"),
  blendMode: z
    .enum(["natural", "seamless", "artistic", "realistic"])
    .optional()
    .default("natural"),
  preserveOriginalStyle: z.boolean().optional().default(true),
  enhanceLighting: z.boolean().optional().default(true),
  preserveShadows: z.boolean().optional().default(true),
  seed: z.number().optional(),
  batchSize: z.number().min(1).max(3).optional().default(1),
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  objectToRemove: z.string().optional(),
  newBackground: z.string().optional(),
  textToAdd: z.string().optional(),
  textStyle: z.string().optional(),
  targetStyle: z.string().optional(),
});

export async function POST(request: NextRequest) {
  try {
    console.log("üçå Nano Banana edit API called");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è" },
        { status: 401 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const body = await request.json();
    const validatedData = editRequestSchema.parse(body);

    console.log("üçå Validated edit request data:", validatedData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sourceImageUrl –Ω–µ –ø—É—Å—Ç–æ–π
    if (!validatedData.sourceImageUrl || validatedData.sourceImageUrl === "") {
      return NextResponse.json(
        {
          error: "URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const toolParams = {
      createDocument: createDocument,
      session,
      defaultSourceImageUrl: validatedData.sourceImageUrl,
      chatId: "api-request",
      userMessage: validatedData.editPrompt,
      currentAttachments: [{ url: validatedData.sourceImageUrl }],
    };

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const result = await nanoBananaImageEditing(toolParams).execute?.(
      validatedData,
      {
        toolCallId: "nano-banana-edit",
        messages: [],
      }
    );

    console.log("üçå Edit result:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if (result.error) {
      return NextResponse.json(
        {
          error: result.error,
          balanceError: result.balanceError,
          requiredCredits: result.requiredCredits,
        },
        { status: result.balanceError ? 402 : 400 }
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      data: result,
      message: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Nano Banana –∑–∞–ø—É—â–µ–Ω–æ",
    });
  } catch (error) {
    console.error("üçå Error in Nano Banana edit API:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
          details: error.errors,
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 }
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET() {
  try {
    console.log("üçå Nano Banana edit info API called");

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const toolParams = {
      createDocument: createDocument,
      session: null,
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞
    const config = await nanoBananaImageEditing(toolParams).execute?.(
      {
        editType: "background-replacement",
        editPrompt: "Edit the background of the image",
        sourceImageUrl: "https://example.com/image.jpg",
        precisionLevel: "automatic",
        blendMode: "natural",
        preserveOriginalStyle: true,
        enhanceLighting: true,
        preserveShadows: true,
        seed: 0,
        batchSize: 1,
        objectToRemove: "background",
        newBackground: "https://example.com/new-background.jpg",
        textToAdd: "Add text to the image",
        textStyle: "Arial",
        targetStyle: "realistic",
      },
      {
        toolCallId: "nano-banana-edit-info",
        messages: [],
      }
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const editTypes = config.nanoBananaEditTypes?.map((t: any) => t.id) || [];
    const precisionLevels =
      config.nanoBananaPrecisionLevels?.map((p: any) => p.id) || [];
    const blendModes = config.nanoBananaBlendModes?.map((b: any) => b.id) || [];

    return NextResponse.json({
      success: true,
      data: {
        editTypes,
        precisionLevels,
        blendModes,
      },
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Nano Banana –ø–æ–ª—É—á–µ–Ω–∞",
    });
  } catch (error) {
    console.error("üçå Error in Nano Banana edit info API:", error);

    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Nano Banana",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 }
    );
  }
}
