import { type NextRequest, NextResponse } from 'next/server';
import { auth } from '@/app/(auth)/auth';
import { nanoBananaImageEditing } from '@/lib/ai/tools/nano-banana-image-editing';
import { createDocument } from '@/lib/ai/tools/create-document';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const editRequestSchema = z.object({
  editType: z.enum([
    'background-replacement',
    'object-addition',
    'object-removal',
    'style-transfer',
    'color-correction',
    'resolution-upscale',
    'face-enhancement',
    'text-addition',
    'composition-improvement',
    'lighting-adjustment',
  ]),
  editPrompt: z.string().min(1, '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  sourceImageUrl: z.string().url('URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  precisionLevel: z
    .enum(['automatic', 'precise', 'surgical'])
    .optional()
    .default('automatic'),
  blendMode: z
    .enum(['natural', 'seamless', 'artistic', 'realistic'])
    .optional()
    .default('natural'),
  preserveOriginalStyle: z.boolean().optional().default(true),
  enhanceLighting: z.boolean().optional().default(true),
  preserveShadows: z.boolean().optional().default(true),
  seed: z.number().optional(),
  batchSize: z.number().min(1).max(3).optional().default(1),
  objectToRemove: z.string().optional(),
  newBackground: z.string().optional(),
  textToAdd: z.string().optional(),
  textStyle: z.string().optional(),
  targetStyle: z.string().optional(),
});

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
        { status: 401 },
      );
    }

    // –ß—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const body = await request.json();
    const validated = editRequestSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (!validated.sourceImageUrl) {
      return NextResponse.json(
        { error: 'URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 },
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const toolParams = {
      createDocument,
      session,
      defaultSourceImageUrl: validated.sourceImageUrl,
      chatId: 'api-request',
      userMessage: validated.editPrompt,
      currentAttachments: [{ url: validated.sourceImageUrl }],
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∞–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    const tool = nanoBananaImageEditing(toolParams);
    if (!tool || !tool.execute) {
      return NextResponse.json(
        { error: 'Failed to initialize editing tool' },
        { status: 500 },
      );
    }
    const result = await tool.execute(validated, {
      toolCallId: 'nano-banana-edit',
      messages: [],
    });

    console.log('üçå Edit result:', result);

    if (result.error) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
      return NextResponse.json(
        {
          error: result.error,
          balanceError: result.balanceError,
          requiredCredits: result.requiredCredits,
        },
        { status: result.balanceError ? 402 : 400 },
      );
    }

    // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      data: result,
      message: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ',
    });
  } catch (err) {
    console.error('üçå Error in Nano Banana edit API:', err);

    if (err instanceof z.ZodError) {
      // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      return NextResponse.json(
        {
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: err.errors,
        },
        { status: 400 },
      );
    }

    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: err instanceof Error ? err.message : String(err),
      },
      { status: 500 },
    );
  }
}

// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å GET, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
export async function GET(request: NextRequest) {
  try {
    const session = await auth(); // –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç

    const toolParams = {
      createDocument,
      session,
    };

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "–±–µ–∑ –ø—Ä–æ–º—Ç–∞", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã
    const configTool = nanoBananaImageEditing(toolParams);
    if (!configTool || !configTool.execute) {
      return NextResponse.json(
        { error: 'Failed to initialize editing tool' },
        { status: 500 },
      );
    }
    const config = await configTool.execute(
      {
        editType: 'background-replacement',
        editPrompt: '',
        sourceImageUrl: '', // dummy
        precisionLevel: 'automatic',
        blendMode: 'natural',
        preserveOriginalStyle: true,
        enhanceLighting: true,
        preserveShadows: true,
        seed: 0,
        batchSize: 1,
      },
      {
        toolCallId: 'nano-banana-edit-info',
        messages: [],
      },
    );

    const editTypes = config.nanoBananaEditTypes?.map((t: any) => t.id) ?? [];
    const precisionLevels =
      config.nanoBananaPrecisionLevels?.map((p: any) => p.id) ?? [];
    const blendModes = config.nanoBananaBlendModes?.map((b: any) => b.id) ?? [];

    return NextResponse.json({
      success: true,
      data: { editTypes, precisionLevels, blendModes },
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞',
    });
  } catch (err) {
    console.error('üçå Error in Nano Banana edit info API:', err);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        details: err instanceof Error ? err.message : String(err),
      },
      { status: 500 },
    );
  }
}
