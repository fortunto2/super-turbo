import { type NextRequest, NextResponse } from 'next/server';
import { auth } from '@/app/(auth)/auth';
import { nanoBananaPromptEnhancer } from '@/lib/ai/tools/nano-banana-prompt-enhancer';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
const enhancePromptRequestSchema = z.object({
  originalPrompt: z.string().min(1, '–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  enhancementTechnique: z
    .enum([
      'context-awareness',
      'surgical-precision',
      'physical-logic',
      'lighting-mastery',
      'composition-expertise',
      'creative-partnership',
    ])
    .optional(),
  targetStyle: z
    .enum([
      'realistic',
      'cinematic',
      'artistic',
      'minimalist',
      'dramatic',
      'soft',
      'vibrant',
      'moody',
    ])
    .optional(),
  includeTechnicalTerms: z.boolean().optional().default(true),
  includeQualityDescriptors: z.boolean().optional().default(true),
  enhanceForEditing: z.boolean().optional().default(false),
  creativeMode: z.boolean().optional().default(false),
  preserveOriginalIntent: z.boolean().optional().default(true),
  customInstructions: z.string().optional(),
});

const normalizeInput = (body: any) => {
  if (body.enhancementTechnique === 'context_awareness') {
    body.enhancementTechnique = 'context-awareness';
  }
  if (body.targetStyle === 'photorealistic') {
    body.targetStyle = 'realistic'; // –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –≤ enum
  }
  return body;
};

export async function POST(request: NextRequest) {
  try {
    console.log('üçå Nano Banana enhance prompt API called');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
        { status: 401 },
      );
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const rawBody = await request.json();
    const normalizedBody = normalizeInput(rawBody);
    const validatedData = enhancePromptRequestSchema.parse(normalizedBody);

    console.log('üçå Validated enhance prompt request data:', validatedData);

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if (!nanoBananaPromptEnhancer?.execute) {
      throw new Error(
        'nanoBananaPromptEnhancer tool is not properly initialized',
      );
    }

    const result = await nanoBananaPromptEnhancer.execute(validatedData, {
      toolCallId: 'nano-banana-enhance',
      messages: [],
    });

    console.log('üçå Enhance prompt result:', result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if ('error' in result && result.error) {
      return NextResponse.json(
        {
          error: result.error,
          fallback: (result as any).fallback,
        },
        { status: 400 },
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      data: result,
      message: '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–ª—è Nano Banana',
    });
  } catch (error) {
    console.error('üçå Error in Nano Banana enhance prompt API:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: error.errors,
        },
        { status: 400 },
      );
    }

    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      },
      { status: 500 },
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö —É–ª—É—á—à–µ–Ω–∏—è
export async function GET() {
  try {
    console.log('üçå Nano Banana enhance prompt info API called');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö –∏ —Å—Ç–∏–ª—è—Ö
    if (!nanoBananaPromptEnhancer?.execute) {
      throw new Error(
        'nanoBananaPromptEnhancer tool is not properly initialized',
      );
    }

    const techniquesInfo = await nanoBananaPromptEnhancer.execute(
      {
        originalPrompt: 'info',
        includeTechnicalTerms: true,
        includeQualityDescriptors: true,
        enhanceForEditing: false,
        creativeMode: false,
        preserveOriginalIntent: true,
      },
      {
        toolCallId: 'nano-banana-config',
        messages: [],
      },
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const techniques =
      'appliedTechniques' in techniquesInfo
        ? (techniquesInfo as any).appliedTechniques?.map((t: any) => t.id) || []
        : [];

    return NextResponse.json({
      success: true,
      data: {
        techniques,
      },
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ Nano Banana –ø–æ–ª—É—á–µ–Ω–∞',
    });
  } catch (error) {
    console.error('üçå Error in Nano Banana enhance prompt info API:', error);

    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      },
      { status: 500 },
    );
  }
}
