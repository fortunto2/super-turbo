import { type NextRequest, NextResponse } from "next/server";
import { auth } from "@/app/(auth)/auth";
import { nanoBananaImageGeneration } from "@/lib/ai/tools/nano-banana-image-generation";
import { createDocument } from "@/lib/ai/tools/create-document";
import { z } from "zod/v3";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
const generateRequestSchema = z.object({
  prompt: z.string().min(1, "–ü—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  sourceImageUrl: z.string().url().optional().or(z.literal("")).optional(),
  style: z.string().optional(),
  quality: z
    .enum(["standard", "high", "ultra", "masterpiece"])
    .optional()
    .default("high"),
  aspectRatio: z
    .enum(["1:1", "4:3", "16:9", "3:2", "9:16", "21:9"])
    .optional()
    .default("1:1"),
  seed: z.number().optional(),
  batchSize: z.number().min(1).max(4).optional().default(1),
  enableContextAwareness: z.boolean().optional().default(true),
  enableSurgicalPrecision: z.boolean().optional().default(true),
  creativeMode: z.boolean().optional().default(false),
});

export async function POST(request: NextRequest) {
  try {
    console.log("üçå Nano Banana generate API called");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è" },
        { status: 401 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const body = await request.json();
    const validatedData = generateRequestSchema.parse(body);

    console.log("üçå Validated request data:", validatedData);

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const sourceImageUrl =
      validatedData.sourceImageUrl && validatedData.sourceImageUrl !== ""
        ? validatedData.sourceImageUrl
        : undefined;

    const toolParams = {
      createDocument: createDocument,
      session,
      defaultSourceImageUrl: sourceImageUrl || "",
      chatId: "api-request",
      userMessage: validatedData.prompt,
      currentAttachments: sourceImageUrl ? [{ url: sourceImageUrl }] : [],
    };

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const result = await nanoBananaImageGeneration(toolParams).execute?.(
      validatedData,
      {
        toolCallId: "nano-banana-generate",
        messages: [],
      }
    );

    console.log("üçå Generation result:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if (result.error) {
      return NextResponse.json(
        {
          error: result.error,
          balanceError: result.balanceError,
          requiredCredits: result.requiredCredits,
        },
        { status: result.balanceError ? 402 : 400 }
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      data: result,
      message: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Nano Banana –∑–∞–ø—É—â–µ–Ω–∞",
    });
  } catch (error) {
    console.error("üçå Error in Nano Banana generate API:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
          details: error.errors,
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 }
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
export async function GET() {
  try {
    console.log("üçå Nano Banana info API called");

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const toolParams = {
      createDocument: createDocument,
      session: null,
    };

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞
    const config = await nanoBananaImageGeneration(toolParams).execute?.(
      {
        prompt: "info",
        style: "realistic",
        quality: "high",
        aspectRatio: "1:1",
        batchSize: 1,
        enableContextAwareness: true,
        enableSurgicalPrecision: true,
        creativeMode: false,
      },
      {
        toolCallId: "nano-banana-config",
        messages: [],
      }
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const styles = config.nanoBananaStyles?.map((s: any) => s.id) || [];
    const qualityLevels =
      config.nanoBananaQualityLevels?.map((q: any) => q.id) || [];
    const aspectRatios =
      config.nanoBananaAspectRatios?.map((a: any) => a.id) || [];

    return NextResponse.json({
      success: true,
      data: {
        styles,
        qualityLevels,
        aspectRatios,
      },
      message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Nano Banana –ø–æ–ª—É—á–µ–Ω–∞",
    });
  } catch (error) {
    console.error("üçå Error in Nano Banana info API:", error);

    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Nano Banana",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 }
    );
  }
}
