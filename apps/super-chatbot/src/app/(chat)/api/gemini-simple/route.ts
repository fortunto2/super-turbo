import { type NextRequest, NextResponse } from "next/server";
import { auth } from "@/app/(auth)/auth";
import {
  callGeminiDirect,
  convertToGeminiMessages,
} from "@/lib/ai/gemini-direct";
import {
  getChatById,
  getMessagesByChatId,
  saveChat,
  saveMessages,
} from "@/lib/db/queries";
import { generateUUID } from "@/lib/utils";
import { generateTitleFromUserMessage } from "../../actions";

export const maxDuration = 60;

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini + VEO3 —á–∞—Ç–∞
const geminiSystemPrompt = `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini 2.5 Flash Lite –∏ VEO3. 

–¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é Gemini 2.5 Flash Lite
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é VEO3 (Google Cloud)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
- –†–∞–±–æ—Ç–∞ —Å –±–∞–Ω–∞–Ω–æ–π (Banana) –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö AI –∑–∞–¥–∞—á

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π Gemini 2.5 Flash Lite –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –î–ª—è –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π VEO3 –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
- –ë—É–¥—å –±—ã—Å—Ç—Ä—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è Gemini + VEO3, –ø–æ—ç—Ç–æ–º—É —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.`;

export async function POST(request: NextRequest) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const {
      id,
      message,
      selectedVisibilityType = "private",
    } = await request.json();

    if (!id || !message) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    const apiKey = process.env.GOOGLE_AI_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        {
          error: "GOOGLE_AI_API_KEY not configured",
        },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
    const chat = await getChatById({ id });
    if (!chat) {
      const title = await generateTitleFromUserMessage({ message });
      await saveChat({
        id,
        userId: session.user.id,
        title,
        visibility: selectedVisibilityType,
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const previousMessages = await getMessagesByChatId({ id });
    const allMessages = [...previousMessages, message];

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Gemini
    const geminiMessages = convertToGeminiMessages(allMessages);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    geminiMessages.unshift({
      role: "user",
      parts: [{ text: geminiSystemPrompt }],
    });

    console.log(
      "üîç Calling Gemini API directly with messages:",
      geminiMessages.length
    );

    // –í—ã–∑—ã–≤–∞–µ–º Gemini API
    const response = await callGeminiDirect(geminiMessages, apiKey, {
      temperature: 0.7,
      maxOutputTokens: 1000,
    });

    console.log(
      "üîç Gemini API response received:",
      response.length,
      "characters"
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const userMessageId = message.id || generateUUID();
    const assistantMessageId = generateUUID();

    await saveMessages({
      messages: [
        {
          chatId: id,
          id: userMessageId,
          role: "user",
          parts: [{ text: message.content || message.parts?.[0]?.text || "" }],
          attachments: message.attachments || [],
          createdAt: new Date(),
        },
        {
          chatId: id,
          id: assistantMessageId,
          role: "assistant",
          parts: [{ text: response }],
          attachments: [],
          createdAt: new Date(),
        },
      ],
    });

    return NextResponse.json({
      success: true,
      response,
      messageId: assistantMessageId,
    });
  } catch (error) {
    console.error("Gemini simple API error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const chatId = searchParams.get("id");

    if (!chatId) {
      return NextResponse.json({ error: "Chat ID required" }, { status: 400 });
    }

    const chat = await getChatById({ id: chatId });
    if (!chat) {
      return NextResponse.json({ error: "Chat not found" }, { status: 404 });
    }

    if (chat.visibility === "private" && chat.userId !== session.user.id) {
      return NextResponse.json({ error: "Access denied" }, { status: 403 });
    }

    const messages = await getMessagesByChatId({ id: chatId });

    return NextResponse.json({
      success: true,
      chat,
      messages,
    });
  } catch (error) {
    console.error("Gemini simple GET error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
