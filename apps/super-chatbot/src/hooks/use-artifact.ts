'use client';

import useSWR from 'swr';
import type { UIArtifact } from '@/components/artifacts/artifact';
import { useCallback, useMemo, useEffect, useRef } from 'react';
import type { UIMessage } from 'ai';
import {
  saveArtifactToStorage,
  loadArtifactFromStorage,
  clearArtifactFromStorage,
  restoreArtifactFromData,
} from '@/lib/utils/artifact-persistence';

export const initialArtifactData: UIArtifact = {
  documentId: 'init',
  content: '',
  kind: 'text',
  title: '',
  status: 'idle',
  isVisible: false,
  boundingBox: {
    top: 0,
    left: 0,
    width: 0,
    height: 0,
  },
};

type Selector<T> = (state: UIArtifact) => T;

export function useArtifactSelector<Selected>(selector: Selector<Selected>) {
  const { data: localArtifact } = useSWR<UIArtifact>('artifact', null, {
    fallbackData: initialArtifactData,
  });

  const selectedValue = useMemo(() => {
    if (!localArtifact) return selector(initialArtifactData);
    return selector(localArtifact);
  }, [localArtifact, selector]);

  return selectedValue;
}

// –ü—Ä–æ—Å—Ç–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
export const useArtifact = (chatId?: string, initialMessages?: UIMessage[]) => {
  console.log('üîç useArtifact hook called with:', {
    chatId,
    initialMessagesLength: initialMessages?.length,
  });

  const { data: localArtifact, mutate: setLocalArtifact } = useSWR<UIArtifact>(
    'artifact',
    null,
    {
      fallbackData: initialArtifactData,
    },
  );

  const artifact = useMemo(() => {
    return localArtifact || initialArtifactData;
  }, [localArtifact]);

  const setArtifact = useCallback(
    (updaterFn: UIArtifact | ((currentArtifact: UIArtifact) => UIArtifact)) => {
      console.log('üîç setArtifact called with chatId:', chatId);

      setLocalArtifact((currentArtifact) => {
        const artifactToUpdate = currentArtifact || initialArtifactData;

        let newArtifact: UIArtifact;
        if (typeof updaterFn === 'function') {
          newArtifact = updaterFn(artifactToUpdate);
        } else {
          newArtifact = updaterFn;
        }

        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        if (chatId && typeof window !== 'undefined') {
          console.log('üíæ Artifact state changed:', {
            chatId,
            documentId: newArtifact.documentId,
            status: newArtifact.status,
            isVisible: newArtifact.isVisible,
            kind: newArtifact.kind,
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
          const shouldSave =
            newArtifact.documentId !== 'init' ||
            (newArtifact.status !== 'idle' && newArtifact.status !== 'error') ||
            newArtifact.content ||
            newArtifact.title ||
            newArtifact.isVisible;

          if (shouldSave) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            console.log('üíæ Saving artifact to storage:', {
              chatId,
              artifact: newArtifact,
            });
            saveArtifactToStorage(chatId, newArtifact);
          } else {
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            console.log(
              'üóëÔ∏è Clearing artifact from storage (init state):',
              chatId,
            );
            clearArtifactFromStorage(chatId);
          }
        } else {
          console.log('‚ö†Ô∏è Skipping save - no chatId or window:', {
            chatId,
            hasWindow: typeof window !== 'undefined',
            chatIdType: typeof chatId,
          });
        }

        return newArtifact;
      });
    },
    [setLocalArtifact, chatId],
  );

  const { data: localArtifactMetadata, mutate: setLocalArtifactMetadata } =
    useSWR<any>(
      () =>
        artifact.documentId ? `artifact-metadata-${artifact.documentId}` : null,
      null,
      {
        fallbackData: null,
      },
    );

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞
  // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  const isFirstRenderRef = useRef(true);

  useEffect(() => {
    console.log('üîç useArtifact useEffect triggered:', {
      chatId,
      isFirstRender: isFirstRenderRef.current,
      window: typeof window,
      chatIdType: typeof chatId,
    });

    // –¢–æ–ª—å–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chatId
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    if (!isFirstRenderRef.current) {
      console.log('üîç Skipping restoration - not first render');
      return;
    }

    if (chatId && typeof window !== 'undefined') {
      console.log('üîç Loading artifact from storage for chatId:', chatId);
      const savedData = loadArtifactFromStorage(chatId);
      console.log('üîç Loaded data from storage:', savedData);

      if (savedData) {
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±—ã–ª —Å–∫—Ä—ã—Ç (isVisible: false), –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª –µ–≥–æ
        // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'streaming' –∏–ª–∏ 'pending', –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (!savedData.isVisible && savedData.status !== 'streaming' && savedData.status !== 'pending') {
          console.log('üîç Skipping restore - artifact was closed by user');
          clearArtifactFromStorage(chatId);
          return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        const shouldRestore =
          savedData.isVisible ||
          savedData.status === 'streaming' ||
          savedData.status === 'pending';

        console.log('üîç Should restore artifact:', shouldRestore, {
          documentId: savedData.documentId,
          isVisible: savedData.isVisible,
          status: savedData.status,
        });

        if (shouldRestore) {

          console.log('üîÑ Restoring artifact:', {
            ...savedData,
            content: savedData.content
              ? `${savedData.content.substring(0, 100)}...`
              : 'empty',
          });

          const restoredArtifact = restoreArtifactFromData(savedData);
          setLocalArtifact((draft) => {
            console.log('üîç Setting restored artifact:', restoredArtifact);
            return {
              ...draft,
              ...restoredArtifact,
              boundingBox: draft?.boundingBox || {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
              },
            };
          });
        } else {
          // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
          console.log('üóëÔ∏è Clearing inactive artifact for chatId:', chatId);
          clearArtifactFromStorage(chatId);
        }
      } else {
        console.log('üîç No saved data found for chatId:', chatId);
      }

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
      isFirstRenderRef.current = false;
    } else {
      console.log('üîç Skipping restoration - no chatId or window:', {
        chatId,
        hasWindow: typeof window !== 'undefined',
        chatIdType: typeof chatId,
      });
    }
  }, [chatId, setLocalArtifact]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–º–µ–Ω–µ chatId
  useEffect(() => {
    isFirstRenderRef.current = true;
  }, [chatId]);

  // Expose artifact globally for debugging
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).artifactInstance = {
        artifact,
        setArtifact,
        metadata: localArtifactMetadata,
        setMetadata: setLocalArtifactMetadata,
      };
    }
  }, [artifact, setArtifact, localArtifactMetadata, setLocalArtifactMetadata]);

  const updateMessages = useCallback(
    (newMessages: UIMessage[]) => {
      console.log('üîç updateMessages called with:', {
        messagesCount: newMessages.length,
        chatId,
      });

      // AI SDK v5: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º tool invocations –≤ message.parts
      const lastMessage = newMessages[newMessages.length - 1];
      if (!lastMessage || lastMessage.role !== 'assistant') {
        console.log('üîç No assistant message to process');
        return;
      }

      console.log('üîç Checking last assistant message:', {
        id: lastMessage.id,
        partsCount: lastMessage.parts?.length || 0,
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ parts –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(
        'üîç Message parts:',
        lastMessage.parts?.map((part: any) => ({
          type: part.type,
          state: part.state,
          hasOutput: !!part.output,
        })),
      );

      // AI SDK v5: –ò—â–µ–º tool invocations —Å createDocument –∏–ª–∏ tool outputs —Å documentId
      // –í v5 createDocument –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ tool –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ createDocument
      // AI SDK v5: –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ "tool-createDocument" —Ç–∞–∫ –∏ "tool-call"
      let createDocumentPart = lastMessage.parts?.find((part: any) => {
        if (part.state !== 'output-available') return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º tool-specific —Ç–∏–ø
        if (part.type === 'tool-createDocument') return true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º generic tool-call —Å toolName
        if (part.type === 'tool-call') {
          const toolName = part.toolName || part.toolCallId;
          return toolName?.includes('createDocument');
        }

        return false;
      });

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤, –∏—â–µ–º –≤ outputs –¥—Ä—É–≥–∏—Ö tools (configureImageGeneration, configureVideoGeneration)
      if (!createDocumentPart) {
        // AI SDK v5: –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ tool-specific —Ç–∏–ø—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è "tool-call"
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º tool-call —Å toolName –∏–ª–∏ –∏—â–µ–º –ø–æ tool-specific —Ç–∏–ø—É
        const toolPart = lastMessage.parts?.find((part: any) => {
          if (part.state !== 'output-available') return false;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º generic tool-call —Å toolName
          if (part.type === 'tool-call') {
            const toolName = part.toolName || part.toolCallId;
            return (
              toolName?.includes('ImageGeneration') ||
              toolName?.includes('VideoGeneration') ||
              toolName === 'falVideoGeneration' || // Explicit check for Fal.ai video generation
              toolName?.includes('ScriptGeneration') ||
              toolName?.includes('createDocument')
            );
          }

          // –ò–ª–∏ tool-specific —Ç–∏–ø (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          return (
            part.type === 'tool-configureImageGeneration' ||
            part.type === 'tool-configureVideoGeneration' ||
            part.type === 'tool-configureScriptGeneration' ||
            part.type === 'tool-createDocument'
          );
        });

        if (toolPart) {
          console.log('üéØ Found tool with potential artifact:', {
            toolType: toolPart.type,
            toolName: (toolPart as any).toolName || (toolPart as any).toolCallId,
            output: (toolPart as any).output,
          });

          // AI SDK v5: Check if artifact is in output.parts[0] (nested structure)
          const artifactData = (toolPart as any).output?.parts?.[0] || (toolPart as any).output;

          console.log('üîç Checking artifact data:', {
            hasId: !!artifactData?.id,
            hasArtifactId: !!artifactData?.artifactId,
            hasKind: !!artifactData?.kind,
            kind: artifactData?.kind,
            id: artifactData?.id,
            artifactId: artifactData?.artifactId,
          });

          // Check for both id and artifactId (different tools use different field names)
          const documentId = artifactData?.id || artifactData?.artifactId;

          if (documentId && artifactData.kind) {
            console.log('‚úÖ Found artifact data:', {
              ...artifactData,
              documentId,
            });
            // Normalize to always use 'id' field
            createDocumentPart = {
              ...toolPart,
              output: { ...artifactData, id: documentId },
            } as any;
          } else {
            console.warn('‚ö†Ô∏è Tool part found but missing required fields:', {
              hasDocumentId: !!documentId,
              hasKind: !!artifactData?.kind,
              artifactData,
            });
          }
        }
      }

      if (createDocumentPart) {
        console.log('üéØ Found document/artifact:', createDocumentPart);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const output = (createDocumentPart as any).output;
        if (output?.id) {
          console.log('üìÑ Found artifact in messages:', {
            id: output.id,
            kind: output.kind,
            title: output.title,
          });

          setArtifact((prev) => {
            // –ï—Å–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å —Ç–µ–º –∂–µ ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—ã–ª –∑–∞–∫—Ä—ã—Ç (isVisible: false),
            // –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
            if (prev.documentId === output.id && !prev.isVisible) {
              console.log('üîç Artifact was closed by user, not reopening');
              return prev;
            }

            // –ò–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            console.log('üìÑ Opening/updating artifact');
            return {
              ...prev,
              documentId: output.id,
              kind: output.kind || 'text',
              title: output.title || '',
              content: output.content || '',
              isVisible: true,
              status: 'streaming',
            };
          });
        }
      } else {
        console.log('üîç No artifact found in last message');
      }
    },
    [chatId, setArtifact],
  );

  const metadata = localArtifactMetadata || null;

  const setMetadata = useCallback(
    (updaterFn: any | ((currentMetadata: any) => any)) => {
      setLocalArtifactMetadata((currentMetadata: any) => {
        if (typeof updaterFn === 'function') {
          return updaterFn(currentMetadata);
        } else {
          return updaterFn;
        }
      });
    },
    [setLocalArtifactMetadata],
  );

  return useMemo(
    () => ({
      artifact,
      setArtifact,
      metadata,
      setMetadata,
      updateMessages,
    }),
    [artifact, setArtifact, metadata, setMetadata, updateMessages],
  );
};

// –•—É–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ chatId) - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç useArtifact
export const useArtifactLegacy = (
  chatId?: string,
  initialMessages?: UIMessage[],
) => {
  console.log('üîç useArtifactLegacy called - using fallback without chatId');
  return useArtifact(chatId, initialMessages);
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ useArtifactContext –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
