#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ Gemini
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node switch-gemini-model.mjs                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏
 *   node switch-gemini-model.mjs gemini-2.0-flash   # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å main –º–æ–¥–µ–ª—å
 *   node switch-gemini-model.mjs --list             # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
 */

import { readFileSync, writeFileSync, existsSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import { dirname, join } from 'node:path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const ENV_FILE = join(__dirname, '.env.local');

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
const POPULAR_MODELS = {
  'gemini-2.5-flash': '–°—Ç–∞–±–∏–ª—å–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è (–∏—é–Ω—å 2025) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è',
  'gemini-2.5-flash-lite': '–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.5',
  'gemini-2.5-pro': 'Pro –≤–µ—Ä—Å–∏—è 2.5 - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
  'gemini-2.0-flash': 'Flash 2.0',
  'gemini-2.0-flash-001': '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.0',
  'gemini-2.0-flash-lite': '–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.0',
  'gemini-flash-latest': '–í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è Flash (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)',
  'gemini-pro-latest': '–í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è Pro (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)',
};

function readEnvFile() {
  if (!existsSync(ENV_FILE)) {
    console.error('‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ .env.local –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.local.example');
    process.exit(1);
  }
  return readFileSync(ENV_FILE, 'utf-8');
}

function writeEnvFile(content) {
  writeFileSync(ENV_FILE, content, 'utf-8');
}

function getCurrentModels(envContent) {
  const mainMatch = envContent.match(/GEMINI_MAIN_MODEL=(.+)/);
  const proMatch = envContent.match(/GEMINI_PRO_MODEL=(.+)/);
  const flashMatch = envContent.match(/GEMINI_FLASH_MODEL=(.+)/);

  return {
    main: mainMatch ? mainMatch[1].trim() : 'gemini-2.5-flash (default)',
    pro: proMatch ? proMatch[1].trim() : 'gemini-2.5-pro (default)',
    flash: flashMatch ? flashMatch[1].trim() : 'gemini-2.5-flash (default)',
  };
}

function updateMainModel(envContent, newModel) {
  const mainRegex = /GEMINI_MAIN_MODEL=.+/;

  if (mainRegex.test(envContent)) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    return envContent.replace(mainRegex, `GEMINI_MAIN_MODEL=${newModel}`);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ GOOGLE_AI_API_KEY
    const lines = envContent.split('\n');
    const apiKeyIndex = lines.findIndex((line) =>
      line.startsWith('GOOGLE_AI_API_KEY='),
    );

    if (apiKeyIndex === -1) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
      return `${envContent}\n\n# Gemini Model Configuration\nGEMINI_MAIN_MODEL=${newModel}\n`;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ GOOGLE_AI_API_KEY
    lines.splice(apiKeyIndex + 1, 0, `GEMINI_MAIN_MODEL=${newModel}`);
    return lines.join('\n');
  }
}

function showCurrentConfig() {
  const envContent = readEnvFile();
  const models = getCurrentModels(envContent);

  console.log('\nüìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Gemini:\n');
  console.log(`   Main:  ${models.main}`);
  console.log(`   Pro:   ${models.pro}`);
  console.log(`   Flash: ${models.flash}`);
  console.log(
    '\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node switch-gemini-model.mjs <model-name>',
  );
  console.log('üí° –î–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: node switch-gemini-model.mjs --list\n');
}

function listModels() {
  console.log('\nü§ñ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini:\n');

  for (const [model, description] of Object.entries(POPULAR_MODELS)) {
    console.log(`   ${model.padEnd(30)} - ${description}`);
  }

  console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node list-gemini-models.mjs');
  console.log(
    'üí° –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: node switch-gemini-model.mjs <model-name>\n',
  );
}

function switchModel(newModel) {
  const envContent = readEnvFile();
  const updatedContent = updateMainModel(envContent, newModel);

  writeEnvFile(updatedContent);

  console.log(`\n‚úÖ Main –º–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newModel}`);
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  showCurrentConfig();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  showCurrentConfig();
} else if (args[0] === '--list' || args[0] === '-l') {
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
  listModels();
} else {
  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å
  const newModel = args[0];
  switchModel(newModel);
}
