#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ç—É—Ä–±–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
 */

const fs = require('node:fs');
const path = require('node:path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');

const projectRoot = path.resolve(__dirname, '..');
const workspaceRoot = path.resolve(projectRoot, '..', '..');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –ø—Ä–æ–µ–∫—Ç–∞
const packageJsonPath = path.join(projectRoot, 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

console.log('üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:');
const workspaceDeps = Object.keys(packageJson.dependencies || {}).filter(
  (dep) => dep.startsWith('@turbo-super/'),
);
const workspaceDevDeps = Object.keys(packageJson.devDependencies || {}).filter(
  (dep) => dep.startsWith('@turbo-super/'),
);

console.log('   Workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', workspaceDeps);
console.log('   Workspace dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', workspaceDevDeps);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–∫–µ—Ç–æ–≤
console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–∫–µ—Ç–æ–≤:');
const packagesDir = path.join(workspaceRoot, 'packages');

if (fs.existsSync(packagesDir)) {
  const packages = fs
    .readdirSync(packagesDir, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  console.log('   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:', packages);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π workspace –ø–∞–∫–µ—Ç
  for (const dep of [...workspaceDeps, ...workspaceDevDeps]) {
    const packageName = dep.replace('@turbo-super/', '');
    const packagePath = path.join(packagesDir, packageName);

    if (fs.existsSync(packagePath)) {
      const packageJsonPath = path.join(packagePath, 'package.json');
      if (fs.existsSync(packageJsonPath)) {
        const pkgJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        console.log(`   ‚úÖ ${dep}: ${pkgJson.version}`);
      } else {
        console.log(`   ‚ùå ${dep}: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } else {
      console.log(`   ‚ùå ${dep}: –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
} else {
  console.log('   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è packages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules:');
const nodeModulesPath = path.join(projectRoot, 'node_modules');

if (fs.existsSync(nodeModulesPath)) {
  for (const dep of [...workspaceDeps, ...workspaceDevDeps]) {
    const depPath = path.join(nodeModulesPath, dep);
    if (fs.existsSync(depPath)) {
      console.log(`   ‚úÖ ${dep}: –Ω–∞–π–¥–µ–Ω –≤ node_modules`);
    } else {
      console.log(`   ‚ùå ${dep}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_modules`);
    }
  }
} else {
  console.log('   ‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º pnpm-workspace.yaml
console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ workspace –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
const workspaceYamlPath = path.join(workspaceRoot, 'pnpm-workspace.yaml');
if (fs.existsSync(workspaceYamlPath)) {
  console.log('   ‚úÖ pnpm-workspace.yaml –Ω–∞–π–¥–µ–Ω');
  const workspaceYaml = fs.readFileSync(workspaceYamlPath, 'utf8');
  console.log('   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', workspaceYaml.trim());
} else {
  console.log('   ‚ùå pnpm-workspace.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ workspace –ø–∞–∫–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ pnpm install –≤ –∫–æ—Ä–Ω–µ workspace');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ pnpm-workspace.yaml —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏');
console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã');

console.log('\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
console.log('   cd ../../');
console.log('   pnpm install');
console.log('   pnpm build');
